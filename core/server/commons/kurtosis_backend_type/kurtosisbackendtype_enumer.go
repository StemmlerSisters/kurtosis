// Code generated by "enumer -type=KurtosisBackendType -transform=lower"; DO NOT EDIT.

package kurtosis_backend_type

import (
	"fmt"
	"strings"
)

const _KurtosisBackendTypeName = "dockerkubernetes"

var _KurtosisBackendTypeIndex = [...]uint8{0, 6, 16}

const _KurtosisBackendTypeLowerName = "dockerkubernetes"

func (i KurtosisBackendType) String() string {
	if i >= KurtosisBackendType(len(_KurtosisBackendTypeIndex)-1) {
		return fmt.Sprintf("KurtosisBackendType(%d)", i)
	}
	return _KurtosisBackendTypeName[_KurtosisBackendTypeIndex[i]:_KurtosisBackendTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _KurtosisBackendTypeNoOp() {
	var x [1]struct{}
	_ = x[Docker-(0)]
	_ = x[Kubernetes-(1)]
}

var _KurtosisBackendTypeValues = []KurtosisBackendType{Docker, Kubernetes}

var _KurtosisBackendTypeNameToValueMap = map[string]KurtosisBackendType{
	_KurtosisBackendTypeName[0:6]:       Docker,
	_KurtosisBackendTypeLowerName[0:6]:  Docker,
	_KurtosisBackendTypeName[6:16]:      Kubernetes,
	_KurtosisBackendTypeLowerName[6:16]: Kubernetes,
}

var _KurtosisBackendTypeNames = []string{
	_KurtosisBackendTypeName[0:6],
	_KurtosisBackendTypeName[6:16],
}

// KurtosisBackendTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func KurtosisBackendTypeString(s string) (KurtosisBackendType, error) {
	if val, ok := _KurtosisBackendTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _KurtosisBackendTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to KurtosisBackendType values", s)
}

// KurtosisBackendTypeValues returns all values of the enum
func KurtosisBackendTypeValues() []KurtosisBackendType {
	return _KurtosisBackendTypeValues
}

// KurtosisBackendTypeStrings returns a slice of all String values of the enum
func KurtosisBackendTypeStrings() []string {
	strs := make([]string, len(_KurtosisBackendTypeNames))
	copy(strs, _KurtosisBackendTypeNames)
	return strs
}

// IsAKurtosisBackendType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i KurtosisBackendType) IsAKurtosisBackendType() bool {
	for _, v := range _KurtosisBackendTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
