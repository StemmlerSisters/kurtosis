// Code generated by "enumer -type=EngineStatus"; DO NOT EDIT.

package engine

import (
	"fmt"
	"strings"
)

const _EngineStatusName = "EngineStatus_StoppedEngineStatus_Running"

var _EngineStatusIndex = [...]uint8{0, 20, 40}

const _EngineStatusLowerName = "enginestatus_stoppedenginestatus_running"

func (i EngineStatus) String() string {
	if i < 0 || i >= EngineStatus(len(_EngineStatusIndex)-1) {
		return fmt.Sprintf("EngineStatus(%d)", i)
	}
	return _EngineStatusName[_EngineStatusIndex[i]:_EngineStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _EngineStatusNoOp() {
	var x [1]struct{}
	_ = x[EngineStatus_Stopped-(0)]
	_ = x[EngineStatus_Running-(1)]
}

var _EngineStatusValues = []EngineStatus{EngineStatus_Stopped, EngineStatus_Running}

var _EngineStatusNameToValueMap = map[string]EngineStatus{
	_EngineStatusName[0:20]:       EngineStatus_Stopped,
	_EngineStatusLowerName[0:20]:  EngineStatus_Stopped,
	_EngineStatusName[20:40]:      EngineStatus_Running,
	_EngineStatusLowerName[20:40]: EngineStatus_Running,
}

var _EngineStatusNames = []string{
	_EngineStatusName[0:20],
	_EngineStatusName[20:40],
}

// EngineStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EngineStatusString(s string) (EngineStatus, error) {
	if val, ok := _EngineStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _EngineStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to EngineStatus values", s)
}

// EngineStatusValues returns all values of the enum
func EngineStatusValues() []EngineStatus {
	return _EngineStatusValues
}

// EngineStatusStrings returns a slice of all String values of the enum
func EngineStatusStrings() []string {
	strs := make([]string, len(_EngineStatusNames))
	copy(strs, _EngineStatusNames)
	return strs
}

// IsAEngineStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i EngineStatus) IsAEngineStatus() bool {
	for _, v := range _EngineStatusValues {
		if i == v {
			return true
		}
	}
	return false
}
