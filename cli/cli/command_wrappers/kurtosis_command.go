package command_wrappers

import "github.com/spf13/cobra"

// After the input the user entered is parsed, flag values will be categorized by these keys
type FlagKey string

// After the input the user entered is parsed, positional arg values will be categorized by these keys
type PositionalArgKey string

// This is a struct that can take higher-level, Kurtosis-specific information (e.g. "this command takes in an enclave ID")
//  and generate the low-level cobra.Command corresponding to that information (with autogenerated usage information, etc.)
type KurtosisCommand struct {
	// The string for the command (e.g. "inspect" or "ls")
	CommandStr string

	// TODO
	Flags // TODO

	// TODO
	PositionalArgGroups []PositionalArgsGroup

	RunFunc func() error
}


// TODO Set DisableFlagsInUseLine: true when we have positional arguments


// Gets the Cobra commnad, and panics if there's an error
func (kurtosisCmd *KurtosisCommand) MustGetCobraCommand() {

	// TODO validation on the Kurtosis command
	perArgGroupConsumedStrs := [][]string{}
	for _, argGroup := range kurtosisCmd.PositionalArgGroups {
		argStrConsumer := argGroup.getArgStrConsumer()
	}

	cobraRunFunc := func(cmd *cobra.Command, args []string) error {

		// TODO get number of args consumed


	}

	// TODO build cobra command
}

// TENETS:
//  * String consumption is not dependent on parse (allows us to detect invalid string consumption states)
//  * Parse happens iteratively, and depends on previously-parsed results


// What we need for enclave objects:
// An argument that's definitively enclave-id
// An argument for the object that references the enclave-id argument