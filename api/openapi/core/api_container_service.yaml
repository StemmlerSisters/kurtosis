openapi: 3.0.0
info:
  title: Enclave API
  description: API to manipulate the enclaves
  version: "1"
paths:

  /enclaves/{enclave_identifier}/starlark:
    get:
      description: Get last Starlark run
      parameters:
        - $ref: '#/components/parameters/enclave_identifier'
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStarlarkRunResponse"

  /enclaves/{enclave_identifier}/starlark/packages:
    post:
      description: Uploads a Starlark package. This step is required before the package can be executed with RunStarlarkPackage
      parameters:
        - $ref: '#/components/parameters/enclave_identifier'
      requestBody:
        $ref: "#/components/requestBodies/fileUploadBody"
      responses:
        "200":
          $ref: "#/components/responses/Success"

  /enclaves/{enclave_identifier}/starlark/packages/{package_id}:
    post:
      description: Executes a Starlark script on the user's behalf
      parameters:
        - $ref: '#/components/parameters/enclave_identifier'
        - $ref: '#/components/parameters/package_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunStarlarkPackageArgs"
        required: true
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StarlarkRunResponseLine"

  /enclaves/{enclave_identifier}/starlark/scripts:
    post:
      description: Executes a Starlark script on the user's behalf
      parameters:
        - $ref: '#/components/parameters/enclave_identifier'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunStarlarkScriptArgs"
        required: true
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StarlarkRunResponseLine"

  /enclaves/{enclave_identifier}/services:
    get:
      description: Returns information about all existing & historical services
      parameters:
        - $ref: '#/components/parameters/enclave_identifier'
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetExistingAndHistoricalServiceIdentifiersResponse"

  /enclaves/{enclave_identifier}/services/{service_identifier}:
    get:
      parameters:
        - $ref: '#/components/parameters/enclave_identifier'
        - $ref: '#/components/parameters/service_identifier'
        - in: query
          name: additional-properties
          schema:
            type: string
          description: Additional properties
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetServicesResponse"

  /enclaves/{enclave_identifier}/services/{service_identifier}/command:
    post:
      description: Executes the given command inside a running container
      parameters:
        - $ref: '#/components/parameters/enclave_identifier'
        - $ref: '#/components/parameters/service_identifier'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecCommandArgs"
        description: Exec Command
        required: true
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecCommandResponse"

  /enclaves/{enclave_identifier}/services/{service_identifier}/endpoints/{port_number}/availability:
    post:
      description: Block until the given HTTP endpoint returns available, calling it through a HTTP Get request
      parameters:
        - $ref: '#/components/parameters/enclave_identifier'
        - $ref: '#/components/parameters/service_identifier'
        - $ref: '#/components/parameters/port_number'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WaitForEndpointAvailabilityArgs"
        description: Wait For HTTP Get Endpoint Availability
        required: true
      responses:
        "200":
          $ref: "#/components/responses/Success"

  /enclaves/{enclave_identifier}/artifacts:
    get:
      description: List all files artifacts
      parameters:
        - $ref: '#/components/parameters/enclave_identifier'
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListFilesArtifactNamesAndUuidsResponse"

  /enclaves/{enclave_identifier}/artifacts/{artifact_identifier}:
    get:
      parameters:
        - $ref: '#/components/parameters/enclave_identifier'
        - $ref: '#/components/parameters/artifact_identifier'
      description: Inspect the content of a file artifact
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InspectFilesArtifactContentsResponse"

  /enclaves/{enclave_identifier}/artifacts/{artifact_identifier}/download:
    get:
      description: Downloads a files artifact from the Kurtosis File System
      parameters:
        - $ref: '#/components/parameters/enclave_identifier'
        - $ref: '#/components/parameters/artifact_identifier'
      responses:
        "200":
          description: Successful request
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

  /enclaves/{enclave_identifier}/artifacts/local-file:
    post:
      description: Uploads a files artifact to the Kurtosis File System
      parameters:
        - $ref: '#/components/parameters/enclave_identifier'
      requestBody:
        $ref: "#/components/requestBodies/fileUploadBody"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/FileArtifactReference"

  /enclaves/{enclave_identifier}/artifacts/remote-file:
    put:
      description: Tells the API container to download a files artifact from the web to the Kurtosis File System
      parameters:
        - $ref: '#/components/parameters/enclave_identifier'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoreWebFilesArtifactArgs"
        description: Store Web Files Artifact
        required: true
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileArtifactReference"

  /enclaves/{enclave_identifier}/artifacts/services/{service_identifier}:
    put:
      description: Tells the API container to copy a files artifact from a service to the Kurtosis File System
      parameters:
        - $ref: '#/components/parameters/enclave_identifier'
        - $ref: '#/components/parameters/service_identifier'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoreFilesArtifactFromServiceArgs"
        required: true
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileArtifactReference"

  /enclaves/{enclave_identifier}/services/connection:
    post:
      description: User services port forwarding
      parameters:
        - $ref: '#/components/parameters/enclave_identifier'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectServicesArgs"
        required: true
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectServicesResponse"
components:

  parameters:
    enclave_identifier:
      in: path
      name: enclave_identifier
      schema:
        type: string
        description: The package identifier that will be executed
      required: true

    service_identifier:
      in: path
      name: service_identifier
      schema:
        type: string
      description: The service identifier of the container that the command should be executed in
      required: true
        
    port_number:
      in: path
      name: port_number
      schema:
        type: integer
        format: int32
      description: The port number to check availability
      required: true
  
    artifact_identifier:
      in: path
      name: artifact_identifier
      schema:
        type: string
      description: The artifact name or uuid
      required: true
        
    package_id:
      in: path
      name: package_id
      schema:
        type: string
      description: The package identifier that will be executed
      required: true

  requestBodies:

    fileUploadBody:
      content:
        multipart/form-data:
          schema:
            type: string
            format: binary

  responses:
  
    Success:
      content:
        "*/*":
          schema:
            type: string
      description: Success

  schemas:

    Port:
      type: object
      properties:
        number:
          type: integer
          format: int32
        transport_protocol:
          $ref: "#/components/schemas/Port.TransportProtocol"
        maybe_application_protocol:
          type: string
        maybe_wait_timeout:
          type: string
          description: The wait timeout duration in string
      required:
        - number
        - transport_protocol
      description: Shared Objects (Used By Multiple Endpoints)

    Container:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/Container.Status"
        image_name:
          type: string
        entrypoint_args:
          type: array
          items:
            type: string
        cmd_args:
          type: array
          items:
            type: string
        env_vars:
          type: object
          additionalProperties:
            type: string

    ServiceStatus:
      type: string
      enum:
        - STOPPED
        - RUNNING
        - UNKNOWN
      description: |-
        0 - STOPPED 
        1 - RUNNING 
        2 - UNKNOWN

    ImageDownloadMode:
      type: string
      enum:
        - ALWAYS
        - MISSING
      description: |-
        0 - ALWAYS 
        1 - MISSING

    ServiceInfo:
      type: object
      properties:
        service_uuid:
          type: string
          description: UUID of the service
        private_ip_addr:
          type: string
          description: The IP address of the service inside the enclave
        private_ports:
          $ref: "#/components/schemas/Port"
        maybe_public_ip_addr:
          type: string
          description: |-
            Public IP address *outside* the enclave where the service is reachable
            NOTE: Will be empty if the service isn't running, the service didn't define any ports, or the backend doesn't support reporting public service info
        maybe_public_ports:
          $ref: "#/components/schemas/Port"
        name:
          type: string
          description: Name of the service
        shortened_uuid:
          type: string
          description: Shortened uuid of the service
        service_status:
          $ref: "#/components/schemas/ServiceStatus"
        container:
          $ref: "#/components/schemas/Container"

    Connect:
      type: string
      enum:
        - CONNECT
        - NO_CONNECT
      description: |-
        0 - CONNECT // Best effort port forwarding
        1 - NO_CONNECT // Port forwarding disabled

    RunStarlarkScriptArgs:
      type: object
      properties:
        serialized_script:
          type: string
        serialized_params:
          type: string
        dry_run:
          type: boolean
          description: Defaults to false
        parallelism:
          type: integer
          format: int32
          description: Defaults to 4
        main_function_name:
          type: string
          description: The name of the main function, the default value is "run"
        experimental_features:
          type: array
          items:
            $ref: "#/components/schemas/KurtosisFeatureFlag"
        cloud_instance_id:
          type: string
          description: Defaults to empty
        cloud_user_id:
          type: string
          description: Defaults to empty
        image_download_mode:
          $ref: "#/components/schemas/ImageDownloadMode"

    RunStarlarkPackageArgs:
      type: object
      properties:
        package_id:
          type: string
        local:
          type: string
          format: byte
          description: the payload of the local module
        remote:
          type: boolean
          description: just a flag to indicate the module must be cloned inside the API
        serialized_params:
          type: string
          description: |-
            Serialized parameters data for the Starlark package main function
            This should be a valid JSON string
        dry_run:
          type: boolean
          description: Defaults to false
        parallelism:
          type: integer
          format: int32
          description: Defaults to 4
        clone_package:
          type: boolean
          description: |-
            Whether the package should be cloned or not.
            If false, then the package will be pulled from the APIC local package store. If it's a local package then is must
            have been uploaded using UploadStarlarkPackage prior to calling RunStarlarkPackage.
            If true, then the package will be cloned from GitHub before execution starts
        relative_path_to_main_file:
          type: string
          description: The relative main file filepath, the default value is the "main.star" file in the root of a package
        main_function_name:
          type: string
          description: The name of the main function, the default value is "run"
        experimental_features:
          type: array
          items:
            $ref: "#/components/schemas/KurtosisFeatureFlag"
        cloud_instance_id:
          type: string
          description: Defaults to empty
        cloud_user_id:
          type: string
          description: Defaults to empty
        image_download_mode:
          $ref: "#/components/schemas/ImageDownloadMode"

    KurtosisFeatureFlag:
      type: string
      enum:
        - NO_INSTRUCTIONS_CACHING
      description: "0 - NO_INSTRUCTIONS_CACHING "

    StarlarkRunResponseLine:
      type: object
      properties:
        instruction:
          $ref: "#/components/schemas/StarlarkInstruction"
        error:
          $ref: "#/components/schemas/StarlarkError"
        progress_info:
          $ref: "#/components/schemas/StarlarkRunProgress"
        instruction_result:
          $ref: "#/components/schemas/StarlarkInstructionResult"
        run_finished_event:
          $ref: "#/components/schemas/StarlarkRunFinishedEvent"
        warning:
          $ref: "#/components/schemas/StarlarkWarning"
        info:
          $ref: "#/components/schemas/StarlarkInfo"
      description: |-
        Starlark Execution Response

    StarlarkInfo:
      type: object
      properties:
        info_message:
          type: string

    StarlarkWarning:
      type: object
      properties:
        warning_message:
          type: string

    StarlarkInstruction:
      type: object
      properties:
        position:
          $ref: "#/components/schemas/StarlarkInstructionPosition"
        instruction_name:
          type: string
        arguments:
          type: array
          items:
            $ref: "#/components/schemas/StarlarkInstructionArg"
        executable_instruction:
          type: string
        is_skipped:
          type: boolean

    StarlarkInstructionResult:
      type: object
      properties:
        serialized_instruction_result:
          type: string

    StarlarkInstructionArg:
      type: object
      properties:
        serialized_arg_value:
          type: string
        arg_name:
          type: string
        is_representative:
          type: boolean

    StarlarkInstructionPosition:
      type: object
      properties:
        filename:
          type: string
        line:
          type: integer
          format: int32
        column:
          type: integer
          format: int32

    StarlarkError:
      type: object
      properties:
        interpretation_error:
          $ref: "#/components/schemas/StarlarkInterpretationError"
        validation_error:
          $ref: "#/components/schemas/StarlarkValidationError"
        execution_error:
          $ref: "#/components/schemas/StarlarkExecutionError"

    StarlarkInterpretationError:
      type: object
      properties:
        error_message:
          type: string

    StarlarkValidationError:
      type: object
      properties:
        error_message:
          type: string

    StarlarkExecutionError:
      type: object
      properties:
        error_message:
          type: string

    StarlarkRunProgress:
      type: object
      properties:
        current_step_info:
          type: array
          items:
            type: string
        total_steps:
          type: integer
          format: int32
        current_step_number:
          type: integer
          format: int32

    StarlarkRunFinishedEvent:
      type: object
      properties:
        is_run_successful:
          type: boolean
        serialized_output:
          type: string

    GetServicesResponse:
      type: object
      properties:
        service_info:
          $ref: "#/components/schemas/ServiceInfo"

    ServiceIdentifiers:
      type: object
      properties:
        service_uuid:
          type: string
          description: UUID of the service
        name:
          type: string
          description: Name of the service
        shortened_uuid:
          type: string
          description: The shortened uuid of the service
      description: An service identifier is a collection of uuid, name and shortened uuid

    GetExistingAndHistoricalServiceIdentifiersResponse:
      type: object
      properties:
        allIdentifiers:
          type: array
          items:
            $ref: "#/components/schemas/ServiceIdentifiers"

    ExecCommandArgs:
      type: object
      properties:
        command_args:
          type: array
          items:
            type: string
      description: |-
        Exec Command

    ExecCommandResponse:
      type: object
      properties:
        exit_code:
          type: integer
          format: int32
        log_output:
          type: string
          description: Assumes UTF-8 encoding

    WaitForEndpointAvailabilityArgs:
      type: object
      properties:
        http_method:
          type: string
          enum: [GET, POST]
        path:
          type: string
          description: The path of the service to check. It mustn't start with the first slash. For instance `service/health`
        initial_delay_milliseconds:
          type: integer
          format: int32
          description: The number of milliseconds to wait until executing the first HTTP call
        retries:
          type: integer
          format: int32
          description: Max number of HTTP call attempts that this will execute until giving up and returning an error
        retries_delay_milliseconds:
          type: integer
          format: int32
          description: Number of milliseconds to wait between retries
        body_text:
          type: string
          description: If the endpoint returns this value, the service will be marked as available (e.g. Hello World).
      description: Wait For HTTP Endpoint Availability

    FileArtifactReference:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the files artifact, for use when referencing it in the future
        name:
          type: string
          description: UUID of the files artifact, for use when referencing it in the future
      description: |-
        Files Artifact identifier

    DownloadFilesArtifactArgs:
      type: object
      properties:
        identifier:
          type: string
          description: Files identifier to get bytes for
      description: |-
        Download Files Artifact

    StoreWebFilesArtifactArgs:
      type: object
      properties:
        url:
          type: string
          description: URL to download the artifact from
        name:
          type: string
          description: The name of the files artifact
      required:
        - url
        - name
      description: |-
        Store Web Files Artifact

    StoreFilesArtifactFromServiceArgs:
      type: object
      properties:
        source_path:
          type: string
          description: The absolute source path where the source files will be copied from
        name:
          type: string
          description: The name of the files artifact
      required:
        - source_path
        - name

    ListFilesArtifactNamesAndUuidsResponse:
      type: object
      properties:
        file_names_and_uuids:
          type: array
          items:
            $ref: "#/components/schemas/FileArtifactReference"

    InspectFilesArtifactContentsRequest:
      type: object
      properties:
        file_names_and_uuid:
          $ref: "#/components/schemas/FileArtifactReference"

    InspectFilesArtifactContentsResponse:
      type: object
      properties:
        file_descriptions:
          type: array
          items:
            $ref: "#/components/schemas/FileArtifactContentsFileDescription"

    FileArtifactContentsFileDescription:
      type: object
      properties:
        path:
          type: string
          description: Path relative to the file artifact
        size:
          type: integer
          format: int64
          description: Size of the file, in bytes
        text_preview:
          type: string
          description: A bit of text content, if the file allows (similar to UNIX's 'head')

    ConnectServicesArgs:
      type: object
      properties:
        connect:
          $ref: "#/components/schemas/Connect"

    ConnectServicesResponse:
      type: object
      properties: {}

    RestartPolicy:
      type: string
      enum:
        - NEVER
        - ALWAYS
      description: |-
        0 - NEVER 
        1 - ALWAYS

    GetStarlarkRunResponse:
      type: object
      properties:
        package_id:
          type: string
        serialized_script:
          type: string
        serialized_params:
          type: string
        parallelism:
          type: integer
          format: int32
        relative_path_to_main_file:
          type: string
        main_function_name:
          type: string
        experimental_features:
          type: array
          items:
            $ref: "#/components/schemas/KurtosisFeatureFlag"
        restart_policy:
          $ref: "#/components/schemas/RestartPolicy"

    Port.TransportProtocol:
      type: string
      enum:
        - TCP
        - SCTP
        - UDP
      description: |-
        0 - TCP 
        1 - SCTP 
        2 - UDP

    Container.Status:
      type: string
      enum:
        - STOPPED
        - RUNNING
        - UNKNOWN
      description: |-
        0 - STOPPED 
        1 - RUNNING 
        2 - UNKNOWN
