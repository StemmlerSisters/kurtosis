// Package kurtosis_websocket_api_bindings provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package kurtosis_websocket_api_bindings

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Service Logs
	// (GET /enclaves/{enclave_identifier}/logs)
	GetEnclavesEnclaveIdentifierLogs(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, params GetEnclavesEnclaveIdentifierLogsParams) error
	// Get Service Logs
	// (GET /enclaves/{enclave_identifier}/services/{service_uuid}/logs)
	GetEnclavesEnclaveIdentifierServicesServiceUuidLogs(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceUuid ServiceUuid, params GetEnclavesEnclaveIdentifierServicesServiceUuidLogsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetEnclavesEnclaveIdentifierLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnclavesEnclaveIdentifierLogsParams
	// ------------- Required query parameter "service_uuid_set" -------------

	err = runtime.BindQueryParameter("form", true, true, "service_uuid_set", ctx.QueryParams(), &params.ServiceUuidSet)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_uuid_set: %s", err))
	}

	// ------------- Optional query parameter "follow_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow_logs", ctx.QueryParams(), &params.FollowLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow_logs: %s", err))
	}

	// ------------- Optional query parameter "conjunctive_filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "conjunctive_filters", ctx.QueryParams(), &params.ConjunctiveFilters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter conjunctive_filters: %s", err))
	}

	// ------------- Optional query parameter "return_all_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "return_all_logs", ctx.QueryParams(), &params.ReturnAllLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter return_all_logs: %s", err))
	}

	// ------------- Optional query parameter "num_log_lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "num_log_lines", ctx.QueryParams(), &params.NumLogLines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter num_log_lines: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierLogs(ctx, enclaveIdentifier, params)
	return err
}

// GetEnclavesEnclaveIdentifierServicesServiceUuidLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServicesServiceUuidLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_uuid" -------------
	var serviceUuid ServiceUuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_uuid", runtime.ParamLocationPath, ctx.Param("service_uuid"), &serviceUuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_uuid: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnclavesEnclaveIdentifierServicesServiceUuidLogsParams
	// ------------- Optional query parameter "follow_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow_logs", ctx.QueryParams(), &params.FollowLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow_logs: %s", err))
	}

	// ------------- Optional query parameter "conjunctive_filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "conjunctive_filters", ctx.QueryParams(), &params.ConjunctiveFilters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter conjunctive_filters: %s", err))
	}

	// ------------- Optional query parameter "return_all_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "return_all_logs", ctx.QueryParams(), &params.ReturnAllLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter return_all_logs: %s", err))
	}

	// ------------- Optional query parameter "num_log_lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "num_log_lines", ctx.QueryParams(), &params.NumLogLines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter num_log_lines: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServicesServiceUuidLogs(ctx, enclaveIdentifier, serviceUuid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/enclaves/:enclave_identifier/logs", wrapper.GetEnclavesEnclaveIdentifierLogs)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services/:service_uuid/logs", wrapper.GetEnclavesEnclaveIdentifierServicesServiceUuidLogs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWUW+jOBD+K2juHrmQu3vjrWpzvUjZptqm2kpVhRwYEnfBpvaQ3Sjiv69sQwIJTVjt",
	"Q1/2iWBmvvlm5ptxdhDLvJACBWkId1AwxXIkVPYtluK1FDHxDUYpz5pjLiCEtxLVFnwQLEcIe0190PEa",
	"c2Z9CHPr/KfCFEL4IzgEDpyZDmZyNeMC/7P+UPlA28KAM6XYFqrKBxRxxjYY8QQF8ZSjMpgJ6ljxgrg0",
	"zB4fpze+p9dSEQpMPPculWeoejL1aI1eDQS+y6ZgtD4k0xPFB4VvJVeYQEiqxHZuNUtNiouVpZnKLJPf",
	"okyu3i1Y26QHbCllhkxYNFHmxi7KuMB38bpGPYhcEK5MWSuTC5VKRCzLznI8NrvAU6Pa8BijsuTJHrJb",
	"2Y7Jz9W07RpppPdIn9idC7OX5VG8E+lVjZe1roVqJ0bJAhVx15msPh2K6wPxHDWxvLg0HIu9oetgk9Kz",
	"C9pGetmHkctXjMnE6c7WCXHzm5FUA0d03pibDPA7RQUjQiX6W9cmuw905HiG87zFDUWZG5ib+eQhup7f",
	"La6md9Fi8rQA353dzRe9583Zp6vF9f/R58nt5KnPpf35QOnQvgenrlk9Nd0iCklRKkthdNcj1sGaaLzN",
	"0EXLbXQ8WCxJuFl2LLvvxB/QuFa4ps5VT+UXbVWmUuWMIISEEf5lZAYnlTEoXKTS5scpM9++4FLL+CuS",
	"d3U/BR82qLRb0ePR36OxiSMLFKzgEMK/o/FoDL7dFzaZoN7COtid7uMqaPbWyhXXyYpLMU0ghFukSe1d",
	"P6d715nbZO2b7rm/dAeToOdGqPyLXicqGODTvhcGmPfduwPcjjf7AJfuBVO9mLHWhRTaae+f8bj+y0Ao",
	"bEtYUWQ8tk0JXrW0u+Gwec9ptT1kVlndC/6hjGPUOi0zr6Hgbogyz5nauv57NYhXo/iXBFU3Swe7dtt+",
	"QWg1AV0/H0uefJD2fuvu43RXVT8CAAD//zaixr1kCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
