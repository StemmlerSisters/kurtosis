// Package kurtosis_engine_rest_api_bindings provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package kurtosis_engine_rest_api_bindings

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete Enclaves
	// (DELETE /enclaves)
	DeleteEnclaves(ctx echo.Context, params DeleteEnclavesParams) error
	// Get Enclaves
	// (GET /enclaves)
	GetEnclaves(ctx echo.Context) error
	// Create Enclave
	// (POST /enclaves)
	PostEnclaves(ctx echo.Context) error
	// Get Historical Enclaves
	// (GET /enclaves/historical)
	GetEnclavesHistorical(ctx echo.Context) error
	// Destroy Enclave
	// (DELETE /enclaves/{enclave_identifier})
	DeleteEnclavesEnclaveIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error
	// Get Enclave Info
	// (GET /enclaves/{enclave_identifier})
	GetEnclavesEnclaveIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error
	// Stop Enclave
	// (POST /enclaves/{enclave_identifier}/stop)
	PostEnclavesEnclaveIdentifierStop(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error
	// Get Engine Info
	// (GET /engine/info)
	GetEngineInfo(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteEnclaves converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEnclaves(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteEnclavesParams
	// ------------- Optional query parameter "remove_all" -------------

	err = runtime.BindQueryParameter("form", true, false, "remove_all", ctx.QueryParams(), &params.RemoveAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter remove_all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEnclaves(ctx, params)
	return err
}

// GetEnclaves converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclaves(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclaves(ctx)
	return err
}

// PostEnclaves converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclaves(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclaves(ctx)
	return err
}

// GetEnclavesHistorical converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesHistorical(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesHistorical(ctx)
	return err
}

// DeleteEnclavesEnclaveIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEnclavesEnclaveIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEnclavesEnclaveIdentifier(ctx, enclaveIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifier(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierStop(ctx, enclaveIdentifier)
	return err
}

// GetEngineInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetEngineInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEngineInfo(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/enclaves", wrapper.DeleteEnclaves)
	router.GET(baseURL+"/enclaves", wrapper.GetEnclaves)
	router.POST(baseURL+"/enclaves", wrapper.PostEnclaves)
	router.GET(baseURL+"/enclaves/historical", wrapper.GetEnclavesHistorical)
	router.DELETE(baseURL+"/enclaves/:enclave_identifier", wrapper.DeleteEnclavesEnclaveIdentifier)
	router.GET(baseURL+"/enclaves/:enclave_identifier", wrapper.GetEnclavesEnclaveIdentifier)
	router.POST(baseURL+"/enclaves/:enclave_identifier/stop", wrapper.PostEnclavesEnclaveIdentifierStop)
	router.GET(baseURL+"/engine/info", wrapper.GetEngineInfo)

}

type DeleteEnclavesRequestObject struct {
	Params DeleteEnclavesParams
}

type DeleteEnclavesResponseObject interface {
	VisitDeleteEnclavesResponse(w http.ResponseWriter) error
}

type DeleteEnclaves200JSONResponse DeletionSummary

func (response DeleteEnclaves200JSONResponse) VisitDeleteEnclavesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesRequestObject struct {
}

type GetEnclavesResponseObject interface {
	VisitGetEnclavesResponse(w http.ResponseWriter) error
}

type GetEnclaves200JSONResponse map[string]EnclaveInfo

func (response GetEnclaves200JSONResponse) VisitGetEnclavesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesRequestObject struct {
	Body *PostEnclavesJSONRequestBody
}

type PostEnclavesResponseObject interface {
	VisitPostEnclavesResponse(w http.ResponseWriter) error
}

type PostEnclaves200JSONResponse EnclaveInfo

func (response PostEnclaves200JSONResponse) VisitPostEnclavesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesHistoricalRequestObject struct {
}

type GetEnclavesHistoricalResponseObject interface {
	VisitGetEnclavesHistoricalResponse(w http.ResponseWriter) error
}

type GetEnclavesHistorical200JSONResponse []EnclaveIdentifiers

func (response GetEnclavesHistorical200JSONResponse) VisitGetEnclavesHistoricalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEnclavesEnclaveIdentifierRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
}

type DeleteEnclavesEnclaveIdentifierResponseObject interface {
	VisitDeleteEnclavesEnclaveIdentifierResponse(w http.ResponseWriter) error
}

type DeleteEnclavesEnclaveIdentifier200Response struct {
}

func (response DeleteEnclavesEnclaveIdentifier200Response) VisitDeleteEnclavesEnclaveIdentifierResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetEnclavesEnclaveIdentifierRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
}

type GetEnclavesEnclaveIdentifierResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifier200JSONResponse EnclaveInfo

func (response GetEnclavesEnclaveIdentifier200JSONResponse) VisitGetEnclavesEnclaveIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierStopRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
}

type PostEnclavesEnclaveIdentifierStopResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierStopResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierStop200Response struct {
}

func (response PostEnclavesEnclaveIdentifierStop200Response) VisitPostEnclavesEnclaveIdentifierStopResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetEngineInfoRequestObject struct {
}

type GetEngineInfoResponseObject interface {
	VisitGetEngineInfoResponse(w http.ResponseWriter) error
}

type GetEngineInfo200JSONResponse EngineInfo

func (response GetEngineInfo200JSONResponse) VisitGetEngineInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete Enclaves
	// (DELETE /enclaves)
	DeleteEnclaves(ctx context.Context, request DeleteEnclavesRequestObject) (DeleteEnclavesResponseObject, error)
	// Get Enclaves
	// (GET /enclaves)
	GetEnclaves(ctx context.Context, request GetEnclavesRequestObject) (GetEnclavesResponseObject, error)
	// Create Enclave
	// (POST /enclaves)
	PostEnclaves(ctx context.Context, request PostEnclavesRequestObject) (PostEnclavesResponseObject, error)
	// Get Historical Enclaves
	// (GET /enclaves/historical)
	GetEnclavesHistorical(ctx context.Context, request GetEnclavesHistoricalRequestObject) (GetEnclavesHistoricalResponseObject, error)
	// Destroy Enclave
	// (DELETE /enclaves/{enclave_identifier})
	DeleteEnclavesEnclaveIdentifier(ctx context.Context, request DeleteEnclavesEnclaveIdentifierRequestObject) (DeleteEnclavesEnclaveIdentifierResponseObject, error)
	// Get Enclave Info
	// (GET /enclaves/{enclave_identifier})
	GetEnclavesEnclaveIdentifier(ctx context.Context, request GetEnclavesEnclaveIdentifierRequestObject) (GetEnclavesEnclaveIdentifierResponseObject, error)
	// Stop Enclave
	// (POST /enclaves/{enclave_identifier}/stop)
	PostEnclavesEnclaveIdentifierStop(ctx context.Context, request PostEnclavesEnclaveIdentifierStopRequestObject) (PostEnclavesEnclaveIdentifierStopResponseObject, error)
	// Get Engine Info
	// (GET /engine/info)
	GetEngineInfo(ctx context.Context, request GetEngineInfoRequestObject) (GetEngineInfoResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// DeleteEnclaves operation middleware
func (sh *strictHandler) DeleteEnclaves(ctx echo.Context, params DeleteEnclavesParams) error {
	var request DeleteEnclavesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEnclaves(ctx.Request().Context(), request.(DeleteEnclavesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEnclaves")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteEnclavesResponseObject); ok {
		return validResponse.VisitDeleteEnclavesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclaves operation middleware
func (sh *strictHandler) GetEnclaves(ctx echo.Context) error {
	var request GetEnclavesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclaves(ctx.Request().Context(), request.(GetEnclavesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclaves")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesResponseObject); ok {
		return validResponse.VisitGetEnclavesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclaves operation middleware
func (sh *strictHandler) PostEnclaves(ctx echo.Context) error {
	var request PostEnclavesRequestObject

	var body PostEnclavesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclaves(ctx.Request().Context(), request.(PostEnclavesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclaves")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesResponseObject); ok {
		return validResponse.VisitPostEnclavesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesHistorical operation middleware
func (sh *strictHandler) GetEnclavesHistorical(ctx echo.Context) error {
	var request GetEnclavesHistoricalRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesHistorical(ctx.Request().Context(), request.(GetEnclavesHistoricalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesHistorical")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesHistoricalResponseObject); ok {
		return validResponse.VisitGetEnclavesHistoricalResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteEnclavesEnclaveIdentifier operation middleware
func (sh *strictHandler) DeleteEnclavesEnclaveIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request DeleteEnclavesEnclaveIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEnclavesEnclaveIdentifier(ctx.Request().Context(), request.(DeleteEnclavesEnclaveIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEnclavesEnclaveIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteEnclavesEnclaveIdentifierResponseObject); ok {
		return validResponse.VisitDeleteEnclavesEnclaveIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifier operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request GetEnclavesEnclaveIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifier(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierStop operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierStop(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierStopRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierStop(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierStopRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierStop")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierStopResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierStopResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEngineInfo operation middleware
func (sh *strictHandler) GetEngineInfo(ctx echo.Context) error {
	var request GetEngineInfoRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEngineInfo(ctx.Request().Context(), request.(GetEngineInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEngineInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEngineInfoResponseObject); ok {
		return validResponse.VisitGetEngineInfoResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXTW/jNhD9K8K0R9V225tuaWxkdYhjrG2gRRAIjDi2uZBIhaQCGIH/e0Hq26JkJ9ld",
	"7ClwOJx58+bNcPQGsUgzwZFrBcEbZESSFDVK+wt5nJBXjBhFrtmOoTT/pahiyTLNBIcAtttw7nvqIKRG",
	"jtQrfgvpcZKiJ3aePqBXOgIfmLmTEX0AH4wFBK4oPkh8yZlECoGWOfqg4gOmxITXx8zcUloyvofTydim",
	"4hUjkiR9eOHOsw68wsgjSVKhURNvjjuSJ9pjytuRRNUAX3KUxwZhK4ADybMQCRIOJ4OlOLXs3WTsVnBN",
	"GEe51kTnJad5CsEjfN0ul+HyDnxYbx5Wq8UcfFg+LKPFv+F6s1hu4Mk/T9WHW4lE46Jk09RLigylZmh9",
	"k4xFcRUySsQ+SvAVEwdr/pntK0rFBI802TutqxoVhDgMUkHtwe8SdxDAb9NGV9OSk2mJ+96YGq5KJ+L5",
	"G8baOJljgqZu6zxNiTz2EywKQaM2nIhwGuU5o9aCaUzVlUCWJMUbTrc5o9DAIVKSoxtfee9mFdaF/SKU",
	"vifxgXEM+U70Ie9lFkeZkDoSPDoIpaO0MG/RyLjGPUoTgmUjdh3NV/3x6Lrjj8R9ui4zdzrPktE9RiyL",
	"CKUSlXKqoREWo06DBh3jilGsKjpIyqDZACcdBC4PIxh8R5YjpNWMqeu6fHG/2vznbO/SYVgPQtUvQCV9",
	"o3gntYMtWs/oobtnFHYilX57XkZ4cQuoO3fawoxYeeGK1h1rwd5w+6BftzNV13jMnWP2t9tCXelmSGHG",
	"l3kK7Mhm6cXJu2EpKk3SrD3LBxX07ln+s0XnYnKgTudEldmNyPa+zL5q4c1ivQEfVl8f5tvbTfiwHGvd",
	"9pPSk/4gSddRU3Ix0nb7wVcI7Vn1zF9Tho69K1yjqeANdkKmREMAlGj8o2T6PISZ5CU6zXRizgrM3s0q",
	"BB9qdDCb/DmZmSAiQ04yBgH8PZlNZuDb3dGmNK3WuGLpS1Bbck3Wtt4hhaDYKKqFSdnrzYL76JZ4YzJt",
	"LX6nJ8OQygRXRci/ZjPzxygOuS5GW5aw2AafflMFzc22ONZN54uP5aq7yK7zOEaldnniVTBs1VS1K5W5",
	"enWy5plF3efkDnWLkE/lRChl5ogkq47crpgc1XQ909VHEr9D3ck6E8qR9kqobt4vOSr9j6DH71bG7np+",
	"6jaV+Qw5/UANdXj9CI0Feq+B7zc9Nj0wpYVkMbFfE5d09aWx/mTG79nn23tTf5//oLCaVFoa61Dz1v+A",
	"PV0/k3rY3z2kHN/PQ8Pq/SNFaSmOjSYuj5Sfms+v0Tit+eOVXi7pY6q0sA/n5VnVI3Rtrv5CIjF4zqeG",
	"edWn1WM/LJl6Yfmh5a2jfKK6dk2pnJz+DwAA//+JLmFXNxMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
