// Package kurtosis_engine_http_api_bindings provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package kurtosis_engine_http_api_bindings

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete Enclaves
	// (DELETE /enclaves)
	DeleteEnclaves(ctx echo.Context, params DeleteEnclavesParams) error
	// Get Enclaves
	// (GET /enclaves)
	GetEnclaves(ctx echo.Context) error
	// Create Enclave
	// (POST /enclaves)
	PostEnclaves(ctx echo.Context) error
	// Get Historical Enclaves
	// (GET /enclaves/historical)
	GetEnclavesHistorical(ctx echo.Context) error
	// Destroy Enclave
	// (DELETE /enclaves/{enclave_identifier})
	DeleteEnclavesEnclaveIdentifier(ctx echo.Context, enclaveIdentifier string) error
	// Get Enclave Info
	// (GET /enclaves/{enclave_identifier})
	GetEnclavesEnclaveIdentifier(ctx echo.Context, enclaveIdentifier string) error
	// Get Service Logs
	// (POST /enclaves/{enclave_identifier}/logs)
	PostEnclavesEnclaveIdentifierLogs(ctx echo.Context, enclaveIdentifier string) error
	// Stop Enclave
	// (POST /enclaves/{enclave_identifier}/stop)
	PostEnclavesEnclaveIdentifierStop(ctx echo.Context, enclaveIdentifier string) error
	// Get Engine Info
	// (GET /engine/info)
	GetEngineInfo(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteEnclaves converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEnclaves(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteEnclavesParams
	// ------------- Optional query parameter "remove_all" -------------

	err = runtime.BindQueryParameter("form", true, false, "remove_all", ctx.QueryParams(), &params.RemoveAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter remove_all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEnclaves(ctx, params)
	return err
}

// GetEnclaves converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclaves(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclaves(ctx)
	return err
}

// PostEnclaves converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclaves(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclaves(ctx)
	return err
}

// GetEnclavesHistorical converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesHistorical(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesHistorical(ctx)
	return err
}

// DeleteEnclavesEnclaveIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEnclavesEnclaveIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier string

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEnclavesEnclaveIdentifier(ctx, enclaveIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier string

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifier(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierLogs converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier string

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierLogs(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier string

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierStop(ctx, enclaveIdentifier)
	return err
}

// GetEngineInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetEngineInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEngineInfo(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/enclaves", wrapper.DeleteEnclaves)
	router.GET(baseURL+"/enclaves", wrapper.GetEnclaves)
	router.POST(baseURL+"/enclaves", wrapper.PostEnclaves)
	router.GET(baseURL+"/enclaves/historical", wrapper.GetEnclavesHistorical)
	router.DELETE(baseURL+"/enclaves/:enclave_identifier", wrapper.DeleteEnclavesEnclaveIdentifier)
	router.GET(baseURL+"/enclaves/:enclave_identifier", wrapper.GetEnclavesEnclaveIdentifier)
	router.POST(baseURL+"/enclaves/:enclave_identifier/logs", wrapper.PostEnclavesEnclaveIdentifierLogs)
	router.POST(baseURL+"/enclaves/:enclave_identifier/stop", wrapper.PostEnclavesEnclaveIdentifierStop)
	router.GET(baseURL+"/engine/info", wrapper.GetEngineInfo)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYTW/jNhP+KwLf9+jGaXvzLU22WQPpbrBJTosFwYgjmQFFcsmRu0bg/16Q+rT1YdmJ",
	"CxTtzZZmOF/PPDPUK4l1ZrQChY4sXomLV5Cx8PNaAlNfwBmtHPgHxmoDFgWE1xYyvQZOQcWSrYEqlgFl",
	"itM8FzxICIQs/Pi/hYQsyP/mja15aWj+oVD/xDK4UvwpF5xsZwQ3BsiCMGvZhmybB/r5BWL0EtcWGEKp",
	"fWVT1/WQGUFjrZAJBZZKnVIJa5D+VXmcQytU6o/blV2DdUIriiztlW7H3CuQaR5egMozsvhKHj88PJIZ",
	"uf/y+ebp+nH5+RP5NtvXOhjlcC0qf4RK9MSEL71or80qp/fL6yohH7XDP1i8EqrQ6ziQWhNToy1SrehK",
	"O6RZId7KjlAIKVhvQpgRubF89PjW79CzFTwFKgxlnFtwrrdMTcUF7xVo4hLKCQ4V2gfDGhSbENWSg0KR",
	"CLBuuMS+u3pdHcSiW2mLoIAP6Y651Jvc3WZpl/EYBI4BrNORJ57bf5hDhrnrr2Et5cbFfGMGihBF2scc",
	"exQZOGSZaXPHYCFP4Y4zlb/Nyh0UDFo8ws4tYGnKTWc3xrnwuWfyfkduMut1HBl0LS0BOeacl6kmxhFh",
	"/xAOhUqvFP8oHGorYia7RDBsmEm5RxjHzNu26qR5ewv4AHYtYrjTqesfuLFWL7mKUayBJkLiMX7d6fRO",
	"KPg9qHVdmpFES6n/9GO83ZLPWvs1JXRAnhVDXigY6FoLmFtFmZQj57gizNAu1AGOQa6rPQ1ZrVQOV1hp",
	"pInOlffiHV1qIvQ5oM+bneNPbbCyfhNTUEl3Ypbl0xozHXbZxwXW5DqdhUdcKgHYccz/ZqhtP7AQfiA1",
	"DBHsVA54bPudaJsxJAvCGcJPYaZ090O/YZQUiAKlf1cwVHR1vyQzUnMQ+fni8uLSG9EGFDOCLMiv4dGM",
	"GIarENC8pNXwh4MEhCZOodWSkwW5Cc8rig7qlmVQdPZXr+diKwwWZpdJhDaHWVTcDSImZVRZuYhuIGG5",
	"xEi4KGHS+QiF1/qeg92QaoKV9wrfo2RWXkf6YL395tu5aJ0Qwi+XlyUHIaiiQ4yRIg7BzF9cQc7NgWNQ",
	"2b36hMzvRvqQxzE4l+Qyso3YjLg8y5jd1JmL6tT5ZbJo3N0MtyYgOWNEfYP2pLhuAXeCMtr1RHWv3W5Y",
	"33Nw+Jvmm/erUecCGOLxpoQFThYeittzgqT3bnZSUoujqryGl3V7zlf1ehBuWgdA1CwT54bTkQvMyWhr",
	"Tm8BbydDr/WGWNvdTme1js+HaO7paXkzi+q9Oir+axt5Bot0EuEKKt6rSM7TbsNxXX/JPnJ7uK8eBG+l",
	"vv0BfRK9ObR600D2ML39+/I8/TPM24g4qj/mjPfEvFp6D5N2p1h+Vf1nFOz9R03P3edvnjUDV4aTgVMe",
	"FoWqTgCOQ21OBM6DV/2PUQ+WxedpfwPwy/282vmH+bX6SnH2BbLzOeQNzBUuLhX9bf8KAAD//6fYwzqI",
	"GAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
