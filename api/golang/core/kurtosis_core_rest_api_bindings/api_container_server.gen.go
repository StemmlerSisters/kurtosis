// Package kurtosis_core_rest_api_bindings provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package kurtosis_core_rest_api_bindings

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /enclaves/{enclave_identifier}/artifacts)
	GetEnclavesEnclaveIdentifierArtifacts(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (POST /enclaves/{enclave_identifier}/artifacts/local-file)
	PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (POST /enclaves/{enclave_identifier}/artifacts/remote-file)
	PostEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (POST /enclaves/{enclave_identifier}/artifacts/services/{service_identifier})
	PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error

	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier})
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, artifactIdentifier ArtifactIdentifier) error

	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier}/download)
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, artifactIdentifier ArtifactIdentifier) error

	// (GET /enclaves/{enclave_identifier}/services)
	GetEnclavesEnclaveIdentifierServices(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, params GetEnclavesEnclaveIdentifierServicesParams) error

	// (POST /enclaves/{enclave_identifier}/services/connection)
	PostEnclavesEnclaveIdentifierServicesConnection(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (GET /enclaves/{enclave_identifier}/services/history)
	GetEnclavesEnclaveIdentifierServicesHistory(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (GET /enclaves/{enclave_identifier}/services/{service_identifier})
	GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error

	// (POST /enclaves/{enclave_identifier}/services/{service_identifier}/command)
	PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error

	// (GET /enclaves/{enclave_identifier}/services/{service_identifier}/endpoints/{port_number}/availability)
	GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier, portNumber PortNumber, params GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityParams) error

	// (GET /enclaves/{enclave_identifier}/starlark)
	GetEnclavesEnclaveIdentifierStarlark(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (POST /enclaves/{enclave_identifier}/starlark/packages)
	PostEnclavesEnclaveIdentifierStarlarkPackages(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (POST /enclaves/{enclave_identifier}/starlark/packages/{package_id})
	PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, packageId PackageId) error

	// (POST /enclaves/{enclave_identifier}/starlark/scripts)
	PostEnclavesEnclaveIdentifierStarlarkScripts(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetEnclavesEnclaveIdentifierArtifacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierArtifacts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierArtifacts(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierArtifactsLocalFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierArtifactsRemoteFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx, enclaveIdentifier, serviceIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "artifact_identifier" -------------
	var artifactIdentifier ArtifactIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "artifact_identifier", runtime.ParamLocationPath, ctx.Param("artifact_identifier"), &artifactIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artifact_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx, enclaveIdentifier, artifactIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "artifact_identifier" -------------
	var artifactIdentifier ArtifactIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "artifact_identifier", runtime.ParamLocationPath, ctx.Param("artifact_identifier"), &artifactIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artifact_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx, enclaveIdentifier, artifactIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierServices converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServices(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnclavesEnclaveIdentifierServicesParams
	// ------------- Optional query parameter "services" -------------

	err = runtime.BindQueryParameter("form", true, false, "services", ctx.QueryParams(), &params.Services)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter services: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServices(ctx, enclaveIdentifier, params)
	return err
}

// PostEnclavesEnclaveIdentifierServicesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierServicesConnection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierServicesConnection(ctx, enclaveIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierServicesHistory converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServicesHistory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServicesHistory(ctx, enclaveIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx, enclaveIdentifier, serviceIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx, enclaveIdentifier, serviceIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// ------------- Path parameter "port_number" -------------
	var portNumber PortNumber

	err = runtime.BindStyledParameterWithLocation("simple", false, "port_number", runtime.ParamLocationPath, ctx.Param("port_number"), &portNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter port_number: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityParams
	// ------------- Optional query parameter "http_method" -------------

	err = runtime.BindQueryParameter("form", true, false, "http_method", ctx.QueryParams(), &params.HttpMethod)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter http_method: %s", err))
	}

	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "initial_delay_milliseconds" -------------

	err = runtime.BindQueryParameter("form", true, false, "initial_delay_milliseconds", ctx.QueryParams(), &params.InitialDelayMilliseconds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter initial_delay_milliseconds: %s", err))
	}

	// ------------- Optional query parameter "retries" -------------

	err = runtime.BindQueryParameter("form", true, false, "retries", ctx.QueryParams(), &params.Retries)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter retries: %s", err))
	}

	// ------------- Optional query parameter "retries_delay_milliseconds" -------------

	err = runtime.BindQueryParameter("form", true, false, "retries_delay_milliseconds", ctx.QueryParams(), &params.RetriesDelayMilliseconds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter retries_delay_milliseconds: %s", err))
	}

	// ------------- Optional query parameter "expected_response" -------------

	err = runtime.BindQueryParameter("form", true, false, "expected_response", ctx.QueryParams(), &params.ExpectedResponse)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expected_response: %s", err))
	}

	// ------------- Optional query parameter "request_body" -------------

	err = runtime.BindQueryParameter("form", true, false, "request_body", ctx.QueryParams(), &params.RequestBody)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter request_body: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx, enclaveIdentifier, serviceIdentifier, portNumber, params)
	return err
}

// GetEnclavesEnclaveIdentifierStarlark converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierStarlark(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierStarlark(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierStarlarkPackages converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierStarlarkPackages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierStarlarkPackages(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "package_id" -------------
	var packageId PackageId

	err = runtime.BindStyledParameterWithLocation("simple", false, "package_id", runtime.ParamLocationPath, ctx.Param("package_id"), &packageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx, enclaveIdentifier, packageId)
	return err
}

// PostEnclavesEnclaveIdentifierStarlarkScripts converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierStarlarkScripts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierStarlarkScripts(ctx, enclaveIdentifier)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/enclaves/:enclave_identifier/artifacts", wrapper.GetEnclavesEnclaveIdentifierArtifacts)
	router.POST(baseURL+"/enclaves/:enclave_identifier/artifacts/local-file", wrapper.PostEnclavesEnclaveIdentifierArtifactsLocalFile)
	router.POST(baseURL+"/enclaves/:enclave_identifier/artifacts/remote-file", wrapper.PostEnclavesEnclaveIdentifierArtifactsRemoteFile)
	router.POST(baseURL+"/enclaves/:enclave_identifier/artifacts/services/:service_identifier", wrapper.PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier)
	router.GET(baseURL+"/enclaves/:enclave_identifier/artifacts/:artifact_identifier", wrapper.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier)
	router.GET(baseURL+"/enclaves/:enclave_identifier/artifacts/:artifact_identifier/download", wrapper.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services", wrapper.GetEnclavesEnclaveIdentifierServices)
	router.POST(baseURL+"/enclaves/:enclave_identifier/services/connection", wrapper.PostEnclavesEnclaveIdentifierServicesConnection)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services/history", wrapper.GetEnclavesEnclaveIdentifierServicesHistory)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier", wrapper.GetEnclavesEnclaveIdentifierServicesServiceIdentifier)
	router.POST(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier/command", wrapper.PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier/endpoints/:port_number/availability", wrapper.GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability)
	router.GET(baseURL+"/enclaves/:enclave_identifier/starlark", wrapper.GetEnclavesEnclaveIdentifierStarlark)
	router.POST(baseURL+"/enclaves/:enclave_identifier/starlark/packages", wrapper.PostEnclavesEnclaveIdentifierStarlarkPackages)
	router.POST(baseURL+"/enclaves/:enclave_identifier/starlark/packages/:package_id", wrapper.PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId)
	router.POST(baseURL+"/enclaves/:enclave_identifier/starlark/scripts", wrapper.PostEnclavesEnclaveIdentifierStarlarkScripts)

}

type NotOkJSONResponse ResponseInfo

type GetEnclavesEnclaveIdentifierArtifactsRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
}

type GetEnclavesEnclaveIdentifierArtifactsResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierArtifactsResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierArtifacts200JSONResponse []FileArtifactReference

func (response GetEnclavesEnclaveIdentifierArtifacts200JSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierArtifactsdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierArtifactsdefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *multipart.Reader
}

type PostEnclavesEnclaveIdentifierArtifactsLocalFileResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierArtifactsLocalFileResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierArtifactsLocalFile200JSONResponse map[string]FileArtifactReference

func (response PostEnclavesEnclaveIdentifierArtifactsLocalFile200JSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsLocalFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierArtifactsLocalFiledefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierArtifactsLocalFiledefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsLocalFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *PostEnclavesEnclaveIdentifierArtifactsRemoteFileJSONRequestBody
}

type PostEnclavesEnclaveIdentifierArtifactsRemoteFileResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierArtifactsRemoteFileResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierArtifactsRemoteFile200JSONResponse FileArtifactReference

func (response PostEnclavesEnclaveIdentifierArtifactsRemoteFile200JSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsRemoteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierArtifactsRemoteFiledefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierArtifactsRemoteFiledefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsRemoteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier ServiceIdentifier `json:"service_identifier"`
	Body              *PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierJSONRequestBody
}

type PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier200JSONResponse FileArtifactReference

func (response PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier200JSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierdefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject struct {
	EnclaveIdentifier  EnclaveIdentifier  `json:"enclave_identifier"`
	ArtifactIdentifier ArtifactIdentifier `json:"artifact_identifier"`
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier200JSONResponse []FileArtifactDescription

func (response GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier200JSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierdefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject struct {
	EnclaveIdentifier  EnclaveIdentifier  `json:"enclave_identifier"`
	ArtifactIdentifier ArtifactIdentifier `json:"artifact_identifier"`
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload200ApplicationoctetStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload200ApplicationoctetStreamResponse) VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloaddefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloaddefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierServicesRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Params            GetEnclavesEnclaveIdentifierServicesParams
}

type GetEnclavesEnclaveIdentifierServicesResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierServicesResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierServices200JSONResponse map[string]ServiceInfo

func (response GetEnclavesEnclaveIdentifierServices200JSONResponse) VisitGetEnclavesEnclaveIdentifierServicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierServicesdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierServicesdefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierServicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierServicesConnectionRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *PostEnclavesEnclaveIdentifierServicesConnectionJSONRequestBody
}

type PostEnclavesEnclaveIdentifierServicesConnectionResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierServicesConnectionResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierServicesConnection200Response struct {
}

func (response PostEnclavesEnclaveIdentifierServicesConnection200Response) VisitPostEnclavesEnclaveIdentifierServicesConnectionResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostEnclavesEnclaveIdentifierServicesConnectiondefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierServicesConnectiondefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierServicesConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierServicesHistoryRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
}

type GetEnclavesEnclaveIdentifierServicesHistoryResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierServicesHistoryResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierServicesHistory200JSONResponse []ServiceIdentifiers

func (response GetEnclavesEnclaveIdentifierServicesHistory200JSONResponse) VisitGetEnclavesEnclaveIdentifierServicesHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierServicesHistorydefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierServicesHistorydefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierServicesHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier ServiceIdentifier `json:"service_identifier"`
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifier200JSONResponse ServiceInfo

func (response GetEnclavesEnclaveIdentifierServicesServiceIdentifier200JSONResponse) VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierServicesServiceIdentifierdefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier ServiceIdentifier `json:"service_identifier"`
	Body              *PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandJSONRequestBody
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand200JSONResponse ExecCommandResult

func (response PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand200JSONResponse) VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommanddefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommanddefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier ServiceIdentifier `json:"service_identifier"`
	PortNumber        PortNumber        `json:"port_number"`
	Params            GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityParams
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability200Response struct {
}

func (response GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability200Response) VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetEnclavesEnclaveIdentifierStarlarkRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
}

type GetEnclavesEnclaveIdentifierStarlarkResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierStarlarkResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierStarlark200JSONResponse StarlarkDescription

func (response GetEnclavesEnclaveIdentifierStarlark200JSONResponse) VisitGetEnclavesEnclaveIdentifierStarlarkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierStarlarkdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierStarlarkdefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierStarlarkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *multipart.Reader
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierStarlarkPackagesResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierStarlarkPackages200Response struct {
}

func (response PostEnclavesEnclaveIdentifierStarlarkPackages200Response) VisitPostEnclavesEnclaveIdentifierStarlarkPackagesResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierStarlarkPackagesdefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkPackagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	PackageId         PackageId         `json:"package_id"`
	Body              *PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdJSONRequestBody
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId200JSONResponse []StarlarkRunResponseLine

func (response PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId200JSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId200ApplicationoctetStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId200ApplicationoctetStreamResponse) VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIddefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIddefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *PostEnclavesEnclaveIdentifierStarlarkScriptsJSONRequestBody
}

type PostEnclavesEnclaveIdentifierStarlarkScriptsResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierStarlarkScripts200JSONResponse []StarlarkRunResponseLine

func (response PostEnclavesEnclaveIdentifierStarlarkScripts200JSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierStarlarkScripts200ApplicationoctetStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response PostEnclavesEnclaveIdentifierStarlarkScripts200ApplicationoctetStreamResponse) VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PostEnclavesEnclaveIdentifierStarlarkScriptsdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierStarlarkScriptsdefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /enclaves/{enclave_identifier}/artifacts)
	GetEnclavesEnclaveIdentifierArtifacts(ctx context.Context, request GetEnclavesEnclaveIdentifierArtifactsRequestObject) (GetEnclavesEnclaveIdentifierArtifactsResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/artifacts/local-file)
	PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx context.Context, request PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject) (PostEnclavesEnclaveIdentifierArtifactsLocalFileResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/artifacts/remote-file)
	PostEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx context.Context, request PostEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject) (PostEnclavesEnclaveIdentifierArtifactsRemoteFileResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/artifacts/services/{service_identifier})
	PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx context.Context, request PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject) (PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier})
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx context.Context, request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject) (GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier}/download)
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx context.Context, request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject) (GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/services)
	GetEnclavesEnclaveIdentifierServices(ctx context.Context, request GetEnclavesEnclaveIdentifierServicesRequestObject) (GetEnclavesEnclaveIdentifierServicesResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/services/connection)
	PostEnclavesEnclaveIdentifierServicesConnection(ctx context.Context, request PostEnclavesEnclaveIdentifierServicesConnectionRequestObject) (PostEnclavesEnclaveIdentifierServicesConnectionResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/services/history)
	GetEnclavesEnclaveIdentifierServicesHistory(ctx context.Context, request GetEnclavesEnclaveIdentifierServicesHistoryRequestObject) (GetEnclavesEnclaveIdentifierServicesHistoryResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/services/{service_identifier})
	GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx context.Context, request GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject) (GetEnclavesEnclaveIdentifierServicesServiceIdentifierResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/services/{service_identifier}/command)
	PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx context.Context, request PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject) (PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/services/{service_identifier}/endpoints/{port_number}/availability)
	GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx context.Context, request GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject) (GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/starlark)
	GetEnclavesEnclaveIdentifierStarlark(ctx context.Context, request GetEnclavesEnclaveIdentifierStarlarkRequestObject) (GetEnclavesEnclaveIdentifierStarlarkResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/starlark/packages)
	PostEnclavesEnclaveIdentifierStarlarkPackages(ctx context.Context, request PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject) (PostEnclavesEnclaveIdentifierStarlarkPackagesResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/starlark/packages/{package_id})
	PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx context.Context, request PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject) (PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/starlark/scripts)
	PostEnclavesEnclaveIdentifierStarlarkScripts(ctx context.Context, request PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject) (PostEnclavesEnclaveIdentifierStarlarkScriptsResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetEnclavesEnclaveIdentifierArtifacts operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierArtifacts(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request GetEnclavesEnclaveIdentifierArtifactsRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierArtifacts(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierArtifactsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierArtifacts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierArtifactsResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierArtifactsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierArtifactsLocalFile operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierArtifactsLocalFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierArtifactsLocalFileResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierArtifactsLocalFileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierArtifactsRemoteFile operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	var body PostEnclavesEnclaveIdentifierArtifactsRemoteFileJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierArtifactsRemoteFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierArtifactsRemoteFileResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierArtifactsRemoteFileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error {
	var request PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier

	var body PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, artifactIdentifier ArtifactIdentifier) error {
	var request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ArtifactIdentifier = artifactIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, artifactIdentifier ArtifactIdentifier) error {
	var request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ArtifactIdentifier = artifactIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierServices operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierServices(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, params GetEnclavesEnclaveIdentifierServicesParams) error {
	var request GetEnclavesEnclaveIdentifierServicesRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierServices(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierServicesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierServices")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierServicesResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierServicesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierServicesConnection operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierServicesConnection(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierServicesConnectionRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	var body PostEnclavesEnclaveIdentifierServicesConnectionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierServicesConnection(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierServicesConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierServicesConnection")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierServicesConnectionResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierServicesConnectionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierServicesHistory operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierServicesHistory(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request GetEnclavesEnclaveIdentifierServicesHistoryRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierServicesHistory(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierServicesHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierServicesHistory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierServicesHistoryResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierServicesHistoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifier operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error {
	var request GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierServicesServiceIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierServicesServiceIdentifierResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error {
	var request PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier

	var body PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier, portNumber PortNumber, params GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityParams) error {
	var request GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier
	request.PortNumber = portNumber
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierStarlark operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierStarlark(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request GetEnclavesEnclaveIdentifierStarlarkRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierStarlark(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierStarlarkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierStarlark")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierStarlarkResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierStarlarkResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierStarlarkPackages operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierStarlarkPackages(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierStarlarkPackages(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierStarlarkPackages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierStarlarkPackagesResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierStarlarkPackagesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, packageId PackageId) error {
	var request PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.PackageId = packageId

	var body PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierStarlarkScripts operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierStarlarkScripts(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	var body PostEnclavesEnclaveIdentifierStarlarkScriptsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierStarlarkScripts(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierStarlarkScripts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierStarlarkScriptsResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
