// Package api_container_service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package api_container_service

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for ApiContainerApiConnect.
const (
	CONNECT   ApiContainerApiConnect = "CONNECT"
	NOCONNECT ApiContainerApiConnect = "NO_CONNECT"
)

// Defines values for ApiContainerApiContainerStatus.
const (
	ApiContainerApiContainerStatusRUNNING ApiContainerApiContainerStatus = "RUNNING"
	ApiContainerApiContainerStatusSTOPPED ApiContainerApiContainerStatus = "STOPPED"
	ApiContainerApiContainerStatusUNKNOWN ApiContainerApiContainerStatus = "UNKNOWN"
)

// Defines values for ApiContainerApiImageDownloadMode.
const (
	Always  ApiContainerApiImageDownloadMode = "always"
	Missing ApiContainerApiImageDownloadMode = "missing"
)

// Defines values for ApiContainerApiKurtosisFeatureFlag.
const (
	NOINSTRUCTIONSCACHING ApiContainerApiKurtosisFeatureFlag = "NO_INSTRUCTIONS_CACHING"
)

// Defines values for ApiContainerApiPortTransportProtocol.
const (
	SCTP ApiContainerApiPortTransportProtocol = "SCTP"
	TCP  ApiContainerApiPortTransportProtocol = "TCP"
	UDP  ApiContainerApiPortTransportProtocol = "UDP"
)

// Defines values for ApiContainerApiRestartPolicy.
const (
	ALWAYS ApiContainerApiRestartPolicy = "ALWAYS"
	NEVER  ApiContainerApiRestartPolicy = "NEVER"
)

// Defines values for ApiContainerApiServiceStatus.
const (
	ApiContainerApiServiceStatusRUNNING ApiContainerApiServiceStatus = "RUNNING"
	ApiContainerApiServiceStatusSTOPPED ApiContainerApiServiceStatus = "STOPPED"
	ApiContainerApiServiceStatusUNKNOWN ApiContainerApiServiceStatus = "UNKNOWN"
)

// ApiContainerApiConnect 0 - CONNECT // Best effort port forwarding
// 1 - NO_CONNECT // Port forwarding disabled
type ApiContainerApiConnect string

// ApiContainerApiConnectServicesArgs defines model for api_container_api.ConnectServicesArgs.
type ApiContainerApiConnectServicesArgs struct {
	// Connect 0 - CONNECT // Best effort port forwarding
	// 1 - NO_CONNECT // Port forwarding disabled
	Connect *ApiContainerApiConnect `json:"connect,omitempty"`
}

// ApiContainerApiConnectServicesResponse defines model for api_container_api.ConnectServicesResponse.
type ApiContainerApiConnectServicesResponse = map[string]interface{}

// ApiContainerApiContainer defines model for api_container_api.Container.
type ApiContainerApiContainer struct {
	CmdArgs        *[]string          `json:"cmd_args,omitempty"`
	EntrypointArgs *[]string          `json:"entrypoint_args,omitempty"`
	EnvVars        *map[string]string `json:"env_vars,omitempty"`
	ImageName      *string            `json:"image_name,omitempty"`

	// Status 0 - STOPPED
	// 1 - RUNNING
	// 2 - UNKNOWN
	Status *ApiContainerApiContainerStatus `json:"status,omitempty"`
}

// ApiContainerApiContainerStatus 0 - STOPPED
// 1 - RUNNING
// 2 - UNKNOWN
type ApiContainerApiContainerStatus string

// ApiContainerApiDataChunkMetadata defines model for api_container_api.DataChunkMetadata.
type ApiContainerApiDataChunkMetadata struct {
	Name *string `json:"name,omitempty"`
}

// ApiContainerApiDownloadFilesArtifactArgs ==============================================================================================
// Download Files Artifact
// ==============================================================================================
type ApiContainerApiDownloadFilesArtifactArgs struct {
	// Identifier Files identifier to get bytes for
	Identifier *string `json:"identifier,omitempty"`
}

// ApiContainerApiExecCommandArgs ==============================================================================================
// Exec Command
// ==============================================================================================
type ApiContainerApiExecCommandArgs struct {
	CommandArgs *[]string `json:"command_args,omitempty"`

	// ServiceIdentifier The service identifier of the container that the command should be executed in
	ServiceIdentifier *string `json:"service_identifier,omitempty"`
}

// ApiContainerApiExecCommandResponse defines model for api_container_api.ExecCommandResponse.
type ApiContainerApiExecCommandResponse struct {
	ExitCode *int32 `json:"exit_code,omitempty"`

	// LogOutput Assumes UTF-8 encoding
	LogOutput *string `json:"log_output,omitempty"`
}

// ApiContainerApiFileArtifactContentsFileDescription defines model for api_container_api.FileArtifactContentsFileDescription.
type ApiContainerApiFileArtifactContentsFileDescription struct {
	// Path Path relative to the file artifact
	Path *string `json:"path,omitempty"`

	// Size Size of the file, in bytes
	Size *int64 `json:"size,omitempty"`

	// TextPreview A bit of text content, if the file allows (similar to UNIX's 'head')
	TextPreview *string `json:"text_preview,omitempty"`
}

// ApiContainerApiFilesArtifactNameAndUuid defines model for api_container_api.FilesArtifactNameAndUuid.
type ApiContainerApiFilesArtifactNameAndUuid struct {
	// FileName A string representing the name of the file
	FileName *string `json:"fileName,omitempty"`

	// FileUuid A string representing the uuid of the file
	FileUuid *string `json:"fileUuid,omitempty"`
}

// ApiContainerApiGetExistingAndHistoricalServiceIdentifiersResponse defines model for api_container_api.GetExistingAndHistoricalServiceIdentifiersResponse.
type ApiContainerApiGetExistingAndHistoricalServiceIdentifiersResponse struct {
	AllIdentifiers *[]ApiContainerApiServiceIdentifiers `json:"allIdentifiers,omitempty"`
}

// ApiContainerApiGetServicesArgs ==============================================================================================
// Get Services
// ==============================================================================================
type ApiContainerApiGetServicesArgs struct {
	// ServiceIdentifiers "Set" of identifiers to fetch info for
	// If empty, will fetch info for all services
	ServiceIdentifiers *map[string]string `json:"service_identifiers,omitempty"`
}

// ApiContainerApiGetServicesResponse defines model for api_container_api.GetServicesResponse.
type ApiContainerApiGetServicesResponse struct {
	ServiceInfo *ApiContainerApiServiceInfo `json:"service_info,omitempty"`
}

// ApiContainerApiGetStarlarkRunResponse defines model for api_container_api.GetStarlarkRunResponse.
type ApiContainerApiGetStarlarkRunResponse struct {
	ExperimentalFeatures   *[]ApiContainerApiKurtosisFeatureFlag `json:"experimental_features,omitempty"`
	MainFunctionName       *string                               `json:"main_function_name,omitempty"`
	PackageId              *string                               `json:"package_id,omitempty"`
	Parallelism            *int32                                `json:"parallelism,omitempty"`
	RelativePathToMainFile *string                               `json:"relative_path_to_main_file,omitempty"`

	// RestartPolicy 0 - NEVER
	// 1 - ALWAYS
	RestartPolicy    *ApiContainerApiRestartPolicy `json:"restart_policy,omitempty"`
	SerializedParams *string                       `json:"serialized_params,omitempty"`
	SerializedScript *string                       `json:"serialized_script,omitempty"`
}

// ApiContainerApiImageDownloadMode 0 - always
// 1 - missing
type ApiContainerApiImageDownloadMode string

// ApiContainerApiInspectFilesArtifactContentsRequest defines model for api_container_api.InspectFilesArtifactContentsRequest.
type ApiContainerApiInspectFilesArtifactContentsRequest struct {
	FileNamesAndUuid *ApiContainerApiFilesArtifactNameAndUuid `json:"file_names_and_uuid,omitempty"`
}

// ApiContainerApiInspectFilesArtifactContentsResponse defines model for api_container_api.InspectFilesArtifactContentsResponse.
type ApiContainerApiInspectFilesArtifactContentsResponse struct {
	FileDescriptions *[]ApiContainerApiFileArtifactContentsFileDescription `json:"file_descriptions,omitempty"`
}

// ApiContainerApiKurtosisFeatureFlag 0 - NO_INSTRUCTIONS_CACHING
type ApiContainerApiKurtosisFeatureFlag string

// ApiContainerApiListFilesArtifactNamesAndUuidsResponse defines model for api_container_api.ListFilesArtifactNamesAndUuidsResponse.
type ApiContainerApiListFilesArtifactNamesAndUuidsResponse struct {
	FileNamesAndUuids *[]ApiContainerApiFilesArtifactNameAndUuid `json:"file_names_and_uuids,omitempty"`
}

// ApiContainerApiPort ==============================================================================================
// Shared Objects (Used By Multiple Endpoints)
// ==============================================================================================
type ApiContainerApiPort struct {
	MaybeApplicationProtocol *string `json:"maybe_application_protocol,omitempty"`

	// MaybeWaitTimeout The wait timeout duration in string
	MaybeWaitTimeout *string `json:"maybe_wait_timeout,omitempty"`
	Number           *int32  `json:"number,omitempty"`

	// TransportProtocol 0 - TCP
	// 1 - SCTP
	// 2 - UDP
	TransportProtocol *ApiContainerApiPortTransportProtocol `json:"transport_protocol,omitempty"`
}

// ApiContainerApiPortTransportProtocol 0 - TCP
// 1 - SCTP
// 2 - UDP
type ApiContainerApiPortTransportProtocol string

// ApiContainerApiRestartPolicy 0 - NEVER
// 1 - ALWAYS
type ApiContainerApiRestartPolicy string

// ApiContainerApiRunStarlarkPackageArgs defines model for api_container_api.RunStarlarkPackageArgs.
type ApiContainerApiRunStarlarkPackageArgs struct {
	// ClonePackage Whether the package should be cloned or not.
	// If false, then the package will be pulled from the APIC local package store. If it's a local package then is must
	// have been uploaded using UploadStarlarkPackage prior to calling RunStarlarkPackage.
	// If true, then the package will be cloned from GitHub before execution starts
	ClonePackage *bool `json:"clone_package,omitempty"`

	// CloudInstanceId Defaults to empty
	CloudInstanceId *string `json:"cloud_instance_id,omitempty"`

	// CloudUserId Defaults to empty
	CloudUserId *string `json:"cloud_user_id,omitempty"`

	// DryRun Defaults to false
	DryRun               *bool                                 `json:"dry_run,omitempty"`
	ExperimentalFeatures *[]ApiContainerApiKurtosisFeatureFlag `json:"experimental_features,omitempty"`

	// ImageDownloadMode 0 - always
	// 1 - missing
	ImageDownloadMode *ApiContainerApiImageDownloadMode `json:"image_download_mode,omitempty"`

	// Local the payload of the local module
	Local *[]byte `json:"local,omitempty"`

	// MainFunctionName The name of the main function, the default value is "run"
	MainFunctionName *string `json:"main_function_name,omitempty"`
	PackageId        *string `json:"package_id,omitempty"`

	// Parallelism Defaults to 4
	Parallelism *int32 `json:"parallelism,omitempty"`

	// RelativePathToMainFile The relative main file filepath, the default value is the "main.star" file in the root of a package
	RelativePathToMainFile *string `json:"relative_path_to_main_file,omitempty"`

	// Remote just a flag to indicate the module must be cloned inside the API
	Remote *bool `json:"remote,omitempty"`

	// SerializedParams Serialized parameters data for the Starlark package main function
	// This should be a valid JSON string
	SerializedParams *string `json:"serialized_params,omitempty"`
}

// ApiContainerApiRunStarlarkScriptArgs defines model for api_container_api.RunStarlarkScriptArgs.
type ApiContainerApiRunStarlarkScriptArgs struct {
	// CloudInstanceId Defaults to empty
	CloudInstanceId *string `json:"cloud_instance_id,omitempty"`

	// CloudUserId Defaults to empty
	CloudUserId *string `json:"cloud_user_id,omitempty"`

	// DryRun Defaults to false
	DryRun               *bool                                 `json:"dry_run,omitempty"`
	ExperimentalFeatures *[]ApiContainerApiKurtosisFeatureFlag `json:"experimental_features,omitempty"`

	// ImageDownloadMode 0 - always
	// 1 - missing
	ImageDownloadMode *ApiContainerApiImageDownloadMode `json:"image_download_mode,omitempty"`

	// MainFunctionName The name of the main function, the default value is "run"
	MainFunctionName *string `json:"main_function_name,omitempty"`

	// Parallelism Defaults to 4
	Parallelism      *int32  `json:"parallelism,omitempty"`
	SerializedParams *string `json:"serialized_params,omitempty"`
	SerializedScript *string `json:"serialized_script,omitempty"`
}

// ApiContainerApiServiceIdentifiers An service identifier is a collection of uuid, name and shortened uuid
type ApiContainerApiServiceIdentifiers struct {
	// Name Name of the service
	Name *string `json:"name,omitempty"`

	// ServiceUuid UUID of the service
	ServiceUuid *string `json:"service_uuid,omitempty"`

	// ShortenedUuid The shortened uuid of the service
	ShortenedUuid *string `json:"shortened_uuid,omitempty"`
}

// ApiContainerApiServiceInfo defines model for api_container_api.ServiceInfo.
type ApiContainerApiServiceInfo struct {
	Container *ApiContainerApiContainer `json:"container,omitempty"`

	// MaybePublicIpAddr Public IP address *outside* the enclave where the service is reachable
	// NOTE: Will be empty if the service isn't running, the service didn't define any ports, or the backend doesn't support reporting public service info
	MaybePublicIpAddr *string `json:"maybe_public_ip_addr,omitempty"`

	// MaybePublicPorts ==============================================================================================
	// Shared Objects (Used By Multiple Endpoints)
	// ==============================================================================================
	MaybePublicPorts *ApiContainerApiPort `json:"maybe_public_ports,omitempty"`

	// Name Name of the service
	Name *string `json:"name,omitempty"`

	// PrivateIpAddr The IP address of the service inside the enclave
	PrivateIpAddr *string `json:"private_ip_addr,omitempty"`

	// PrivatePorts ==============================================================================================
	// Shared Objects (Used By Multiple Endpoints)
	// ==============================================================================================
	PrivatePorts *ApiContainerApiPort `json:"private_ports,omitempty"`

	// ServiceStatus 0 - STOPPED
	// 1 - RUNNING
	// 2 - UNKNOWN
	ServiceStatus *ApiContainerApiServiceStatus `json:"service_status,omitempty"`

	// ServiceUuid UUID of the service
	ServiceUuid *string `json:"service_uuid,omitempty"`

	// ShortenedUuid Shortened uuid of the service
	ShortenedUuid *string `json:"shortened_uuid,omitempty"`
}

// ApiContainerApiServiceStatus 0 - STOPPED
// 1 - RUNNING
// 2 - UNKNOWN
type ApiContainerApiServiceStatus string

// ApiContainerApiStarlarkError defines model for api_container_api.StarlarkError.
type ApiContainerApiStarlarkError struct {
	ExecutionError      *ApiContainerApiStarlarkExecutionError      `json:"execution_error,omitempty"`
	InterpretationError *ApiContainerApiStarlarkInterpretationError `json:"interpretation_error,omitempty"`
	ValidationError     *ApiContainerApiStarlarkValidationError     `json:"validation_error,omitempty"`
}

// ApiContainerApiStarlarkExecutionError defines model for api_container_api.StarlarkExecutionError.
type ApiContainerApiStarlarkExecutionError struct {
	ErrorMessage *string `json:"error_message,omitempty"`
}

// ApiContainerApiStarlarkInfo defines model for api_container_api.StarlarkInfo.
type ApiContainerApiStarlarkInfo struct {
	InfoMessage *string `json:"info_message,omitempty"`
}

// ApiContainerApiStarlarkInstruction defines model for api_container_api.StarlarkInstruction.
type ApiContainerApiStarlarkInstruction struct {
	Arguments             *[]ApiContainerApiStarlarkInstructionArg    `json:"arguments,omitempty"`
	ExecutableInstruction *string                                     `json:"executable_instruction,omitempty"`
	InstructionName       *string                                     `json:"instruction_name,omitempty"`
	IsSkipped             *bool                                       `json:"is_skipped,omitempty"`
	Position              *ApiContainerApiStarlarkInstructionPosition `json:"position,omitempty"`
}

// ApiContainerApiStarlarkInstructionArg defines model for api_container_api.StarlarkInstructionArg.
type ApiContainerApiStarlarkInstructionArg struct {
	ArgName            *string `json:"arg_name,omitempty"`
	IsRepresentative   *bool   `json:"is_representative,omitempty"`
	SerializedArgValue *string `json:"serialized_arg_value,omitempty"`
}

// ApiContainerApiStarlarkInstructionPosition defines model for api_container_api.StarlarkInstructionPosition.
type ApiContainerApiStarlarkInstructionPosition struct {
	Column   *int32  `json:"column,omitempty"`
	Filename *string `json:"filename,omitempty"`
	Line     *int32  `json:"line,omitempty"`
}

// ApiContainerApiStarlarkInstructionResult defines model for api_container_api.StarlarkInstructionResult.
type ApiContainerApiStarlarkInstructionResult struct {
	SerializedInstructionResult *string `json:"serialized_instruction_result,omitempty"`
}

// ApiContainerApiStarlarkInterpretationError defines model for api_container_api.StarlarkInterpretationError.
type ApiContainerApiStarlarkInterpretationError struct {
	ErrorMessage *string `json:"error_message,omitempty"`
}

// ApiContainerApiStarlarkRunFinishedEvent defines model for api_container_api.StarlarkRunFinishedEvent.
type ApiContainerApiStarlarkRunFinishedEvent struct {
	IsRunSuccessful  *bool   `json:"is_run_successful,omitempty"`
	SerializedOutput *string `json:"serialized_output,omitempty"`
}

// ApiContainerApiStarlarkRunProgress defines model for api_container_api.StarlarkRunProgress.
type ApiContainerApiStarlarkRunProgress struct {
	CurrentStepInfo   *[]string `json:"current_step_info,omitempty"`
	CurrentStepNumber *int32    `json:"current_step_number,omitempty"`
	TotalSteps        *int32    `json:"total_steps,omitempty"`
}

// ApiContainerApiStarlarkRunResponseLine ==============================================================================================
// Starlark Execution Response
// ==============================================================================================
type ApiContainerApiStarlarkRunResponseLine struct {
	Error             *ApiContainerApiStarlarkError             `json:"error,omitempty"`
	Info              *ApiContainerApiStarlarkInfo              `json:"info,omitempty"`
	Instruction       *ApiContainerApiStarlarkInstruction       `json:"instruction,omitempty"`
	InstructionResult *ApiContainerApiStarlarkInstructionResult `json:"instruction_result,omitempty"`
	ProgressInfo      *ApiContainerApiStarlarkRunProgress       `json:"progress_info,omitempty"`
	RunFinishedEvent  *ApiContainerApiStarlarkRunFinishedEvent  `json:"run_finished_event,omitempty"`
	Warning           *ApiContainerApiStarlarkWarning           `json:"warning,omitempty"`
}

// ApiContainerApiStarlarkValidationError defines model for api_container_api.StarlarkValidationError.
type ApiContainerApiStarlarkValidationError struct {
	ErrorMessage *string `json:"error_message,omitempty"`
}

// ApiContainerApiStarlarkWarning defines model for api_container_api.StarlarkWarning.
type ApiContainerApiStarlarkWarning struct {
	WarningMessage *string `json:"warning_message,omitempty"`
}

// ApiContainerApiStoreFilesArtifactFromServiceArgs defines model for api_container_api.StoreFilesArtifactFromServiceArgs.
type ApiContainerApiStoreFilesArtifactFromServiceArgs struct {
	// Name The name of the files artifact
	Name *string `json:"name,omitempty"`

	// ServiceIdentifier Identifier that will be used to identify the service where the source files will be copied from
	ServiceIdentifier *string `json:"service_identifier,omitempty"`

	// SourcePath The absolute source path where the source files will be copied from
	SourcePath *string `json:"source_path,omitempty"`
}

// ApiContainerApiStoreFilesArtifactFromServiceResponse defines model for api_container_api.StoreFilesArtifactFromServiceResponse.
type ApiContainerApiStoreFilesArtifactFromServiceResponse struct {
	// Uuid UUID of the files artifact, for use when referencing it in the future
	Uuid *string `json:"uuid,omitempty"`
}

// ApiContainerApiStoreWebFilesArtifactArgs ==============================================================================================
// Store Web Files Artifact
// ==============================================================================================
type ApiContainerApiStoreWebFilesArtifactArgs struct {
	// Name The name of the files artifact
	Name *string `json:"name,omitempty"`

	// Url URL to download the artifact from
	Url *string `json:"url,omitempty"`
}

// ApiContainerApiStoreWebFilesArtifactResponse defines model for api_container_api.StoreWebFilesArtifactResponse.
type ApiContainerApiStoreWebFilesArtifactResponse struct {
	// Uuid UUID of the files artifact, for use when referencing it in the future
	Uuid *string `json:"uuid,omitempty"`
}

// ApiContainerApiStreamedDataChunk ==============================================================================================
// Streamed Data Chunk
// ==============================================================================================
type ApiContainerApiStreamedDataChunk struct {
	// Data Chunk of the overall files artifact bytes
	Data     *[]byte                           `json:"data,omitempty"`
	Metadata *ApiContainerApiDataChunkMetadata `json:"metadata,omitempty"`

	// PreviousChunkHash Hash of the PREVIOUS chunk, or empty string is this is the first chunk
	// Referencing the previous chunk via its hash allows Kurtosis to validate
	// the consistency of the data in case some chunk were not received
	PreviousChunkHash *string `json:"previous_chunk_hash,omitempty"`
}

// ApiContainerApiUploadFilesArtifactResponse ==============================================================================================
// Upload Files Artifact
// ==============================================================================================
type ApiContainerApiUploadFilesArtifactResponse struct {
	// Name UUID of the files artifact, for use when referencing it in the future
	Name *string `json:"name,omitempty"`

	// Uuid UUID of the files artifact, for use when referencing it in the future
	Uuid *string `json:"uuid,omitempty"`
}

// ApiContainerApiWaitForHttpGetEndpointAvailabilityArgs ==============================================================================================
// Wait For HTTP Get Endpoint Availability
// ==============================================================================================
type ApiContainerApiWaitForHttpGetEndpointAvailabilityArgs struct {
	// BodyText If the endpoint returns this value, the service will be marked as available (e.g. Hello World).
	BodyText *string `json:"body_text,omitempty"`

	// InitialDelayMilliseconds The number of milliseconds to wait until executing the first HTTP call
	InitialDelayMilliseconds *int32 `json:"initial_delay_milliseconds,omitempty"`

	// Path The path of the service to check. It mustn't start with the first slash. For instance `service/health`
	Path *string `json:"path,omitempty"`

	// Port The port of the service to check. For instance 8080
	Port *int32 `json:"port,omitempty"`

	// Retries Max number of HTTP call attempts that this will execute until giving up and returning an error
	Retries *int32 `json:"retries,omitempty"`

	// RetriesDelayMilliseconds Number of milliseconds to wait between retries
	RetriesDelayMilliseconds *int32 `json:"retries_delay_milliseconds,omitempty"`

	// ServiceIdentifier The identifier of the service to check.
	ServiceIdentifier *string `json:"service_identifier,omitempty"`
}

// ApiContainerApiWaitForHttpPostEndpointAvailabilityArgs ==============================================================================================
// Wait For HTTP Post Endpoint Availability
// ==============================================================================================
type ApiContainerApiWaitForHttpPostEndpointAvailabilityArgs struct {
	// BodyText If the endpoint returns this value, the service will be marked as available (e.g. Hello World).
	BodyText *string `json:"body_text,omitempty"`

	// InitialDelayMilliseconds The number of milliseconds to wait until executing the first HTTP call
	InitialDelayMilliseconds *int32 `json:"initial_delay_milliseconds,omitempty"`

	// Path The path of the service to check. It mustn't start with the first slash. For instance `service/health`
	Path *string `json:"path,omitempty"`

	// Port The port of the service to check. For instance 8080
	Port *int32 `json:"port,omitempty"`

	// RequestBody The content of the request body.
	RequestBody *string `json:"request_body,omitempty"`

	// Retries Max number of HTTP call attempts that this will execute until giving up and returning an error
	Retries *int32 `json:"retries,omitempty"`

	// RetriesDelayMilliseconds Number of milliseconds to wait between retries
	RetriesDelayMilliseconds *int32 `json:"retries_delay_milliseconds,omitempty"`

	// ServiceIdentifier The identifier of the service to check.
	ServiceIdentifier *string `json:"service_identifier,omitempty"`
}

// GoogleProtobufEmpty defines model for google.protobuf.Empty.
type GoogleProtobufEmpty = map[string]interface{}

// ApiContainerApiApiContainerServiceConnectServicesJSONRequestBody defines body for ApiContainerApiApiContainerServiceConnectServices for application/json ContentType.
type ApiContainerApiApiContainerServiceConnectServicesJSONRequestBody = ApiContainerApiConnectServicesArgs

// ApiContainerApiApiContainerServiceDownloadFilesArtifactJSONRequestBody defines body for ApiContainerApiApiContainerServiceDownloadFilesArtifact for application/json ContentType.
type ApiContainerApiApiContainerServiceDownloadFilesArtifactJSONRequestBody = ApiContainerApiDownloadFilesArtifactArgs

// ApiContainerApiApiContainerServiceExecCommandJSONRequestBody defines body for ApiContainerApiApiContainerServiceExecCommand for application/json ContentType.
type ApiContainerApiApiContainerServiceExecCommandJSONRequestBody = ApiContainerApiExecCommandArgs

// ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersJSONRequestBody defines body for ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiers for application/json ContentType.
type ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersJSONRequestBody = GoogleProtobufEmpty

// ApiContainerApiApiContainerServiceGetServicesJSONRequestBody defines body for ApiContainerApiApiContainerServiceGetServices for application/json ContentType.
type ApiContainerApiApiContainerServiceGetServicesJSONRequestBody = ApiContainerApiGetServicesArgs

// ApiContainerApiApiContainerServiceGetStarlarkRunJSONRequestBody defines body for ApiContainerApiApiContainerServiceGetStarlarkRun for application/json ContentType.
type ApiContainerApiApiContainerServiceGetStarlarkRunJSONRequestBody = GoogleProtobufEmpty

// ApiContainerApiApiContainerServiceInspectFilesArtifactContentsJSONRequestBody defines body for ApiContainerApiApiContainerServiceInspectFilesArtifactContents for application/json ContentType.
type ApiContainerApiApiContainerServiceInspectFilesArtifactContentsJSONRequestBody = ApiContainerApiInspectFilesArtifactContentsRequest

// ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsJSONRequestBody defines body for ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuids for application/json ContentType.
type ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsJSONRequestBody = GoogleProtobufEmpty

// ApiContainerApiApiContainerServiceRunStarlarkPackageJSONRequestBody defines body for ApiContainerApiApiContainerServiceRunStarlarkPackage for application/json ContentType.
type ApiContainerApiApiContainerServiceRunStarlarkPackageJSONRequestBody = ApiContainerApiRunStarlarkPackageArgs

// ApiContainerApiApiContainerServiceRunStarlarkScriptJSONRequestBody defines body for ApiContainerApiApiContainerServiceRunStarlarkScript for application/json ContentType.
type ApiContainerApiApiContainerServiceRunStarlarkScriptJSONRequestBody = ApiContainerApiRunStarlarkScriptArgs

// ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceJSONRequestBody defines body for ApiContainerApiApiContainerServiceStoreFilesArtifactFromService for application/json ContentType.
type ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceJSONRequestBody = ApiContainerApiStoreFilesArtifactFromServiceArgs

// ApiContainerApiApiContainerServiceStoreWebFilesArtifactJSONRequestBody defines body for ApiContainerApiApiContainerServiceStoreWebFilesArtifact for application/json ContentType.
type ApiContainerApiApiContainerServiceStoreWebFilesArtifactJSONRequestBody = ApiContainerApiStoreWebFilesArtifactArgs

// ApiContainerApiApiContainerServiceUploadFilesArtifactJSONRequestBody defines body for ApiContainerApiApiContainerServiceUploadFilesArtifact for application/json ContentType.
type ApiContainerApiApiContainerServiceUploadFilesArtifactJSONRequestBody = ApiContainerApiStreamedDataChunk

// ApiContainerApiApiContainerServiceUploadStarlarkPackageJSONRequestBody defines body for ApiContainerApiApiContainerServiceUploadStarlarkPackage for application/json ContentType.
type ApiContainerApiApiContainerServiceUploadStarlarkPackageJSONRequestBody = ApiContainerApiStreamedDataChunk

// ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityJSONRequestBody defines body for ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailability for application/json ContentType.
type ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityJSONRequestBody = ApiContainerApiWaitForHttpGetEndpointAvailabilityArgs

// ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityJSONRequestBody defines body for ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailability for application/json ContentType.
type ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityJSONRequestBody = ApiContainerApiWaitForHttpPostEndpointAvailabilityArgs

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ApiContainerApiApiContainerServiceConnectServicesWithBody request with any body
	ApiContainerApiApiContainerServiceConnectServicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiContainerApiApiContainerServiceConnectServices(ctx context.Context, body ApiContainerApiApiContainerServiceConnectServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiContainerApiApiContainerServiceDownloadFilesArtifactWithBody request with any body
	ApiContainerApiApiContainerServiceDownloadFilesArtifactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiContainerApiApiContainerServiceDownloadFilesArtifact(ctx context.Context, body ApiContainerApiApiContainerServiceDownloadFilesArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiContainerApiApiContainerServiceExecCommandWithBody request with any body
	ApiContainerApiApiContainerServiceExecCommandWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiContainerApiApiContainerServiceExecCommand(ctx context.Context, body ApiContainerApiApiContainerServiceExecCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersWithBody request with any body
	ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiers(ctx context.Context, body ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiContainerApiApiContainerServiceGetServicesWithBody request with any body
	ApiContainerApiApiContainerServiceGetServicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiContainerApiApiContainerServiceGetServices(ctx context.Context, body ApiContainerApiApiContainerServiceGetServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiContainerApiApiContainerServiceGetStarlarkRunWithBody request with any body
	ApiContainerApiApiContainerServiceGetStarlarkRunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiContainerApiApiContainerServiceGetStarlarkRun(ctx context.Context, body ApiContainerApiApiContainerServiceGetStarlarkRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiContainerApiApiContainerServiceInspectFilesArtifactContentsWithBody request with any body
	ApiContainerApiApiContainerServiceInspectFilesArtifactContentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiContainerApiApiContainerServiceInspectFilesArtifactContents(ctx context.Context, body ApiContainerApiApiContainerServiceInspectFilesArtifactContentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsWithBody request with any body
	ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuids(ctx context.Context, body ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiContainerApiApiContainerServiceRunStarlarkPackageWithBody request with any body
	ApiContainerApiApiContainerServiceRunStarlarkPackageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiContainerApiApiContainerServiceRunStarlarkPackage(ctx context.Context, body ApiContainerApiApiContainerServiceRunStarlarkPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiContainerApiApiContainerServiceRunStarlarkScriptWithBody request with any body
	ApiContainerApiApiContainerServiceRunStarlarkScriptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiContainerApiApiContainerServiceRunStarlarkScript(ctx context.Context, body ApiContainerApiApiContainerServiceRunStarlarkScriptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceWithBody request with any body
	ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiContainerApiApiContainerServiceStoreFilesArtifactFromService(ctx context.Context, body ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiContainerApiApiContainerServiceStoreWebFilesArtifactWithBody request with any body
	ApiContainerApiApiContainerServiceStoreWebFilesArtifactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiContainerApiApiContainerServiceStoreWebFilesArtifact(ctx context.Context, body ApiContainerApiApiContainerServiceStoreWebFilesArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiContainerApiApiContainerServiceUploadFilesArtifactWithBody request with any body
	ApiContainerApiApiContainerServiceUploadFilesArtifactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiContainerApiApiContainerServiceUploadFilesArtifact(ctx context.Context, body ApiContainerApiApiContainerServiceUploadFilesArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiContainerApiApiContainerServiceUploadStarlarkPackageWithBody request with any body
	ApiContainerApiApiContainerServiceUploadStarlarkPackageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiContainerApiApiContainerServiceUploadStarlarkPackage(ctx context.Context, body ApiContainerApiApiContainerServiceUploadStarlarkPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityWithBody request with any body
	ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailability(ctx context.Context, body ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityWithBody request with any body
	ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailability(ctx context.Context, body ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ApiContainerApiApiContainerServiceConnectServicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceConnectServicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceConnectServices(ctx context.Context, body ApiContainerApiApiContainerServiceConnectServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceConnectServicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceDownloadFilesArtifactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceDownloadFilesArtifactRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceDownloadFilesArtifact(ctx context.Context, body ApiContainerApiApiContainerServiceDownloadFilesArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceDownloadFilesArtifactRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceExecCommandWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceExecCommandRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceExecCommand(ctx context.Context, body ApiContainerApiApiContainerServiceExecCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceExecCommandRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiers(ctx context.Context, body ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceGetServicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceGetServicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceGetServices(ctx context.Context, body ApiContainerApiApiContainerServiceGetServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceGetServicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceGetStarlarkRunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceGetStarlarkRunRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceGetStarlarkRun(ctx context.Context, body ApiContainerApiApiContainerServiceGetStarlarkRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceGetStarlarkRunRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceInspectFilesArtifactContentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceInspectFilesArtifactContentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceInspectFilesArtifactContents(ctx context.Context, body ApiContainerApiApiContainerServiceInspectFilesArtifactContentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceInspectFilesArtifactContentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuids(ctx context.Context, body ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceRunStarlarkPackageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceRunStarlarkPackageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceRunStarlarkPackage(ctx context.Context, body ApiContainerApiApiContainerServiceRunStarlarkPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceRunStarlarkPackageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceRunStarlarkScriptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceRunStarlarkScriptRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceRunStarlarkScript(ctx context.Context, body ApiContainerApiApiContainerServiceRunStarlarkScriptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceRunStarlarkScriptRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceStoreFilesArtifactFromService(ctx context.Context, body ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceStoreWebFilesArtifactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceStoreWebFilesArtifactRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceStoreWebFilesArtifact(ctx context.Context, body ApiContainerApiApiContainerServiceStoreWebFilesArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceStoreWebFilesArtifactRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceUploadFilesArtifactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceUploadFilesArtifactRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceUploadFilesArtifact(ctx context.Context, body ApiContainerApiApiContainerServiceUploadFilesArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceUploadFilesArtifactRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceUploadStarlarkPackageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceUploadStarlarkPackageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceUploadStarlarkPackage(ctx context.Context, body ApiContainerApiApiContainerServiceUploadStarlarkPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceUploadStarlarkPackageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailability(ctx context.Context, body ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailability(ctx context.Context, body ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewApiContainerApiApiContainerServiceConnectServicesRequest calls the generic ApiContainerApiApiContainerServiceConnectServices builder with application/json body
func NewApiContainerApiApiContainerServiceConnectServicesRequest(server string, body ApiContainerApiApiContainerServiceConnectServicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiContainerApiApiContainerServiceConnectServicesRequestWithBody(server, "application/json", bodyReader)
}

// NewApiContainerApiApiContainerServiceConnectServicesRequestWithBody generates requests for ApiContainerApiApiContainerServiceConnectServices with any type of body
func NewApiContainerApiApiContainerServiceConnectServicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_container_api.ApiContainerService/ConnectServices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiContainerApiApiContainerServiceDownloadFilesArtifactRequest calls the generic ApiContainerApiApiContainerServiceDownloadFilesArtifact builder with application/json body
func NewApiContainerApiApiContainerServiceDownloadFilesArtifactRequest(server string, body ApiContainerApiApiContainerServiceDownloadFilesArtifactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiContainerApiApiContainerServiceDownloadFilesArtifactRequestWithBody(server, "application/json", bodyReader)
}

// NewApiContainerApiApiContainerServiceDownloadFilesArtifactRequestWithBody generates requests for ApiContainerApiApiContainerServiceDownloadFilesArtifact with any type of body
func NewApiContainerApiApiContainerServiceDownloadFilesArtifactRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_container_api.ApiContainerService/DownloadFilesArtifact")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiContainerApiApiContainerServiceExecCommandRequest calls the generic ApiContainerApiApiContainerServiceExecCommand builder with application/json body
func NewApiContainerApiApiContainerServiceExecCommandRequest(server string, body ApiContainerApiApiContainerServiceExecCommandJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiContainerApiApiContainerServiceExecCommandRequestWithBody(server, "application/json", bodyReader)
}

// NewApiContainerApiApiContainerServiceExecCommandRequestWithBody generates requests for ApiContainerApiApiContainerServiceExecCommand with any type of body
func NewApiContainerApiApiContainerServiceExecCommandRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_container_api.ApiContainerService/ExecCommand")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersRequest calls the generic ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiers builder with application/json body
func NewApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersRequest(server string, body ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersRequestWithBody(server, "application/json", bodyReader)
}

// NewApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersRequestWithBody generates requests for ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiers with any type of body
func NewApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_container_api.ApiContainerService/GetExistingAndHistoricalServiceIdentifiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiContainerApiApiContainerServiceGetServicesRequest calls the generic ApiContainerApiApiContainerServiceGetServices builder with application/json body
func NewApiContainerApiApiContainerServiceGetServicesRequest(server string, body ApiContainerApiApiContainerServiceGetServicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiContainerApiApiContainerServiceGetServicesRequestWithBody(server, "application/json", bodyReader)
}

// NewApiContainerApiApiContainerServiceGetServicesRequestWithBody generates requests for ApiContainerApiApiContainerServiceGetServices with any type of body
func NewApiContainerApiApiContainerServiceGetServicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_container_api.ApiContainerService/GetServices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiContainerApiApiContainerServiceGetStarlarkRunRequest calls the generic ApiContainerApiApiContainerServiceGetStarlarkRun builder with application/json body
func NewApiContainerApiApiContainerServiceGetStarlarkRunRequest(server string, body ApiContainerApiApiContainerServiceGetStarlarkRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiContainerApiApiContainerServiceGetStarlarkRunRequestWithBody(server, "application/json", bodyReader)
}

// NewApiContainerApiApiContainerServiceGetStarlarkRunRequestWithBody generates requests for ApiContainerApiApiContainerServiceGetStarlarkRun with any type of body
func NewApiContainerApiApiContainerServiceGetStarlarkRunRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_container_api.ApiContainerService/GetStarlarkRun")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiContainerApiApiContainerServiceInspectFilesArtifactContentsRequest calls the generic ApiContainerApiApiContainerServiceInspectFilesArtifactContents builder with application/json body
func NewApiContainerApiApiContainerServiceInspectFilesArtifactContentsRequest(server string, body ApiContainerApiApiContainerServiceInspectFilesArtifactContentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiContainerApiApiContainerServiceInspectFilesArtifactContentsRequestWithBody(server, "application/json", bodyReader)
}

// NewApiContainerApiApiContainerServiceInspectFilesArtifactContentsRequestWithBody generates requests for ApiContainerApiApiContainerServiceInspectFilesArtifactContents with any type of body
func NewApiContainerApiApiContainerServiceInspectFilesArtifactContentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_container_api.ApiContainerService/InspectFilesArtifactContents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsRequest calls the generic ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuids builder with application/json body
func NewApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsRequest(server string, body ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsRequestWithBody(server, "application/json", bodyReader)
}

// NewApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsRequestWithBody generates requests for ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuids with any type of body
func NewApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_container_api.ApiContainerService/ListFilesArtifactNamesAndUuids")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiContainerApiApiContainerServiceRunStarlarkPackageRequest calls the generic ApiContainerApiApiContainerServiceRunStarlarkPackage builder with application/json body
func NewApiContainerApiApiContainerServiceRunStarlarkPackageRequest(server string, body ApiContainerApiApiContainerServiceRunStarlarkPackageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiContainerApiApiContainerServiceRunStarlarkPackageRequestWithBody(server, "application/json", bodyReader)
}

// NewApiContainerApiApiContainerServiceRunStarlarkPackageRequestWithBody generates requests for ApiContainerApiApiContainerServiceRunStarlarkPackage with any type of body
func NewApiContainerApiApiContainerServiceRunStarlarkPackageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_container_api.ApiContainerService/RunStarlarkPackage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiContainerApiApiContainerServiceRunStarlarkScriptRequest calls the generic ApiContainerApiApiContainerServiceRunStarlarkScript builder with application/json body
func NewApiContainerApiApiContainerServiceRunStarlarkScriptRequest(server string, body ApiContainerApiApiContainerServiceRunStarlarkScriptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiContainerApiApiContainerServiceRunStarlarkScriptRequestWithBody(server, "application/json", bodyReader)
}

// NewApiContainerApiApiContainerServiceRunStarlarkScriptRequestWithBody generates requests for ApiContainerApiApiContainerServiceRunStarlarkScript with any type of body
func NewApiContainerApiApiContainerServiceRunStarlarkScriptRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_container_api.ApiContainerService/RunStarlarkScript")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceRequest calls the generic ApiContainerApiApiContainerServiceStoreFilesArtifactFromService builder with application/json body
func NewApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceRequest(server string, body ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceRequestWithBody(server, "application/json", bodyReader)
}

// NewApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceRequestWithBody generates requests for ApiContainerApiApiContainerServiceStoreFilesArtifactFromService with any type of body
func NewApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_container_api.ApiContainerService/StoreFilesArtifactFromService")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiContainerApiApiContainerServiceStoreWebFilesArtifactRequest calls the generic ApiContainerApiApiContainerServiceStoreWebFilesArtifact builder with application/json body
func NewApiContainerApiApiContainerServiceStoreWebFilesArtifactRequest(server string, body ApiContainerApiApiContainerServiceStoreWebFilesArtifactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiContainerApiApiContainerServiceStoreWebFilesArtifactRequestWithBody(server, "application/json", bodyReader)
}

// NewApiContainerApiApiContainerServiceStoreWebFilesArtifactRequestWithBody generates requests for ApiContainerApiApiContainerServiceStoreWebFilesArtifact with any type of body
func NewApiContainerApiApiContainerServiceStoreWebFilesArtifactRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_container_api.ApiContainerService/StoreWebFilesArtifact")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiContainerApiApiContainerServiceUploadFilesArtifactRequest calls the generic ApiContainerApiApiContainerServiceUploadFilesArtifact builder with application/json body
func NewApiContainerApiApiContainerServiceUploadFilesArtifactRequest(server string, body ApiContainerApiApiContainerServiceUploadFilesArtifactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiContainerApiApiContainerServiceUploadFilesArtifactRequestWithBody(server, "application/json", bodyReader)
}

// NewApiContainerApiApiContainerServiceUploadFilesArtifactRequestWithBody generates requests for ApiContainerApiApiContainerServiceUploadFilesArtifact with any type of body
func NewApiContainerApiApiContainerServiceUploadFilesArtifactRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_container_api.ApiContainerService/UploadFilesArtifact")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiContainerApiApiContainerServiceUploadStarlarkPackageRequest calls the generic ApiContainerApiApiContainerServiceUploadStarlarkPackage builder with application/json body
func NewApiContainerApiApiContainerServiceUploadStarlarkPackageRequest(server string, body ApiContainerApiApiContainerServiceUploadStarlarkPackageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiContainerApiApiContainerServiceUploadStarlarkPackageRequestWithBody(server, "application/json", bodyReader)
}

// NewApiContainerApiApiContainerServiceUploadStarlarkPackageRequestWithBody generates requests for ApiContainerApiApiContainerServiceUploadStarlarkPackage with any type of body
func NewApiContainerApiApiContainerServiceUploadStarlarkPackageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_container_api.ApiContainerService/UploadStarlarkPackage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityRequest calls the generic ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailability builder with application/json body
func NewApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityRequest(server string, body ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityRequestWithBody(server, "application/json", bodyReader)
}

// NewApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityRequestWithBody generates requests for ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailability with any type of body
func NewApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_container_api.ApiContainerService/WaitForHttpGetEndpointAvailability")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityRequest calls the generic ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailability builder with application/json body
func NewApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityRequest(server string, body ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityRequestWithBody(server, "application/json", bodyReader)
}

// NewApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityRequestWithBody generates requests for ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailability with any type of body
func NewApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_container_api.ApiContainerService/WaitForHttpPostEndpointAvailability")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ApiContainerApiApiContainerServiceConnectServicesWithBodyWithResponse request with any body
	ApiContainerApiApiContainerServiceConnectServicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceConnectServicesResponse, error)

	ApiContainerApiApiContainerServiceConnectServicesWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceConnectServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceConnectServicesResponse, error)

	// ApiContainerApiApiContainerServiceDownloadFilesArtifactWithBodyWithResponse request with any body
	ApiContainerApiApiContainerServiceDownloadFilesArtifactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceDownloadFilesArtifactResponse, error)

	ApiContainerApiApiContainerServiceDownloadFilesArtifactWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceDownloadFilesArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceDownloadFilesArtifactResponse, error)

	// ApiContainerApiApiContainerServiceExecCommandWithBodyWithResponse request with any body
	ApiContainerApiApiContainerServiceExecCommandWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceExecCommandResponse, error)

	ApiContainerApiApiContainerServiceExecCommandWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceExecCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceExecCommandResponse, error)

	// ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersWithBodyWithResponse request with any body
	ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersResponse, error)

	ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersResponse, error)

	// ApiContainerApiApiContainerServiceGetServicesWithBodyWithResponse request with any body
	ApiContainerApiApiContainerServiceGetServicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceGetServicesResponse, error)

	ApiContainerApiApiContainerServiceGetServicesWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceGetServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceGetServicesResponse, error)

	// ApiContainerApiApiContainerServiceGetStarlarkRunWithBodyWithResponse request with any body
	ApiContainerApiApiContainerServiceGetStarlarkRunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceGetStarlarkRunResponse, error)

	ApiContainerApiApiContainerServiceGetStarlarkRunWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceGetStarlarkRunJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceGetStarlarkRunResponse, error)

	// ApiContainerApiApiContainerServiceInspectFilesArtifactContentsWithBodyWithResponse request with any body
	ApiContainerApiApiContainerServiceInspectFilesArtifactContentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceInspectFilesArtifactContentsResponse, error)

	ApiContainerApiApiContainerServiceInspectFilesArtifactContentsWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceInspectFilesArtifactContentsJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceInspectFilesArtifactContentsResponse, error)

	// ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsWithBodyWithResponse request with any body
	ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsResponse, error)

	ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsResponse, error)

	// ApiContainerApiApiContainerServiceRunStarlarkPackageWithBodyWithResponse request with any body
	ApiContainerApiApiContainerServiceRunStarlarkPackageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceRunStarlarkPackageResponse, error)

	ApiContainerApiApiContainerServiceRunStarlarkPackageWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceRunStarlarkPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceRunStarlarkPackageResponse, error)

	// ApiContainerApiApiContainerServiceRunStarlarkScriptWithBodyWithResponse request with any body
	ApiContainerApiApiContainerServiceRunStarlarkScriptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceRunStarlarkScriptResponse, error)

	ApiContainerApiApiContainerServiceRunStarlarkScriptWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceRunStarlarkScriptJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceRunStarlarkScriptResponse, error)

	// ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceWithBodyWithResponse request with any body
	ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceResponse, error)

	ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceResponse, error)

	// ApiContainerApiApiContainerServiceStoreWebFilesArtifactWithBodyWithResponse request with any body
	ApiContainerApiApiContainerServiceStoreWebFilesArtifactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceStoreWebFilesArtifactResponse, error)

	ApiContainerApiApiContainerServiceStoreWebFilesArtifactWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceStoreWebFilesArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceStoreWebFilesArtifactResponse, error)

	// ApiContainerApiApiContainerServiceUploadFilesArtifactWithBodyWithResponse request with any body
	ApiContainerApiApiContainerServiceUploadFilesArtifactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceUploadFilesArtifactResponse, error)

	ApiContainerApiApiContainerServiceUploadFilesArtifactWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceUploadFilesArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceUploadFilesArtifactResponse, error)

	// ApiContainerApiApiContainerServiceUploadStarlarkPackageWithBodyWithResponse request with any body
	ApiContainerApiApiContainerServiceUploadStarlarkPackageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceUploadStarlarkPackageResponse, error)

	ApiContainerApiApiContainerServiceUploadStarlarkPackageWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceUploadStarlarkPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceUploadStarlarkPackageResponse, error)

	// ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityWithBodyWithResponse request with any body
	ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityResponse, error)

	ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityResponse, error)

	// ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityWithBodyWithResponse request with any body
	ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityResponse, error)

	ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityResponse, error)
}

type ApiContainerApiApiContainerServiceConnectServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiContainerApiApiContainerServiceConnectServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiContainerApiApiContainerServiceConnectServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiContainerApiApiContainerServiceDownloadFilesArtifactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiContainerApiApiContainerServiceDownloadFilesArtifactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiContainerApiApiContainerServiceDownloadFilesArtifactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiContainerApiApiContainerServiceExecCommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiContainerApiApiContainerServiceExecCommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiContainerApiApiContainerServiceExecCommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiContainerApiApiContainerServiceGetServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiContainerApiApiContainerServiceGetServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiContainerApiApiContainerServiceGetServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiContainerApiApiContainerServiceGetStarlarkRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiContainerApiApiContainerServiceGetStarlarkRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiContainerApiApiContainerServiceGetStarlarkRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiContainerApiApiContainerServiceInspectFilesArtifactContentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiContainerApiApiContainerServiceInspectFilesArtifactContentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiContainerApiApiContainerServiceInspectFilesArtifactContentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiContainerApiApiContainerServiceRunStarlarkPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiContainerApiApiContainerServiceRunStarlarkPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiContainerApiApiContainerServiceRunStarlarkPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiContainerApiApiContainerServiceRunStarlarkScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiContainerApiApiContainerServiceRunStarlarkScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiContainerApiApiContainerServiceRunStarlarkScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiContainerApiApiContainerServiceStoreWebFilesArtifactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiContainerApiApiContainerServiceStoreWebFilesArtifactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiContainerApiApiContainerServiceStoreWebFilesArtifactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiContainerApiApiContainerServiceUploadFilesArtifactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiContainerApiApiContainerServiceUploadFilesArtifactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiContainerApiApiContainerServiceUploadFilesArtifactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiContainerApiApiContainerServiceUploadStarlarkPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiContainerApiApiContainerServiceUploadStarlarkPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiContainerApiApiContainerServiceUploadStarlarkPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ApiContainerApiApiContainerServiceConnectServicesWithBodyWithResponse request with arbitrary body returning *ApiContainerApiApiContainerServiceConnectServicesResponse
func (c *ClientWithResponses) ApiContainerApiApiContainerServiceConnectServicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceConnectServicesResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceConnectServicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceConnectServicesResponse(rsp)
}

func (c *ClientWithResponses) ApiContainerApiApiContainerServiceConnectServicesWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceConnectServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceConnectServicesResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceConnectServices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceConnectServicesResponse(rsp)
}

// ApiContainerApiApiContainerServiceDownloadFilesArtifactWithBodyWithResponse request with arbitrary body returning *ApiContainerApiApiContainerServiceDownloadFilesArtifactResponse
func (c *ClientWithResponses) ApiContainerApiApiContainerServiceDownloadFilesArtifactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceDownloadFilesArtifactResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceDownloadFilesArtifactWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceDownloadFilesArtifactResponse(rsp)
}

func (c *ClientWithResponses) ApiContainerApiApiContainerServiceDownloadFilesArtifactWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceDownloadFilesArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceDownloadFilesArtifactResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceDownloadFilesArtifact(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceDownloadFilesArtifactResponse(rsp)
}

// ApiContainerApiApiContainerServiceExecCommandWithBodyWithResponse request with arbitrary body returning *ApiContainerApiApiContainerServiceExecCommandResponse
func (c *ClientWithResponses) ApiContainerApiApiContainerServiceExecCommandWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceExecCommandResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceExecCommandWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceExecCommandResponse(rsp)
}

func (c *ClientWithResponses) ApiContainerApiApiContainerServiceExecCommandWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceExecCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceExecCommandResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceExecCommand(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceExecCommandResponse(rsp)
}

// ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersWithBodyWithResponse request with arbitrary body returning *ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersResponse
func (c *ClientWithResponses) ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersResponse(rsp)
}

func (c *ClientWithResponses) ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersResponse(rsp)
}

// ApiContainerApiApiContainerServiceGetServicesWithBodyWithResponse request with arbitrary body returning *ApiContainerApiApiContainerServiceGetServicesResponse
func (c *ClientWithResponses) ApiContainerApiApiContainerServiceGetServicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceGetServicesResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceGetServicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceGetServicesResponse(rsp)
}

func (c *ClientWithResponses) ApiContainerApiApiContainerServiceGetServicesWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceGetServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceGetServicesResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceGetServices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceGetServicesResponse(rsp)
}

// ApiContainerApiApiContainerServiceGetStarlarkRunWithBodyWithResponse request with arbitrary body returning *ApiContainerApiApiContainerServiceGetStarlarkRunResponse
func (c *ClientWithResponses) ApiContainerApiApiContainerServiceGetStarlarkRunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceGetStarlarkRunResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceGetStarlarkRunWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceGetStarlarkRunResponse(rsp)
}

func (c *ClientWithResponses) ApiContainerApiApiContainerServiceGetStarlarkRunWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceGetStarlarkRunJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceGetStarlarkRunResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceGetStarlarkRun(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceGetStarlarkRunResponse(rsp)
}

// ApiContainerApiApiContainerServiceInspectFilesArtifactContentsWithBodyWithResponse request with arbitrary body returning *ApiContainerApiApiContainerServiceInspectFilesArtifactContentsResponse
func (c *ClientWithResponses) ApiContainerApiApiContainerServiceInspectFilesArtifactContentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceInspectFilesArtifactContentsResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceInspectFilesArtifactContentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceInspectFilesArtifactContentsResponse(rsp)
}

func (c *ClientWithResponses) ApiContainerApiApiContainerServiceInspectFilesArtifactContentsWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceInspectFilesArtifactContentsJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceInspectFilesArtifactContentsResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceInspectFilesArtifactContents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceInspectFilesArtifactContentsResponse(rsp)
}

// ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsWithBodyWithResponse request with arbitrary body returning *ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsResponse
func (c *ClientWithResponses) ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsResponse(rsp)
}

func (c *ClientWithResponses) ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuids(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsResponse(rsp)
}

// ApiContainerApiApiContainerServiceRunStarlarkPackageWithBodyWithResponse request with arbitrary body returning *ApiContainerApiApiContainerServiceRunStarlarkPackageResponse
func (c *ClientWithResponses) ApiContainerApiApiContainerServiceRunStarlarkPackageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceRunStarlarkPackageResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceRunStarlarkPackageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceRunStarlarkPackageResponse(rsp)
}

func (c *ClientWithResponses) ApiContainerApiApiContainerServiceRunStarlarkPackageWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceRunStarlarkPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceRunStarlarkPackageResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceRunStarlarkPackage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceRunStarlarkPackageResponse(rsp)
}

// ApiContainerApiApiContainerServiceRunStarlarkScriptWithBodyWithResponse request with arbitrary body returning *ApiContainerApiApiContainerServiceRunStarlarkScriptResponse
func (c *ClientWithResponses) ApiContainerApiApiContainerServiceRunStarlarkScriptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceRunStarlarkScriptResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceRunStarlarkScriptWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceRunStarlarkScriptResponse(rsp)
}

func (c *ClientWithResponses) ApiContainerApiApiContainerServiceRunStarlarkScriptWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceRunStarlarkScriptJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceRunStarlarkScriptResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceRunStarlarkScript(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceRunStarlarkScriptResponse(rsp)
}

// ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceWithBodyWithResponse request with arbitrary body returning *ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceResponse
func (c *ClientWithResponses) ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceResponse(rsp)
}

func (c *ClientWithResponses) ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceStoreFilesArtifactFromService(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceResponse(rsp)
}

// ApiContainerApiApiContainerServiceStoreWebFilesArtifactWithBodyWithResponse request with arbitrary body returning *ApiContainerApiApiContainerServiceStoreWebFilesArtifactResponse
func (c *ClientWithResponses) ApiContainerApiApiContainerServiceStoreWebFilesArtifactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceStoreWebFilesArtifactResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceStoreWebFilesArtifactWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceStoreWebFilesArtifactResponse(rsp)
}

func (c *ClientWithResponses) ApiContainerApiApiContainerServiceStoreWebFilesArtifactWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceStoreWebFilesArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceStoreWebFilesArtifactResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceStoreWebFilesArtifact(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceStoreWebFilesArtifactResponse(rsp)
}

// ApiContainerApiApiContainerServiceUploadFilesArtifactWithBodyWithResponse request with arbitrary body returning *ApiContainerApiApiContainerServiceUploadFilesArtifactResponse
func (c *ClientWithResponses) ApiContainerApiApiContainerServiceUploadFilesArtifactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceUploadFilesArtifactResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceUploadFilesArtifactWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceUploadFilesArtifactResponse(rsp)
}

func (c *ClientWithResponses) ApiContainerApiApiContainerServiceUploadFilesArtifactWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceUploadFilesArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceUploadFilesArtifactResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceUploadFilesArtifact(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceUploadFilesArtifactResponse(rsp)
}

// ApiContainerApiApiContainerServiceUploadStarlarkPackageWithBodyWithResponse request with arbitrary body returning *ApiContainerApiApiContainerServiceUploadStarlarkPackageResponse
func (c *ClientWithResponses) ApiContainerApiApiContainerServiceUploadStarlarkPackageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceUploadStarlarkPackageResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceUploadStarlarkPackageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceUploadStarlarkPackageResponse(rsp)
}

func (c *ClientWithResponses) ApiContainerApiApiContainerServiceUploadStarlarkPackageWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceUploadStarlarkPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceUploadStarlarkPackageResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceUploadStarlarkPackage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceUploadStarlarkPackageResponse(rsp)
}

// ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityWithBodyWithResponse request with arbitrary body returning *ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityResponse
func (c *ClientWithResponses) ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityResponse(rsp)
}

func (c *ClientWithResponses) ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailability(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityResponse(rsp)
}

// ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityWithBodyWithResponse request with arbitrary body returning *ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityResponse
func (c *ClientWithResponses) ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityResponse(rsp)
}

func (c *ClientWithResponses) ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityWithResponse(ctx context.Context, body ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityResponse, error) {
	rsp, err := c.ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailability(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityResponse(rsp)
}

// ParseApiContainerApiApiContainerServiceConnectServicesResponse parses an HTTP response from a ApiContainerApiApiContainerServiceConnectServicesWithResponse call
func ParseApiContainerApiApiContainerServiceConnectServicesResponse(rsp *http.Response) (*ApiContainerApiApiContainerServiceConnectServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiContainerApiApiContainerServiceConnectServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiContainerApiApiContainerServiceDownloadFilesArtifactResponse parses an HTTP response from a ApiContainerApiApiContainerServiceDownloadFilesArtifactWithResponse call
func ParseApiContainerApiApiContainerServiceDownloadFilesArtifactResponse(rsp *http.Response) (*ApiContainerApiApiContainerServiceDownloadFilesArtifactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiContainerApiApiContainerServiceDownloadFilesArtifactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiContainerApiApiContainerServiceExecCommandResponse parses an HTTP response from a ApiContainerApiApiContainerServiceExecCommandWithResponse call
func ParseApiContainerApiApiContainerServiceExecCommandResponse(rsp *http.Response) (*ApiContainerApiApiContainerServiceExecCommandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiContainerApiApiContainerServiceExecCommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersResponse parses an HTTP response from a ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersWithResponse call
func ParseApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersResponse(rsp *http.Response) (*ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiContainerApiApiContainerServiceGetServicesResponse parses an HTTP response from a ApiContainerApiApiContainerServiceGetServicesWithResponse call
func ParseApiContainerApiApiContainerServiceGetServicesResponse(rsp *http.Response) (*ApiContainerApiApiContainerServiceGetServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiContainerApiApiContainerServiceGetServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiContainerApiApiContainerServiceGetStarlarkRunResponse parses an HTTP response from a ApiContainerApiApiContainerServiceGetStarlarkRunWithResponse call
func ParseApiContainerApiApiContainerServiceGetStarlarkRunResponse(rsp *http.Response) (*ApiContainerApiApiContainerServiceGetStarlarkRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiContainerApiApiContainerServiceGetStarlarkRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiContainerApiApiContainerServiceInspectFilesArtifactContentsResponse parses an HTTP response from a ApiContainerApiApiContainerServiceInspectFilesArtifactContentsWithResponse call
func ParseApiContainerApiApiContainerServiceInspectFilesArtifactContentsResponse(rsp *http.Response) (*ApiContainerApiApiContainerServiceInspectFilesArtifactContentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiContainerApiApiContainerServiceInspectFilesArtifactContentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsResponse parses an HTTP response from a ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsWithResponse call
func ParseApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsResponse(rsp *http.Response) (*ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuidsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiContainerApiApiContainerServiceRunStarlarkPackageResponse parses an HTTP response from a ApiContainerApiApiContainerServiceRunStarlarkPackageWithResponse call
func ParseApiContainerApiApiContainerServiceRunStarlarkPackageResponse(rsp *http.Response) (*ApiContainerApiApiContainerServiceRunStarlarkPackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiContainerApiApiContainerServiceRunStarlarkPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiContainerApiApiContainerServiceRunStarlarkScriptResponse parses an HTTP response from a ApiContainerApiApiContainerServiceRunStarlarkScriptWithResponse call
func ParseApiContainerApiApiContainerServiceRunStarlarkScriptResponse(rsp *http.Response) (*ApiContainerApiApiContainerServiceRunStarlarkScriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiContainerApiApiContainerServiceRunStarlarkScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceResponse parses an HTTP response from a ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceWithResponse call
func ParseApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceResponse(rsp *http.Response) (*ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiContainerApiApiContainerServiceStoreFilesArtifactFromServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiContainerApiApiContainerServiceStoreWebFilesArtifactResponse parses an HTTP response from a ApiContainerApiApiContainerServiceStoreWebFilesArtifactWithResponse call
func ParseApiContainerApiApiContainerServiceStoreWebFilesArtifactResponse(rsp *http.Response) (*ApiContainerApiApiContainerServiceStoreWebFilesArtifactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiContainerApiApiContainerServiceStoreWebFilesArtifactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiContainerApiApiContainerServiceUploadFilesArtifactResponse parses an HTTP response from a ApiContainerApiApiContainerServiceUploadFilesArtifactWithResponse call
func ParseApiContainerApiApiContainerServiceUploadFilesArtifactResponse(rsp *http.Response) (*ApiContainerApiApiContainerServiceUploadFilesArtifactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiContainerApiApiContainerServiceUploadFilesArtifactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiContainerApiApiContainerServiceUploadStarlarkPackageResponse parses an HTTP response from a ApiContainerApiApiContainerServiceUploadStarlarkPackageWithResponse call
func ParseApiContainerApiApiContainerServiceUploadStarlarkPackageResponse(rsp *http.Response) (*ApiContainerApiApiContainerServiceUploadStarlarkPackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiContainerApiApiContainerServiceUploadStarlarkPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityResponse parses an HTTP response from a ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityWithResponse call
func ParseApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityResponse(rsp *http.Response) (*ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailabilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityResponse parses an HTTP response from a ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityWithResponse call
func ParseApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityResponse(rsp *http.Response) (*ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailabilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api_container_api.ApiContainerService/ConnectServices)
	ApiContainerApiApiContainerServiceConnectServices(ctx echo.Context) error

	// (POST /api_container_api.ApiContainerService/DownloadFilesArtifact)
	ApiContainerApiApiContainerServiceDownloadFilesArtifact(ctx echo.Context) error

	// (POST /api_container_api.ApiContainerService/ExecCommand)
	ApiContainerApiApiContainerServiceExecCommand(ctx echo.Context) error

	// (POST /api_container_api.ApiContainerService/GetExistingAndHistoricalServiceIdentifiers)
	ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiers(ctx echo.Context) error

	// (POST /api_container_api.ApiContainerService/GetServices)
	ApiContainerApiApiContainerServiceGetServices(ctx echo.Context) error

	// (POST /api_container_api.ApiContainerService/GetStarlarkRun)
	ApiContainerApiApiContainerServiceGetStarlarkRun(ctx echo.Context) error

	// (POST /api_container_api.ApiContainerService/InspectFilesArtifactContents)
	ApiContainerApiApiContainerServiceInspectFilesArtifactContents(ctx echo.Context) error

	// (POST /api_container_api.ApiContainerService/ListFilesArtifactNamesAndUuids)
	ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuids(ctx echo.Context) error

	// (POST /api_container_api.ApiContainerService/RunStarlarkPackage)
	ApiContainerApiApiContainerServiceRunStarlarkPackage(ctx echo.Context) error

	// (POST /api_container_api.ApiContainerService/RunStarlarkScript)
	ApiContainerApiApiContainerServiceRunStarlarkScript(ctx echo.Context) error

	// (POST /api_container_api.ApiContainerService/StoreFilesArtifactFromService)
	ApiContainerApiApiContainerServiceStoreFilesArtifactFromService(ctx echo.Context) error

	// (POST /api_container_api.ApiContainerService/StoreWebFilesArtifact)
	ApiContainerApiApiContainerServiceStoreWebFilesArtifact(ctx echo.Context) error

	// (POST /api_container_api.ApiContainerService/UploadFilesArtifact)
	ApiContainerApiApiContainerServiceUploadFilesArtifact(ctx echo.Context) error

	// (POST /api_container_api.ApiContainerService/UploadStarlarkPackage)
	ApiContainerApiApiContainerServiceUploadStarlarkPackage(ctx echo.Context) error

	// (POST /api_container_api.ApiContainerService/WaitForHttpGetEndpointAvailability)
	ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailability(ctx echo.Context) error

	// (POST /api_container_api.ApiContainerService/WaitForHttpPostEndpointAvailability)
	ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailability(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiContainerApiApiContainerServiceConnectServices converts echo context to params.
func (w *ServerInterfaceWrapper) ApiContainerApiApiContainerServiceConnectServices(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiContainerApiApiContainerServiceConnectServices(ctx)
	return err
}

// ApiContainerApiApiContainerServiceDownloadFilesArtifact converts echo context to params.
func (w *ServerInterfaceWrapper) ApiContainerApiApiContainerServiceDownloadFilesArtifact(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiContainerApiApiContainerServiceDownloadFilesArtifact(ctx)
	return err
}

// ApiContainerApiApiContainerServiceExecCommand converts echo context to params.
func (w *ServerInterfaceWrapper) ApiContainerApiApiContainerServiceExecCommand(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiContainerApiApiContainerServiceExecCommand(ctx)
	return err
}

// ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiers converts echo context to params.
func (w *ServerInterfaceWrapper) ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiers(ctx)
	return err
}

// ApiContainerApiApiContainerServiceGetServices converts echo context to params.
func (w *ServerInterfaceWrapper) ApiContainerApiApiContainerServiceGetServices(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiContainerApiApiContainerServiceGetServices(ctx)
	return err
}

// ApiContainerApiApiContainerServiceGetStarlarkRun converts echo context to params.
func (w *ServerInterfaceWrapper) ApiContainerApiApiContainerServiceGetStarlarkRun(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiContainerApiApiContainerServiceGetStarlarkRun(ctx)
	return err
}

// ApiContainerApiApiContainerServiceInspectFilesArtifactContents converts echo context to params.
func (w *ServerInterfaceWrapper) ApiContainerApiApiContainerServiceInspectFilesArtifactContents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiContainerApiApiContainerServiceInspectFilesArtifactContents(ctx)
	return err
}

// ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuids converts echo context to params.
func (w *ServerInterfaceWrapper) ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuids(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuids(ctx)
	return err
}

// ApiContainerApiApiContainerServiceRunStarlarkPackage converts echo context to params.
func (w *ServerInterfaceWrapper) ApiContainerApiApiContainerServiceRunStarlarkPackage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiContainerApiApiContainerServiceRunStarlarkPackage(ctx)
	return err
}

// ApiContainerApiApiContainerServiceRunStarlarkScript converts echo context to params.
func (w *ServerInterfaceWrapper) ApiContainerApiApiContainerServiceRunStarlarkScript(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiContainerApiApiContainerServiceRunStarlarkScript(ctx)
	return err
}

// ApiContainerApiApiContainerServiceStoreFilesArtifactFromService converts echo context to params.
func (w *ServerInterfaceWrapper) ApiContainerApiApiContainerServiceStoreFilesArtifactFromService(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiContainerApiApiContainerServiceStoreFilesArtifactFromService(ctx)
	return err
}

// ApiContainerApiApiContainerServiceStoreWebFilesArtifact converts echo context to params.
func (w *ServerInterfaceWrapper) ApiContainerApiApiContainerServiceStoreWebFilesArtifact(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiContainerApiApiContainerServiceStoreWebFilesArtifact(ctx)
	return err
}

// ApiContainerApiApiContainerServiceUploadFilesArtifact converts echo context to params.
func (w *ServerInterfaceWrapper) ApiContainerApiApiContainerServiceUploadFilesArtifact(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiContainerApiApiContainerServiceUploadFilesArtifact(ctx)
	return err
}

// ApiContainerApiApiContainerServiceUploadStarlarkPackage converts echo context to params.
func (w *ServerInterfaceWrapper) ApiContainerApiApiContainerServiceUploadStarlarkPackage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiContainerApiApiContainerServiceUploadStarlarkPackage(ctx)
	return err
}

// ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailability converts echo context to params.
func (w *ServerInterfaceWrapper) ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailability(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailability(ctx)
	return err
}

// ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailability converts echo context to params.
func (w *ServerInterfaceWrapper) ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailability(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailability(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api_container_api.ApiContainerService/ConnectServices", wrapper.ApiContainerApiApiContainerServiceConnectServices)
	router.POST(baseURL+"/api_container_api.ApiContainerService/DownloadFilesArtifact", wrapper.ApiContainerApiApiContainerServiceDownloadFilesArtifact)
	router.POST(baseURL+"/api_container_api.ApiContainerService/ExecCommand", wrapper.ApiContainerApiApiContainerServiceExecCommand)
	router.POST(baseURL+"/api_container_api.ApiContainerService/GetExistingAndHistoricalServiceIdentifiers", wrapper.ApiContainerApiApiContainerServiceGetExistingAndHistoricalServiceIdentifiers)
	router.POST(baseURL+"/api_container_api.ApiContainerService/GetServices", wrapper.ApiContainerApiApiContainerServiceGetServices)
	router.POST(baseURL+"/api_container_api.ApiContainerService/GetStarlarkRun", wrapper.ApiContainerApiApiContainerServiceGetStarlarkRun)
	router.POST(baseURL+"/api_container_api.ApiContainerService/InspectFilesArtifactContents", wrapper.ApiContainerApiApiContainerServiceInspectFilesArtifactContents)
	router.POST(baseURL+"/api_container_api.ApiContainerService/ListFilesArtifactNamesAndUuids", wrapper.ApiContainerApiApiContainerServiceListFilesArtifactNamesAndUuids)
	router.POST(baseURL+"/api_container_api.ApiContainerService/RunStarlarkPackage", wrapper.ApiContainerApiApiContainerServiceRunStarlarkPackage)
	router.POST(baseURL+"/api_container_api.ApiContainerService/RunStarlarkScript", wrapper.ApiContainerApiApiContainerServiceRunStarlarkScript)
	router.POST(baseURL+"/api_container_api.ApiContainerService/StoreFilesArtifactFromService", wrapper.ApiContainerApiApiContainerServiceStoreFilesArtifactFromService)
	router.POST(baseURL+"/api_container_api.ApiContainerService/StoreWebFilesArtifact", wrapper.ApiContainerApiApiContainerServiceStoreWebFilesArtifact)
	router.POST(baseURL+"/api_container_api.ApiContainerService/UploadFilesArtifact", wrapper.ApiContainerApiApiContainerServiceUploadFilesArtifact)
	router.POST(baseURL+"/api_container_api.ApiContainerService/UploadStarlarkPackage", wrapper.ApiContainerApiApiContainerServiceUploadStarlarkPackage)
	router.POST(baseURL+"/api_container_api.ApiContainerService/WaitForHttpGetEndpointAvailability", wrapper.ApiContainerApiApiContainerServiceWaitForHttpGetEndpointAvailability)
	router.POST(baseURL+"/api_container_api.ApiContainerService/WaitForHttpPostEndpointAvailability", wrapper.ApiContainerApiApiContainerServiceWaitForHttpPostEndpointAvailability)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9f2/jNpZfhdAdMG3hOrPdxaIIcH+kSWbGt61jxElzh/NBS0tPNhuK1PGHE7fIdz+Q",
	"omTJphxZduz0bvaP3Y1FPj6+3+/xkfNHEPE04wyYksH5H4GA/9Eg1U88JmB/wBkJI84UJgxEiDPSHysB",
	"OIX4Cit8Odfs0QwzQ4CpfEZGSYQV4ezsN8mZ+U1Gc0ix+X//KiAJzoN/OVute5Z/lWdt1np5eekFMchI",
	"kMwsEZwH//am/5mwAglksEAWjQl720WDnuUEERAH50poeOkFM85nFPqZ4IpPddK/TjO1PBjt/dAttdcw",
	"eek5kA3ycckZg8iiU+fTR/Q9urwZDq8v79DZGfoJpEKQJFwolJn/Srh4wiImbDZhf0Hfo+FNWBk+qg9B",
	"MZF4SiEOegEwnQbn/xW40UEvWE0N/rsXqGUGwXkglSBsFrz0mpEeg1iQCOSFmNndZYJnIJTThWi1s93E",
	"uCCJoZ1Dhk9/s7+0QOYWZMaZBLNuu9n5X54NpHGI3daIglRWQK6o437AQuCl+RuYEsuME6Y6TV6ECyxy",
	"WYljYmQB01ENrSYgq12SFM8gZDgF73ipsNKyE1/yv/rjHEJ7BtXneWV9fHczGl1foVyab++Hw8HwM5qw",
	"H9D36H74j+HNwxBVpNcND3qBGxr0AjespRCXVvIXUDjGCm9KQAMJ2237ij8xynH8iVCjIookOFKFqhzX",
	"JheoIIsLKpA5gl2u05PEwBRJSK5tdRrkqK1GIMXRDBSaLhVIY8qCXjc+XD9DdMnTFLP4NNQ3CCCHwdFJ",
	"HuXrdrBFMjeo4Tam3c0BuXFV1vEEqTmgkg9IzbFyP1l0kJxzTWM0BQTPEGkFMSLsAByuWv86IeCZqDDi",
	"sf2UcJFiFZwHhKm//rBalzAFMxBmGcpnIdcq0x7ffCGlTkGi+7tP3/+IgEXcONmu6BvJL1TyMo9OpPnt",
	"qrrm+nYyrOabiI2wmiMBFCuyAKNBhuYJoYCwWyDw2EZJfodNWGPyOxScNCB6iLBcG4NejYB//5uXgAqe",
	"VZgJWBB48pAQTYmy4OFZIReU9RBJKihTyp8k+kaSlFBsDcL9cPAfHyT6MAccf/h2H4KXFnmIU7hg8b0m",
	"8SaVDR5D5wTW8c/XRAIyAdKIPptZ3I3TqNLNR3Hze7FiW7hak3g73Ha7/wzq+plIA/eCxV+IVFyQCFMX",
	"QA1KNZbNyoQprYyr2ZUdU5aNRTdNUettrcejxzXzn0GhAoOjm/lNY71bDFkn1SQYg5oERtoqAI0CJqCi",
	"OSIs4cYlT9ggQWBynx56IpSufTYaXLgHGWxwcWe+NstjuX2W8O5CaCbvgJXCgmLxeKvZNq+TgSApMIVp",
	"mABWWsA++vIPLRSXRH7KQX2i2Ou7U0xYmGgWGYY2ZwIZjh5NqpAbIs9ngSkFSmTa0mkWric07ilUPMwR",
	"MdbKt4AAqbBQYcYpiZa7U+M2nz/Kp+cxC8GU/A5xaJBviHQqo3Kp7xzjD0ymVUTXv7jgYjO3wfQJL6VL",
	"bVIipbHplWQm/x70AvetZQYzYDKDSNXcWRFA3OalKb9LsxIhQxMXaueFdiN8owdtS7etmDcpk0W9Qt19",
	"FKlN0NXRE/l01CsWw5twMBzf3d5f3g1uhuPw8uLyi0l6K5LRMKSlgPxMpNpglXS8eo3QdRnZl9Z+aelG",
	"4BEX6vj+fTzHAmJ0YxGT6Jt7CTH6aYl+0VSRjAK6ZrGt+8hvj+7+U7ycQlipZ4a2NBlx6jWA+fAnTFSo",
	"SArcl+OY1M6MQG4EirWwoE0a4EB5hJDpdJpnii3chRKYyYwbD1BBdzfhMsLQvysAjQo4O4iSZ7ZXXe8u",
	"R86Ejy/vRkVp6mpU1de7y1HQC8z3oBfcX41aKmrdkfmNxfWv17du/YufHy7+c1yzE+Zr0AvyL21X1awI",
	"YkZ5JNBQyaWcGZduh2xi9zAHNbdJPiA3qJLf28kx4gIxrvo2YkwwldAz41ltkg0hp4AyTSnEKBE8td8v",
	"RoNLRHmE6Qq+4gL6aJAgoj5IhNc+W9BEolRLNWFzvAA0BWBIZ8ZRQ4y0dcH39s81GqBMEG6zzQhTaoZt",
	"0infhxJ62zbczu02PhP1RU/RFBIuipqH0SXL9kpsPOWcArauJ6JcxyFhUmEWFTFanfJXkGBNlY3MbRju",
	"08gcjpYgusOIxTIUmm2fbdnq3cqJouC8Dh678CxMXXy221qbIZ4tDkXYYyVyKVjaUqvL1HO5THmsbcZe",
	"GsXpUnkrA/7IfdM0V6sMZg4q5liBRHHOF7TAVIPRhEkgNJsEviV3ywKa+f+3tbpQpxxhc6dlOSvfJqF5",
	"+cPMbtir+XFiKdk3+jUJ8lkkV1PBuS084UJhfTQRkHLlQeg3LRXCKKF4ZrZMWGwcLuRssEy2Nqei/oRJ",
	"EkNhx7zq4c1a1opx5RBkh4AyCXmMFbaJtoFemKjSDtXEYsLu5kRW7DI29CIx+vfxzbDRn7dzohX7OLY4",
	"N7qRrwbtnRq0k5idw9qVY+f+ntLlZjWX+Y5HiAlYIk4pWNIZepoUq5dT1x2PCAXGfNj8vNdwLllfbFjh",
	"jVvVW+13tTLtrT/f3w+u2gApEGwAYw+Gapt4FehuVHeFvo2Wg9VhfsfD7VV+lOkpJVFIshDHsefwa2S/",
	"o8EIme8gJfqOa2Ws/Xd2p8AiaiLPpzkIqO7dCIAAHM3xlMKEDW/urs/Rg4sarckqzkFWE9gHhYRmjLBZ",
	"r/YpJrH5FkNCmBGepW0PkT3k3MIUR4/AYhRzsECkzmz/iADzPya8zfe5WsuQtteUNDqi2DW6JWs2S9xH",
	"gDNBFlhBM2OM8FW4wtdouXLIjkPbFtlzo4Wyde25cOJeNFwcSXvHb6i576oHpAhbroXgwle9d3laCMWA",
	"XTvyHPwCUL6QceVMgcgEKHwI+IMatHIRG+EdZIFfS0gOeEue+/e/SWjzc5iClK7C0E3CSmr4nIOxawdc",
	"QiqhI//ZPBYznRY9ol0PRjcXuhD+njFLW+NKbGxdwWpDASrfmw+FiAzlI8kyqKaDldg345IUK+y9p1EB",
	"rDv9DVl8LNi6w/J03aaW/o1WQkUDzsa0hxScUYWQ63EM1SlrWUQ1uW3jVilh7RpeOu/iFqSmynskW1Cv",
	"KnaiHL4nGTcN3htblVvNPhFG5Bzi64XrIF6zMNLklKHUUQRSJpq+KlerBqN9URsJPjPRjkeYtBDAVCgV",
	"ZOUBefs2sNr03ar73GTHZp58AxGsHLv/7IT82I3urt5SOjdUIHT08599w5NVVNKpf6Lqd+tu5iBOYt11",
	"rWzI3qCd9bIBf65A4X40qKriSy8w9iBxViOEwmx0Bl03QC+94AkLkxJ2B/rgAOyofevx4Bvb3ofVNuvL",
	"uP0fYCEuoHZO/Unw1KUs/nJmuyJZYtuat3ZftuizHVTaoudYlUdMWkJs69D592Ut0a3UHbgWUYFLeTzF",
	"M+KOp7xo2Tmhv8/U7BJPJadaldDNyL3WPACnmlsaXs+X65zq2bq6lpaMDAlIQACLCJshooqjhEQrLWCv",
	"nTzA9B1cELCooAeYnvqGwKGUSgvP8dz97c9GWYr6uQVVANlfJtc5+SeTRc81xf8PFwfrnCmuAdV3bnEp",
	"WMMXIDClayzabIxvPOCt3DbazWVvXliyYQssCNcyjMyXcI6lx1x/wXJe4D+6vf51cHM/RnaCLRPnJWfX",
	"d27PT4kszlETIqTKx07YbUXy7Fm3Wzz/jhYEI6IkMkgU3fvFyZZRPFeOgglzt0MkkQpYtCxws+eZhKEI",
	"S+NAUnCAn4xTYVwhARGQhb3G2EnM84aPRjU9rsDnyLxPi/tGxqj3Hm3fAybqExdflMo+gyq6+C4WmFA8",
	"JZSo5WmcssELfeICfbm7G6HPoMoOQ1RF7ugSM+XxMlTw7GkaHCTuXMXhKUBpwZxFsQW0+uFVERemWDxC",
	"jLBEON8ZBfQN9Gd99AUo5eiBCxp/2/cJFGFEEUzDGChehimhlEiIOItlQxxhSxhG2KpjjXmy3Y6aKUKL",
	"Bi1n5nIbaLkQYUrbHUc3B842UF47lFIcRXOIHvtooGwHiT2qU1iYWF/NK2hIiuW8b+WiaKVA/3RgzuaA",
	"qZr/03ug5W2atfhwoZrxqS3048cfP7bt8lGicKq1FX/BzxUelERFWCnjh2RxV5C4rMHdD3SMmZGF4YrO",
	"7DF5Ll7mB8xQXgPZBblWMjPcLi9TUE9gDVO+37atCq2uVm5eqdzgzwGM3ojLd2v1DG5fzd5Xs/fnMXv2",
	"2k1ohMW/rLvqWqzsJiAzoe/vRPxqSN+PIW18Vmb9bmOlmK6IovZIpWaEV90UCxAyR/UvZgmeAcMZCc6D",
	"v/Y/9o3cGc2xBPUkhRcZKVuXXBHsbO1FFFuA4NKjBvcSRHlBc/1ZmcCikt/5GMTBeVBd6iIjnpXXF+5V",
	"XkhavuHDR773aHyP8dgbhzbbs0T54ePHNaS+O/vugHiUqaXnGSbz20uvLUe9b4k087UYLhFer1OUlyrK",
	"xNzAROOlVJB2YLkfs2MxvvmNlRO8fHW6V1aOLOat3hnbTcArT3g0i3V+0Ap5YWpGFsDK90RcUx8ueiRX",
	"b490kOkqMseS5PVXak4gv0d+p+bIQut7JGZvsW3/lkazVN+6ZMGECybgIZwhPOVa2ecTwIFHE/3x4w9/",
	"R/NyjerLCrtK+A54byiAj+y1hxCbXsd7aw53eNjkEALweph1W6aDgAZXZUOy66xZBWCumrnqSu7A1qPH",
	"XuvvrpzAcB355ZUjGy7fAygHkdtVW0mz6BrSUizV6naZ0KyjZFbW+1MZFd9DL3szYNsLGFV27ErorXCP",
	"ZRPaPExyivys1bMje7N2+6sb+zD3Fch/Hq1q+TDJ3qzYvLnfIrvAK2OXf0c8d8xagvgg0RTmmCYdjKAH",
	"m2NpZMNTD6dQwqYG3kMye1xe7XwHvHbInIDVldvY/6c4vbUHsJnrd0CpLG7iV18n5Sji2bKhWIarteID",
	"Vs62b+JY0vJ64+tpJKdNk+dh5Gi9b6+T/JQ9hc0F1yeYvoUEbaB/VMnxtq+e5F8dOFkD6ylUo7HXdG+V",
	"8HTIbTk/yhpOGQ4r5z6cOsS6rQrZb82+bR2IB2Je64h3xb71t2P6KH8tRkGWP1aQi3jxflX1tasIs9oz",
	"3vbc3hvpdmP7qxHzu2T8ln8gZB8Gv96q2MztnyiPHt3p/+oAxfYNbDSulO0ovfIRNKKQmguuZ3OEVx2J",
	"jtAduNtiK8fyZC0bQE/g1t5PC+iberm315amHrcjqottZTuIvjRu5gQKs7V58OQac9L2wXekMi8v/xsA",
	"AP//vgZ8abtsAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
