// Package kurtosis_core_http_api_bindings provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package kurtosis_core_http_api_bindings

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /enclaves/{enclave_identifier}/artifacts)
	GetEnclavesEnclaveIdentifierArtifacts(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (POST /enclaves/{enclave_identifier}/artifacts/local-file)
	PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (PUT /enclaves/{enclave_identifier}/artifacts/remote-file)
	PutEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (PUT /enclaves/{enclave_identifier}/artifacts/services/{service_identifier})
	PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error

	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier})
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, artifactIdentifier ArtifactIdentifier) error

	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier}/download)
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, artifactIdentifier ArtifactIdentifier) error

	// (GET /enclaves/{enclave_identifier}/services)
	GetEnclavesEnclaveIdentifierServices(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (POST /enclaves/{enclave_identifier}/services/connection)
	PostEnclavesEnclaveIdentifierServicesConnection(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (GET /enclaves/{enclave_identifier}/services/{service_identifier})
	GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier, params GetEnclavesEnclaveIdentifierServicesServiceIdentifierParams) error

	// (POST /enclaves/{enclave_identifier}/services/{service_identifier}/command)
	PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error

	// (POST /enclaves/{enclave_identifier}/services/{service_identifier}/endpoints/{port_number}/availability)
	PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier, portNumber PortNumber) error

	// (GET /enclaves/{enclave_identifier}/starlark)
	GetEnclavesEnclaveIdentifierStarlark(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (POST /enclaves/{enclave_identifier}/starlark/packages)
	PostEnclavesEnclaveIdentifierStarlarkPackages(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (POST /enclaves/{enclave_identifier}/starlark/packages/{package_id})
	PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, packageId PackageId) error

	// (POST /enclaves/{enclave_identifier}/starlark/scripts)
	PostEnclavesEnclaveIdentifierStarlarkScripts(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetEnclavesEnclaveIdentifierArtifacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierArtifacts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierArtifacts(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierArtifactsLocalFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx, enclaveIdentifier)
	return err
}

// PutEnclavesEnclaveIdentifierArtifactsRemoteFile converts echo context to params.
func (w *ServerInterfaceWrapper) PutEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx, enclaveIdentifier)
	return err
}

// PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx, enclaveIdentifier, serviceIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "artifact_identifier" -------------
	var artifactIdentifier ArtifactIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "artifact_identifier", runtime.ParamLocationPath, ctx.Param("artifact_identifier"), &artifactIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artifact_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx, enclaveIdentifier, artifactIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "artifact_identifier" -------------
	var artifactIdentifier ArtifactIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "artifact_identifier", runtime.ParamLocationPath, ctx.Param("artifact_identifier"), &artifactIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artifact_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx, enclaveIdentifier, artifactIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierServices converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServices(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServices(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierServicesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierServicesConnection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierServicesConnection(ctx, enclaveIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnclavesEnclaveIdentifierServicesServiceIdentifierParams
	// ------------- Optional query parameter "additional-properties" -------------

	err = runtime.BindQueryParameter("form", true, false, "additional-properties", ctx.QueryParams(), &params.AdditionalProperties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additional-properties: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx, enclaveIdentifier, serviceIdentifier, params)
	return err
}

// PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx, enclaveIdentifier, serviceIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// ------------- Path parameter "port_number" -------------
	var portNumber PortNumber

	err = runtime.BindStyledParameterWithLocation("simple", false, "port_number", runtime.ParamLocationPath, ctx.Param("port_number"), &portNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter port_number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx, enclaveIdentifier, serviceIdentifier, portNumber)
	return err
}

// GetEnclavesEnclaveIdentifierStarlark converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierStarlark(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierStarlark(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierStarlarkPackages converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierStarlarkPackages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierStarlarkPackages(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "package_id" -------------
	var packageId PackageId

	err = runtime.BindStyledParameterWithLocation("simple", false, "package_id", runtime.ParamLocationPath, ctx.Param("package_id"), &packageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx, enclaveIdentifier, packageId)
	return err
}

// PostEnclavesEnclaveIdentifierStarlarkScripts converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierStarlarkScripts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierStarlarkScripts(ctx, enclaveIdentifier)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/enclaves/:enclave_identifier/artifacts", wrapper.GetEnclavesEnclaveIdentifierArtifacts)
	router.POST(baseURL+"/enclaves/:enclave_identifier/artifacts/local-file", wrapper.PostEnclavesEnclaveIdentifierArtifactsLocalFile)
	router.PUT(baseURL+"/enclaves/:enclave_identifier/artifacts/remote-file", wrapper.PutEnclavesEnclaveIdentifierArtifactsRemoteFile)
	router.PUT(baseURL+"/enclaves/:enclave_identifier/artifacts/services/:service_identifier", wrapper.PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier)
	router.GET(baseURL+"/enclaves/:enclave_identifier/artifacts/:artifact_identifier", wrapper.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier)
	router.GET(baseURL+"/enclaves/:enclave_identifier/artifacts/:artifact_identifier/download", wrapper.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services", wrapper.GetEnclavesEnclaveIdentifierServices)
	router.POST(baseURL+"/enclaves/:enclave_identifier/services/connection", wrapper.PostEnclavesEnclaveIdentifierServicesConnection)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier", wrapper.GetEnclavesEnclaveIdentifierServicesServiceIdentifier)
	router.POST(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier/command", wrapper.PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand)
	router.POST(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier/endpoints/:port_number/availability", wrapper.PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability)
	router.GET(baseURL+"/enclaves/:enclave_identifier/starlark", wrapper.GetEnclavesEnclaveIdentifierStarlark)
	router.POST(baseURL+"/enclaves/:enclave_identifier/starlark/packages", wrapper.PostEnclavesEnclaveIdentifierStarlarkPackages)
	router.POST(baseURL+"/enclaves/:enclave_identifier/starlark/packages/:package_id", wrapper.PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId)
	router.POST(baseURL+"/enclaves/:enclave_identifier/starlark/scripts", wrapper.PostEnclavesEnclaveIdentifierStarlarkScripts)

}

type SuccessAsteriskResponse struct {
	Body io.Reader

	ContentType   string
	ContentLength int64
}

type GetEnclavesEnclaveIdentifierArtifactsRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
}

type GetEnclavesEnclaveIdentifierArtifactsResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierArtifactsResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierArtifacts200JSONResponse ListFilesArtifactNamesAndUuidsResponse

func (response GetEnclavesEnclaveIdentifierArtifacts200JSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *multipart.Reader
}

type PostEnclavesEnclaveIdentifierArtifactsLocalFileResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierArtifactsLocalFileResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierArtifactsLocalFile200JSONResponse map[string]UploadFilesArtifactResponse

func (response PostEnclavesEnclaveIdentifierArtifactsLocalFile200JSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsLocalFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *PutEnclavesEnclaveIdentifierArtifactsRemoteFileJSONRequestBody
}

type PutEnclavesEnclaveIdentifierArtifactsRemoteFileResponseObject interface {
	VisitPutEnclavesEnclaveIdentifierArtifactsRemoteFileResponse(w http.ResponseWriter) error
}

type PutEnclavesEnclaveIdentifierArtifactsRemoteFile200JSONResponse UploadFilesArtifactResponse

func (response PutEnclavesEnclaveIdentifierArtifactsRemoteFile200JSONResponse) VisitPutEnclavesEnclaveIdentifierArtifactsRemoteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier ServiceIdentifier `json:"service_identifier"`
	Body              *PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierJSONRequestBody
}

type PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponseObject interface {
	VisitPutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponse(w http.ResponseWriter) error
}

type PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier200JSONResponse StoreFilesArtifactFromServiceResponse

func (response PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier200JSONResponse) VisitPutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject struct {
	EnclaveIdentifier  EnclaveIdentifier  `json:"enclave_identifier"`
	ArtifactIdentifier ArtifactIdentifier `json:"artifact_identifier"`
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier200JSONResponse InspectFilesArtifactContentsResponse

func (response GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier200JSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject struct {
	EnclaveIdentifier  EnclaveIdentifier  `json:"enclave_identifier"`
	ArtifactIdentifier ArtifactIdentifier `json:"artifact_identifier"`
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload200JSONResponse StreamedDataChunk

func (response GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload200JSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierServicesRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
}

type GetEnclavesEnclaveIdentifierServicesResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierServicesResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierServices200JSONResponse GetExistingAndHistoricalServiceIdentifiersResponse

func (response GetEnclavesEnclaveIdentifierServices200JSONResponse) VisitGetEnclavesEnclaveIdentifierServicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierServicesConnectionRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *PostEnclavesEnclaveIdentifierServicesConnectionJSONRequestBody
}

type PostEnclavesEnclaveIdentifierServicesConnectionResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierServicesConnectionResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierServicesConnection200JSONResponse ConnectServicesResponse

func (response PostEnclavesEnclaveIdentifierServicesConnection200JSONResponse) VisitPostEnclavesEnclaveIdentifierServicesConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier ServiceIdentifier `json:"service_identifier"`
	Params            GetEnclavesEnclaveIdentifierServicesServiceIdentifierParams
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifier200JSONResponse GetServicesResponse

func (response GetEnclavesEnclaveIdentifierServicesServiceIdentifier200JSONResponse) VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier ServiceIdentifier `json:"service_identifier"`
	Body              *PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandJSONRequestBody
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand200JSONResponse ExecCommandResponse

func (response PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand200JSONResponse) VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier ServiceIdentifier `json:"service_identifier"`
	PortNumber        PortNumber        `json:"port_number"`
	Body              *PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityJSONRequestBody
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability200AsteriskResponse struct{ SuccessAsteriskResponse }

func (response PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability200AsteriskResponse) VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetEnclavesEnclaveIdentifierStarlarkRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
}

type GetEnclavesEnclaveIdentifierStarlarkResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierStarlarkResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierStarlark200JSONResponse GetStarlarkRunResponse

func (response GetEnclavesEnclaveIdentifierStarlark200JSONResponse) VisitGetEnclavesEnclaveIdentifierStarlarkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *multipart.Reader
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierStarlarkPackagesResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierStarlarkPackages200AsteriskResponse struct{ SuccessAsteriskResponse }

func (response PostEnclavesEnclaveIdentifierStarlarkPackages200AsteriskResponse) VisitPostEnclavesEnclaveIdentifierStarlarkPackagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	PackageId         PackageId         `json:"package_id"`
	Body              *PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdJSONRequestBody
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId200JSONResponse StarlarkRunResponseLine

func (response PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId200JSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *PostEnclavesEnclaveIdentifierStarlarkScriptsJSONRequestBody
}

type PostEnclavesEnclaveIdentifierStarlarkScriptsResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierStarlarkScripts200JSONResponse StarlarkRunResponseLine

func (response PostEnclavesEnclaveIdentifierStarlarkScripts200JSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /enclaves/{enclave_identifier}/artifacts)
	GetEnclavesEnclaveIdentifierArtifacts(ctx context.Context, request GetEnclavesEnclaveIdentifierArtifactsRequestObject) (GetEnclavesEnclaveIdentifierArtifactsResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/artifacts/local-file)
	PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx context.Context, request PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject) (PostEnclavesEnclaveIdentifierArtifactsLocalFileResponseObject, error)

	// (PUT /enclaves/{enclave_identifier}/artifacts/remote-file)
	PutEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx context.Context, request PutEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject) (PutEnclavesEnclaveIdentifierArtifactsRemoteFileResponseObject, error)

	// (PUT /enclaves/{enclave_identifier}/artifacts/services/{service_identifier})
	PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx context.Context, request PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject) (PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier})
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx context.Context, request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject) (GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier}/download)
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx context.Context, request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject) (GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/services)
	GetEnclavesEnclaveIdentifierServices(ctx context.Context, request GetEnclavesEnclaveIdentifierServicesRequestObject) (GetEnclavesEnclaveIdentifierServicesResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/services/connection)
	PostEnclavesEnclaveIdentifierServicesConnection(ctx context.Context, request PostEnclavesEnclaveIdentifierServicesConnectionRequestObject) (PostEnclavesEnclaveIdentifierServicesConnectionResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/services/{service_identifier})
	GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx context.Context, request GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject) (GetEnclavesEnclaveIdentifierServicesServiceIdentifierResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/services/{service_identifier}/command)
	PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx context.Context, request PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject) (PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/services/{service_identifier}/endpoints/{port_number}/availability)
	PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx context.Context, request PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject) (PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/starlark)
	GetEnclavesEnclaveIdentifierStarlark(ctx context.Context, request GetEnclavesEnclaveIdentifierStarlarkRequestObject) (GetEnclavesEnclaveIdentifierStarlarkResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/starlark/packages)
	PostEnclavesEnclaveIdentifierStarlarkPackages(ctx context.Context, request PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject) (PostEnclavesEnclaveIdentifierStarlarkPackagesResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/starlark/packages/{package_id})
	PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx context.Context, request PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject) (PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/starlark/scripts)
	PostEnclavesEnclaveIdentifierStarlarkScripts(ctx context.Context, request PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject) (PostEnclavesEnclaveIdentifierStarlarkScriptsResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetEnclavesEnclaveIdentifierArtifacts operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierArtifacts(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request GetEnclavesEnclaveIdentifierArtifactsRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierArtifacts(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierArtifactsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierArtifacts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierArtifactsResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierArtifactsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierArtifactsLocalFile operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierArtifactsLocalFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierArtifactsLocalFileResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierArtifactsLocalFileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutEnclavesEnclaveIdentifierArtifactsRemoteFile operation middleware
func (sh *strictHandler) PutEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PutEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	var body PutEnclavesEnclaveIdentifierArtifactsRemoteFileJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx.Request().Context(), request.(PutEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutEnclavesEnclaveIdentifierArtifactsRemoteFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutEnclavesEnclaveIdentifierArtifactsRemoteFileResponseObject); ok {
		return validResponse.VisitPutEnclavesEnclaveIdentifierArtifactsRemoteFileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier operation middleware
func (sh *strictHandler) PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error {
	var request PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier

	var body PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx.Request().Context(), request.(PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponseObject); ok {
		return validResponse.VisitPutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, artifactIdentifier ArtifactIdentifier) error {
	var request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ArtifactIdentifier = artifactIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, artifactIdentifier ArtifactIdentifier) error {
	var request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ArtifactIdentifier = artifactIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierServices operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierServices(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request GetEnclavesEnclaveIdentifierServicesRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierServices(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierServicesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierServices")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierServicesResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierServicesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierServicesConnection operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierServicesConnection(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierServicesConnectionRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	var body PostEnclavesEnclaveIdentifierServicesConnectionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierServicesConnection(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierServicesConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierServicesConnection")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierServicesConnectionResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierServicesConnectionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifier operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier, params GetEnclavesEnclaveIdentifierServicesServiceIdentifierParams) error {
	var request GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierServicesServiceIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierServicesServiceIdentifierResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error {
	var request PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier

	var body PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier, portNumber PortNumber) error {
	var request PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier
	request.PortNumber = portNumber

	var body PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierStarlark operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierStarlark(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request GetEnclavesEnclaveIdentifierStarlarkRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierStarlark(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierStarlarkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierStarlark")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierStarlarkResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierStarlarkResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierStarlarkPackages operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierStarlarkPackages(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierStarlarkPackages(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierStarlarkPackages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierStarlarkPackagesResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierStarlarkPackagesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, packageId PackageId) error {
	var request PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.PackageId = packageId

	var body PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierStarlarkScripts operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierStarlarkScripts(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	var body PostEnclavesEnclaveIdentifierStarlarkScriptsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierStarlarkScripts(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierStarlarkScripts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierStarlarkScriptsResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
