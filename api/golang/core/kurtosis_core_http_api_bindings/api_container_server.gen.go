// Package kurtosis_core_http_api_bindings provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package kurtosis_core_http_api_bindings

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /enclaves/{enclave_identifier}/artifacts)
	GetEnclavesEnclaveIdentifierArtifacts(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (POST /enclaves/{enclave_identifier}/artifacts/local-file)
	PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (PUT /enclaves/{enclave_identifier}/artifacts/remote-file)
	PutEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (PUT /enclaves/{enclave_identifier}/artifacts/services/{service_identifier})
	PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error

	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier})
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, artifactIdentifier ArtifactIdentifier) error

	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier}/download)
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, artifactIdentifier ArtifactIdentifier) error

	// (GET /enclaves/{enclave_identifier}/services)
	GetEnclavesEnclaveIdentifierServices(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (POST /enclaves/{enclave_identifier}/services/connection)
	PostEnclavesEnclaveIdentifierServicesConnection(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (GET /enclaves/{enclave_identifier}/services/{service_identifier})
	GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier, params GetEnclavesEnclaveIdentifierServicesServiceIdentifierParams) error

	// (POST /enclaves/{enclave_identifier}/services/{service_identifier}/command)
	PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error

	// (POST /enclaves/{enclave_identifier}/services/{service_identifier}/endpoints/{port_number}/availability)
	PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier, portNumber PortNumber) error

	// (GET /enclaves/{enclave_identifier}/starlark)
	GetEnclavesEnclaveIdentifierStarlark(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (POST /enclaves/{enclave_identifier}/starlark/packages)
	PostEnclavesEnclaveIdentifierStarlarkPackages(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error

	// (POST /enclaves/{enclave_identifier}/starlark/packages/{package_id})
	PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, packageId PackageId) error

	// (POST /enclaves/{enclave_identifier}/starlark/scripts)
	PostEnclavesEnclaveIdentifierStarlarkScripts(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetEnclavesEnclaveIdentifierArtifacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierArtifacts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierArtifacts(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierArtifactsLocalFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx, enclaveIdentifier)
	return err
}

// PutEnclavesEnclaveIdentifierArtifactsRemoteFile converts echo context to params.
func (w *ServerInterfaceWrapper) PutEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx, enclaveIdentifier)
	return err
}

// PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx, enclaveIdentifier, serviceIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "artifact_identifier" -------------
	var artifactIdentifier ArtifactIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "artifact_identifier", runtime.ParamLocationPath, ctx.Param("artifact_identifier"), &artifactIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artifact_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx, enclaveIdentifier, artifactIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "artifact_identifier" -------------
	var artifactIdentifier ArtifactIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "artifact_identifier", runtime.ParamLocationPath, ctx.Param("artifact_identifier"), &artifactIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artifact_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx, enclaveIdentifier, artifactIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierServices converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServices(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServices(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierServicesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierServicesConnection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierServicesConnection(ctx, enclaveIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnclavesEnclaveIdentifierServicesServiceIdentifierParams
	// ------------- Optional query parameter "additional-properties" -------------

	err = runtime.BindQueryParameter("form", true, false, "additional-properties", ctx.QueryParams(), &params.AdditionalProperties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additional-properties: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx, enclaveIdentifier, serviceIdentifier, params)
	return err
}

// PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx, enclaveIdentifier, serviceIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// ------------- Path parameter "port_number" -------------
	var portNumber PortNumber

	err = runtime.BindStyledParameterWithLocation("simple", false, "port_number", runtime.ParamLocationPath, ctx.Param("port_number"), &portNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter port_number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx, enclaveIdentifier, serviceIdentifier, portNumber)
	return err
}

// GetEnclavesEnclaveIdentifierStarlark converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierStarlark(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierStarlark(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierStarlarkPackages converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierStarlarkPackages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierStarlarkPackages(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "package_id" -------------
	var packageId PackageId

	err = runtime.BindStyledParameterWithLocation("simple", false, "package_id", runtime.ParamLocationPath, ctx.Param("package_id"), &packageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx, enclaveIdentifier, packageId)
	return err
}

// PostEnclavesEnclaveIdentifierStarlarkScripts converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierStarlarkScripts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierStarlarkScripts(ctx, enclaveIdentifier)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/enclaves/:enclave_identifier/artifacts", wrapper.GetEnclavesEnclaveIdentifierArtifacts)
	router.POST(baseURL+"/enclaves/:enclave_identifier/artifacts/local-file", wrapper.PostEnclavesEnclaveIdentifierArtifactsLocalFile)
	router.PUT(baseURL+"/enclaves/:enclave_identifier/artifacts/remote-file", wrapper.PutEnclavesEnclaveIdentifierArtifactsRemoteFile)
	router.PUT(baseURL+"/enclaves/:enclave_identifier/artifacts/services/:service_identifier", wrapper.PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier)
	router.GET(baseURL+"/enclaves/:enclave_identifier/artifacts/:artifact_identifier", wrapper.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier)
	router.GET(baseURL+"/enclaves/:enclave_identifier/artifacts/:artifact_identifier/download", wrapper.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services", wrapper.GetEnclavesEnclaveIdentifierServices)
	router.POST(baseURL+"/enclaves/:enclave_identifier/services/connection", wrapper.PostEnclavesEnclaveIdentifierServicesConnection)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier", wrapper.GetEnclavesEnclaveIdentifierServicesServiceIdentifier)
	router.POST(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier/command", wrapper.PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand)
	router.POST(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier/endpoints/:port_number/availability", wrapper.PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability)
	router.GET(baseURL+"/enclaves/:enclave_identifier/starlark", wrapper.GetEnclavesEnclaveIdentifierStarlark)
	router.POST(baseURL+"/enclaves/:enclave_identifier/starlark/packages", wrapper.PostEnclavesEnclaveIdentifierStarlarkPackages)
	router.POST(baseURL+"/enclaves/:enclave_identifier/starlark/packages/:package_id", wrapper.PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId)
	router.POST(baseURL+"/enclaves/:enclave_identifier/starlark/scripts", wrapper.PostEnclavesEnclaveIdentifierStarlarkScripts)

}

type SuccessAsteriskResponse struct {
	Body io.Reader

	ContentType   string
	ContentLength int64
}

type GetEnclavesEnclaveIdentifierArtifactsRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
}

type GetEnclavesEnclaveIdentifierArtifactsResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierArtifactsResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierArtifacts200JSONResponse ListFilesArtifactNamesAndUuidsResponse

func (response GetEnclavesEnclaveIdentifierArtifacts200JSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *multipart.Reader
}

type PostEnclavesEnclaveIdentifierArtifactsLocalFileResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierArtifactsLocalFileResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierArtifactsLocalFile200JSONResponse map[string]UploadFilesArtifactResponse

func (response PostEnclavesEnclaveIdentifierArtifactsLocalFile200JSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsLocalFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *PutEnclavesEnclaveIdentifierArtifactsRemoteFileJSONRequestBody
}

type PutEnclavesEnclaveIdentifierArtifactsRemoteFileResponseObject interface {
	VisitPutEnclavesEnclaveIdentifierArtifactsRemoteFileResponse(w http.ResponseWriter) error
}

type PutEnclavesEnclaveIdentifierArtifactsRemoteFile200JSONResponse UploadFilesArtifactResponse

func (response PutEnclavesEnclaveIdentifierArtifactsRemoteFile200JSONResponse) VisitPutEnclavesEnclaveIdentifierArtifactsRemoteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier ServiceIdentifier `json:"service_identifier"`
	Body              *PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierJSONRequestBody
}

type PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponseObject interface {
	VisitPutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponse(w http.ResponseWriter) error
}

type PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier200JSONResponse UploadFilesArtifactResponse

func (response PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier200JSONResponse) VisitPutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject struct {
	EnclaveIdentifier  EnclaveIdentifier  `json:"enclave_identifier"`
	ArtifactIdentifier ArtifactIdentifier `json:"artifact_identifier"`
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier200JSONResponse InspectFilesArtifactContentsResponse

func (response GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier200JSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject struct {
	EnclaveIdentifier  EnclaveIdentifier  `json:"enclave_identifier"`
	ArtifactIdentifier ArtifactIdentifier `json:"artifact_identifier"`
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload200JSONResponse StreamedDataChunk

func (response GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload200JSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierServicesRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
}

type GetEnclavesEnclaveIdentifierServicesResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierServicesResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierServices200JSONResponse GetExistingAndHistoricalServiceIdentifiersResponse

func (response GetEnclavesEnclaveIdentifierServices200JSONResponse) VisitGetEnclavesEnclaveIdentifierServicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierServicesConnectionRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *PostEnclavesEnclaveIdentifierServicesConnectionJSONRequestBody
}

type PostEnclavesEnclaveIdentifierServicesConnectionResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierServicesConnectionResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierServicesConnection200JSONResponse ConnectServicesResponse

func (response PostEnclavesEnclaveIdentifierServicesConnection200JSONResponse) VisitPostEnclavesEnclaveIdentifierServicesConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier ServiceIdentifier `json:"service_identifier"`
	Params            GetEnclavesEnclaveIdentifierServicesServiceIdentifierParams
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifier200JSONResponse GetServicesResponse

func (response GetEnclavesEnclaveIdentifierServicesServiceIdentifier200JSONResponse) VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier ServiceIdentifier `json:"service_identifier"`
	Body              *PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandJSONRequestBody
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand200JSONResponse ExecCommandResponse

func (response PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand200JSONResponse) VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier ServiceIdentifier `json:"service_identifier"`
	PortNumber        PortNumber        `json:"port_number"`
	Body              *PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityJSONRequestBody
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability200AsteriskResponse struct{ SuccessAsteriskResponse }

func (response PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability200AsteriskResponse) VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetEnclavesEnclaveIdentifierStarlarkRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
}

type GetEnclavesEnclaveIdentifierStarlarkResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierStarlarkResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierStarlark200JSONResponse GetStarlarkRunResponse

func (response GetEnclavesEnclaveIdentifierStarlark200JSONResponse) VisitGetEnclavesEnclaveIdentifierStarlarkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *multipart.Reader
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierStarlarkPackagesResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierStarlarkPackages200AsteriskResponse struct{ SuccessAsteriskResponse }

func (response PostEnclavesEnclaveIdentifierStarlarkPackages200AsteriskResponse) VisitPostEnclavesEnclaveIdentifierStarlarkPackagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	PackageId         PackageId         `json:"package_id"`
	Body              *PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdJSONRequestBody
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId200JSONResponse StarlarkRunResponseLine

func (response PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId200JSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *PostEnclavesEnclaveIdentifierStarlarkScriptsJSONRequestBody
}

type PostEnclavesEnclaveIdentifierStarlarkScriptsResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierStarlarkScripts200JSONResponse StarlarkRunResponseLine

func (response PostEnclavesEnclaveIdentifierStarlarkScripts200JSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /enclaves/{enclave_identifier}/artifacts)
	GetEnclavesEnclaveIdentifierArtifacts(ctx context.Context, request GetEnclavesEnclaveIdentifierArtifactsRequestObject) (GetEnclavesEnclaveIdentifierArtifactsResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/artifacts/local-file)
	PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx context.Context, request PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject) (PostEnclavesEnclaveIdentifierArtifactsLocalFileResponseObject, error)

	// (PUT /enclaves/{enclave_identifier}/artifacts/remote-file)
	PutEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx context.Context, request PutEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject) (PutEnclavesEnclaveIdentifierArtifactsRemoteFileResponseObject, error)

	// (PUT /enclaves/{enclave_identifier}/artifacts/services/{service_identifier})
	PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx context.Context, request PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject) (PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier})
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx context.Context, request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject) (GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier}/download)
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx context.Context, request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject) (GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/services)
	GetEnclavesEnclaveIdentifierServices(ctx context.Context, request GetEnclavesEnclaveIdentifierServicesRequestObject) (GetEnclavesEnclaveIdentifierServicesResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/services/connection)
	PostEnclavesEnclaveIdentifierServicesConnection(ctx context.Context, request PostEnclavesEnclaveIdentifierServicesConnectionRequestObject) (PostEnclavesEnclaveIdentifierServicesConnectionResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/services/{service_identifier})
	GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx context.Context, request GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject) (GetEnclavesEnclaveIdentifierServicesServiceIdentifierResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/services/{service_identifier}/command)
	PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx context.Context, request PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject) (PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/services/{service_identifier}/endpoints/{port_number}/availability)
	PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx context.Context, request PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject) (PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/starlark)
	GetEnclavesEnclaveIdentifierStarlark(ctx context.Context, request GetEnclavesEnclaveIdentifierStarlarkRequestObject) (GetEnclavesEnclaveIdentifierStarlarkResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/starlark/packages)
	PostEnclavesEnclaveIdentifierStarlarkPackages(ctx context.Context, request PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject) (PostEnclavesEnclaveIdentifierStarlarkPackagesResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/starlark/packages/{package_id})
	PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx context.Context, request PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject) (PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/starlark/scripts)
	PostEnclavesEnclaveIdentifierStarlarkScripts(ctx context.Context, request PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject) (PostEnclavesEnclaveIdentifierStarlarkScriptsResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetEnclavesEnclaveIdentifierArtifacts operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierArtifacts(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request GetEnclavesEnclaveIdentifierArtifactsRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierArtifacts(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierArtifactsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierArtifacts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierArtifactsResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierArtifactsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierArtifactsLocalFile operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierArtifactsLocalFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierArtifactsLocalFileResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierArtifactsLocalFileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutEnclavesEnclaveIdentifierArtifactsRemoteFile operation middleware
func (sh *strictHandler) PutEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PutEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	var body PutEnclavesEnclaveIdentifierArtifactsRemoteFileJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx.Request().Context(), request.(PutEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutEnclavesEnclaveIdentifierArtifactsRemoteFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutEnclavesEnclaveIdentifierArtifactsRemoteFileResponseObject); ok {
		return validResponse.VisitPutEnclavesEnclaveIdentifierArtifactsRemoteFileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier operation middleware
func (sh *strictHandler) PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error {
	var request PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier

	var body PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx.Request().Context(), request.(PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponseObject); ok {
		return validResponse.VisitPutEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, artifactIdentifier ArtifactIdentifier) error {
	var request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ArtifactIdentifier = artifactIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, artifactIdentifier ArtifactIdentifier) error {
	var request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ArtifactIdentifier = artifactIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierServices operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierServices(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request GetEnclavesEnclaveIdentifierServicesRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierServices(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierServicesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierServices")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierServicesResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierServicesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierServicesConnection operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierServicesConnection(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierServicesConnectionRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	var body PostEnclavesEnclaveIdentifierServicesConnectionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierServicesConnection(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierServicesConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierServicesConnection")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierServicesConnectionResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierServicesConnectionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifier operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier, params GetEnclavesEnclaveIdentifierServicesServiceIdentifierParams) error {
	var request GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierServicesServiceIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierServicesServiceIdentifierResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error {
	var request PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier

	var body PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier, portNumber PortNumber) error {
	var request PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier
	request.PortNumber = portNumber

	var body PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierStarlark operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierStarlark(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request GetEnclavesEnclaveIdentifierStarlarkRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierStarlark(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierStarlarkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierStarlark")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierStarlarkResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierStarlarkResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierStarlarkPackages operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierStarlarkPackages(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierStarlarkPackages(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierStarlarkPackages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierStarlarkPackagesResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierStarlarkPackagesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, packageId PackageId) error {
	var request PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.PackageId = packageId

	var body PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierStarlarkScripts operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierStarlarkScripts(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	var body PostEnclavesEnclaveIdentifierStarlarkScriptsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierStarlarkScripts(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierStarlarkScripts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierStarlarkScriptsResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
