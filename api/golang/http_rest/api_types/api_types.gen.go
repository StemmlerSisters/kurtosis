// Package api_types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package api_types

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ApiContainerStatus.
const (
	ApiContainerStatusNONEXISTENT ApiContainerStatus = "NON_EXISTENT"
	ApiContainerStatusRUNNING     ApiContainerStatus = "RUNNING"
	ApiContainerStatusSTOPPED     ApiContainerStatus = "STOPPED"
)

// Defines values for Connect.
const (
	CONNECT   Connect = "CONNECT"
	NOCONNECT Connect = "NO_CONNECT"
)

// Defines values for ContainerStatus.
const (
	ContainerStatusRUNNING ContainerStatus = "RUNNING"
	ContainerStatusSTOPPED ContainerStatus = "STOPPED"
	ContainerStatusUNKNOWN ContainerStatus = "UNKNOWN"
)

// Defines values for EnclaveContainersStatus.
const (
	EnclaveContainersStatusEMPTY   EnclaveContainersStatus = "EMPTY"
	EnclaveContainersStatusRUNNING EnclaveContainersStatus = "RUNNING"
	EnclaveContainersStatusSTOPPED EnclaveContainersStatus = "STOPPED"
)

// Defines values for EnclaveMode.
const (
	PRODUCTION EnclaveMode = "PRODUCTION"
	TEST       EnclaveMode = "TEST"
)

// Defines values for EnclaveTargetStatus.
const (
	STOP EnclaveTargetStatus = "STOP"
)

// Defines values for HttpMethodAvailability.
const (
	GET  HttpMethodAvailability = "GET"
	POST HttpMethodAvailability = "POST"
)

// Defines values for ImageDownloadMode.
const (
	ImageDownloadModeALWAYS  ImageDownloadMode = "ALWAYS"
	ImageDownloadModeMISSING ImageDownloadMode = "MISSING"
)

// Defines values for KurtosisFeatureFlag.
const (
	NOINSTRUCTIONSCACHING KurtosisFeatureFlag = "NO_INSTRUCTIONS_CACHING"
)

// Defines values for LogLineOperator.
const (
	DOESCONTAINMATCHREGEX    LogLineOperator = "DOES_CONTAIN_MATCH_REGEX"
	DOESCONTAINTEXT          LogLineOperator = "DOES_CONTAIN_TEXT"
	DOESNOTCONTAINMATCHREGEX LogLineOperator = "DOES_NOT_CONTAIN_MATCH_REGEX"
	DOESNOTCONTAINTEXT       LogLineOperator = "DOES_NOT_CONTAIN_TEXT"
)

// Defines values for ResponseType.
const (
	ERROR   ResponseType = "ERROR"
	INFO    ResponseType = "INFO"
	WARNING ResponseType = "WARNING"
)

// Defines values for RestartPolicy.
const (
	RestartPolicyALWAYS RestartPolicy = "ALWAYS"
	RestartPolicyNEVER  RestartPolicy = "NEVER"
)

// Defines values for ServiceStatus.
const (
	ServiceStatusRUNNING ServiceStatus = "RUNNING"
	ServiceStatusSTOPPED ServiceStatus = "STOPPED"
	ServiceStatusUNKNOWN ServiceStatus = "UNKNOWN"
)

// Defines values for TransportProtocol.
const (
	SCTP TransportProtocol = "SCTP"
	TCP  TransportProtocol = "TCP"
	UDP  TransportProtocol = "UDP"
)

// ApiContainerStatus defines model for ApiContainerStatus.
type ApiContainerStatus string

// AsyncStarlarkExecutionLogs Use it to asynchronously retrieve the execution logs via Websockets or http streaming
type AsyncStarlarkExecutionLogs struct {
	// AsyncStarlarkExecutionLogs Execution UUID to asynchronously retrieve the execution logs
	AsyncStarlarkExecutionLogs struct {
		StarlarkExecutionUuid string `json:"starlark_execution_uuid"`
	} `json:"async_starlark_execution_logs"`
}

// Connect 0 - CONNECT // Best effort port forwarding
// 1 - NO_CONNECT // Port forwarding disabled
type Connect string

// Container defines model for Container.
type Container struct {
	CmdArgs        []string          `json:"cmd_args"`
	EntrypointArgs []string          `json:"entrypoint_args"`
	EnvVars        map[string]string `json:"env_vars"`
	ImageName      string            `json:"image_name"`

	// Status 0 - STOPPED
	// 1 - RUNNING
	// 2 - UNKNOWN
	Status ContainerStatus `json:"status"`
}

// ContainerStatus 0 - STOPPED
// 1 - RUNNING
// 2 - UNKNOWN
type ContainerStatus string

// CreateEnclave defines model for CreateEnclave.
type CreateEnclave struct {
	ApiContainerLogLevel   *string      `json:"api_container_log_level,omitempty"`
	ApiContainerVersionTag *string      `json:"api_container_version_tag,omitempty"`
	EnclaveName            *string      `json:"enclave_name,omitempty"`
	Mode                   *EnclaveMode `json:"mode,omitempty"`
}

// DeletionSummary defines model for DeletionSummary.
type DeletionSummary struct {
	RemovedEnclaveNameAndUuids *[]EnclaveNameAndUuid `json:"removed_enclave_name_and_uuids,omitempty"`
}

// EnclaveAPIContainerHostMachineInfo defines model for EnclaveAPIContainerHostMachineInfo.
type EnclaveAPIContainerHostMachineInfo struct {
	GrpcPortOnHostMachine int    `json:"grpc_port_on_host_machine"`
	IpOnHostMachine       string `json:"ip_on_host_machine"`
}

// EnclaveAPIContainerInfo defines model for EnclaveAPIContainerInfo.
type EnclaveAPIContainerInfo struct {
	BridgeIpAddress       string `json:"bridge_ip_address"`
	ContainerId           string `json:"container_id"`
	GrpcPortInsideEnclave int    `json:"grpc_port_inside_enclave"`
	IpInsideEnclave       string `json:"ip_inside_enclave"`
}

// EnclaveContainersStatus defines model for EnclaveContainersStatus.
type EnclaveContainersStatus string

// EnclaveIdentifiers defines model for EnclaveIdentifiers.
type EnclaveIdentifiers struct {
	EnclaveUuid   string `json:"enclave_uuid"`
	Name          string `json:"name"`
	ShortenedUuid string `json:"shortened_uuid"`
}

// EnclaveInfo defines model for EnclaveInfo.
type EnclaveInfo struct {
	ApiContainerHostMachineInfo *EnclaveAPIContainerHostMachineInfo `json:"api_container_host_machine_info,omitempty"`
	ApiContainerInfo            *EnclaveAPIContainerInfo            `json:"api_container_info,omitempty"`
	ApiContainerStatus          ApiContainerStatus                  `json:"api_container_status"`
	ContainersStatus            EnclaveContainersStatus             `json:"containers_status"`
	CreationTime                Timestamp                           `json:"creation_time"`
	EnclaveUuid                 string                              `json:"enclave_uuid"`
	Mode                        EnclaveMode                         `json:"mode"`
	Name                        string                              `json:"name"`
	ShortenedUuid               string                              `json:"shortened_uuid"`
}

// EnclaveMode defines model for EnclaveMode.
type EnclaveMode string

// EnclaveNameAndUuid defines model for EnclaveNameAndUuid.
type EnclaveNameAndUuid struct {
	Name string `json:"name"`
	Uuid string `json:"uuid"`
}

// EnclaveTargetStatus defines model for EnclaveTargetStatus.
type EnclaveTargetStatus string

// EngineInfo defines model for EngineInfo.
type EngineInfo struct {
	EngineVersion string `json:"engine_version"`
}

// ExecCommand Exec Command
type ExecCommand struct {
	CommandArgs []string `json:"command_args"`
}

// ExecCommandResult defines model for ExecCommandResult.
type ExecCommandResult struct {
	ExitCode int32 `json:"exit_code"`

	// LogOutput Assumes UTF-8 encoding
	LogOutput string `json:"log_output"`
}

// FileArtifactDescription defines model for FileArtifactDescription.
type FileArtifactDescription struct {
	// Path Path relative to the file artifact
	Path string `json:"path"`

	// Size Size of the file, in bytes
	Size int64 `json:"size"`

	// TextPreview A bit of text content, if the file allows (similar to UNIX's 'head')
	TextPreview *string `json:"text_preview,omitempty"`
}

// FileArtifactReference Files Artifact identifier
type FileArtifactReference struct {
	// Name UUID of the files artifact, for use when referencing it in the future
	Name string `json:"name"`

	// Uuid UUID of the files artifact, for use when referencing it in the future
	Uuid string `json:"uuid"`
}

// HttpMethodAvailability defines model for HttpMethodAvailability.
type HttpMethodAvailability string

// ImageDownloadMode 0 - ALWAYS
// 1 - MISSING
type ImageDownloadMode string

// KurtosisFeatureFlag 0 - NO_INSTRUCTIONS_CACHING
type KurtosisFeatureFlag string

// LogLine defines model for LogLine.
type LogLine struct {
	Line      []string  `json:"line"`
	Timestamp Timestamp `json:"timestamp"`
}

// LogLineFilter defines model for LogLineFilter.
type LogLineFilter struct {
	Operator    LogLineOperator `json:"operator"`
	TextPattern string          `json:"text_pattern"`
}

// LogLineOperator defines model for LogLineOperator.
type LogLineOperator string

// Port Shared Objects (Used By Multiple Endpoints)
type Port struct {
	ApplicationProtocol *string `json:"application_protocol,omitempty"`
	Number              int32   `json:"number"`

	// TransportProtocol 0 - TCP
	// 1 - SCTP
	// 2 - UDP
	TransportProtocol TransportProtocol `json:"transport_protocol"`

	// WaitTimeout The wait timeout duration in string
	WaitTimeout *string `json:"wait_timeout,omitempty"`
}

// ResponseInfo defines model for ResponseInfo.
type ResponseInfo struct {
	Code    uint32       `json:"code"`
	Message string       `json:"message"`
	Type    ResponseType `json:"type"`
}

// ResponseType defines model for ResponseType.
type ResponseType string

// RestartPolicy 0 - NEVER
// 1 - ALWAYS
type RestartPolicy string

// RunStarlarkPackage defines model for RunStarlarkPackage.
type RunStarlarkPackage struct {
	// ClonePackage Whether the package should be cloned or not.
	// If false, then the package will be pulled from the APIC local package store. If it's a local package then is must
	// have been uploaded using UploadStarlarkPackage prior to calling RunStarlarkPackage.
	// If true, then the package will be cloned from GitHub before execution starts
	ClonePackage *bool `json:"clone_package,omitempty"`

	// CloudInstanceId Defaults to empty
	CloudInstanceId *string `json:"cloud_instance_id,omitempty"`

	// CloudUserId Defaults to empty
	CloudUserId *string `json:"cloud_user_id,omitempty"`

	// DryRun Defaults to false
	DryRun               *bool                  `json:"dry_run,omitempty"`
	ExperimentalFeatures *[]KurtosisFeatureFlag `json:"experimental_features,omitempty"`

	// ImageDownloadMode 0 - ALWAYS
	// 1 - MISSING
	ImageDownloadMode *ImageDownloadMode `json:"image_download_mode,omitempty"`

	// Local the payload of the local module
	Local *[]byte `json:"local,omitempty"`

	// MainFunctionName The name of the main function, the default value is "run"
	MainFunctionName *string `json:"main_function_name,omitempty"`

	// Parallelism Defaults to 4
	Parallelism *int32 `json:"parallelism,omitempty"`

	// Params Parameters data for the Starlark package main function
	Params *map[string]interface{} `json:"params,omitempty"`

	// RelativePathToMainFile The relative main file filepath, the default value is the "main.star" file in the root of a package
	RelativePathToMainFile *string `json:"relative_path_to_main_file,omitempty"`

	// Remote just a flag to indicate the module must be cloned inside the API
	Remote *bool `json:"remote,omitempty"`
}

// RunStarlarkScript defines model for RunStarlarkScript.
type RunStarlarkScript struct {
	// CloudInstanceId Defaults to empty
	CloudInstanceId *string `json:"cloud_instance_id,omitempty"`

	// CloudUserId Defaults to empty
	CloudUserId *string `json:"cloud_user_id,omitempty"`

	// DryRun Defaults to false
	DryRun               *bool                  `json:"dry_run,omitempty"`
	ExperimentalFeatures *[]KurtosisFeatureFlag `json:"experimental_features,omitempty"`

	// ImageDownloadMode 0 - ALWAYS
	// 1 - MISSING
	ImageDownloadMode *ImageDownloadMode `json:"image_download_mode,omitempty"`

	// MainFunctionName The name of the main function, the default value is "run"
	MainFunctionName *string `json:"main_function_name,omitempty"`

	// Parallelism Defaults to 4
	Parallelism *int32 `json:"parallelism,omitempty"`

	// Params Parameters data for the Starlark package main function
	Params           *map[string]interface{} `json:"params,omitempty"`
	SerializedScript string                  `json:"serialized_script"`
}

// ServiceIdentifiers An service identifier is a collection of uuid, name and shortened uuid
type ServiceIdentifiers struct {
	// Name Name of the service
	Name string `json:"name"`

	// ServiceUuid UUID of the service
	ServiceUuid string `json:"service_uuid"`

	// ShortenedUuid The shortened uuid of the service
	ShortenedUuid string `json:"shortened_uuid"`
}

// ServiceInfo defines model for ServiceInfo.
type ServiceInfo struct {
	Container Container `json:"container"`

	// Name Name of the service
	Name string `json:"name"`

	// PrivateIpAddr The IP address of the service inside the enclave
	PrivateIpAddr string          `json:"private_ip_addr"`
	PrivatePorts  map[string]Port `json:"private_ports"`

	// PublicIpAddr Public IP address *outside* the enclave where the service is reachable
	// NOTE: Will be empty if the service isn't running, the service didn't define any ports, or the backend doesn't support reporting public service info
	PublicIpAddr *string          `json:"public_ip_addr,omitempty"`
	PublicPorts  *map[string]Port `json:"public_ports,omitempty"`

	// ServiceStatus 0 - STOPPED
	// 1 - RUNNING
	// 2 - UNKNOWN
	ServiceStatus ServiceStatus `json:"service_status"`

	// ServiceUuid UUID of the service
	ServiceUuid string `json:"service_uuid"`

	// ShortenedUuid Shortened uuid of the service
	ShortenedUuid string `json:"shortened_uuid"`
}

// ServiceLogs defines model for ServiceLogs.
type ServiceLogs struct {
	NotFoundServiceUuidSet   *[]string           `json:"not_found_service_uuid_set,omitempty"`
	ServiceLogsByServiceUuid *map[string]LogLine `json:"service_logs_by_service_uuid,omitempty"`
}

// ServiceStatus 0 - STOPPED
// 1 - RUNNING
// 2 - UNKNOWN
type ServiceStatus string

// StarlarkDescription defines model for StarlarkDescription.
type StarlarkDescription struct {
	ExperimentalFeatures   []KurtosisFeatureFlag `json:"experimental_features"`
	MainFunctionName       string                `json:"main_function_name"`
	PackageId              string                `json:"package_id"`
	Parallelism            int32                 `json:"parallelism"`
	RelativePathToMainFile string                `json:"relative_path_to_main_file"`

	// RestartPolicy 0 - NEVER
	// 1 - ALWAYS
	RestartPolicy    RestartPolicy `json:"restart_policy"`
	SerializedParams string        `json:"serialized_params"`
	SerializedScript string        `json:"serialized_script"`
}

// StarlarkError defines model for StarlarkError.
type StarlarkError struct {
	Error StarlarkError_Error `json:"error"`
}

// StarlarkError_Error defines model for StarlarkError.Error.
type StarlarkError_Error struct {
	union json.RawMessage
}

// StarlarkExecutionError defines model for StarlarkExecutionError.
type StarlarkExecutionError struct {
	ExecutionError struct {
		ErrorMessage string `json:"error_message"`
	} `json:"execution_error"`
}

// StarlarkInfo defines model for StarlarkInfo.
type StarlarkInfo struct {
	Info struct {
		Instruction struct {
			InfoMessage string `json:"info_message"`
		} `json:"instruction"`
	} `json:"info"`
}

// StarlarkInstruction defines model for StarlarkInstruction.
type StarlarkInstruction struct {
	Arguments             []StarlarkInstructionArgument `json:"arguments"`
	ExecutableInstruction string                        `json:"executable_instruction"`
	InstructionName       string                        `json:"instruction_name"`
	IsSkipped             bool                          `json:"is_skipped"`
	Position              StarlarkInstructionPosition   `json:"position"`
}

// StarlarkInstructionArgument defines model for StarlarkInstructionArgument.
type StarlarkInstructionArgument struct {
	ArgName            *string `json:"arg_name,omitempty"`
	IsRepresentative   bool    `json:"is_representative"`
	SerializedArgValue string  `json:"serialized_arg_value"`
}

// StarlarkInstructionPosition defines model for StarlarkInstructionPosition.
type StarlarkInstructionPosition struct {
	Column   int32  `json:"column"`
	Filename string `json:"filename"`
	Line     int32  `json:"line"`
}

// StarlarkInstructionResult defines model for StarlarkInstructionResult.
type StarlarkInstructionResult struct {
	InstructionResult struct {
		SerializedInstructionResult string `json:"serialized_instruction_result"`
	} `json:"instruction_result"`
}

// StarlarkInterpretationError defines model for StarlarkInterpretationError.
type StarlarkInterpretationError struct {
	InterpretationError struct {
		ErrorMessage string `json:"error_message"`
	} `json:"interpretation_error"`
}

// StarlarkRunFinishedEvent defines model for StarlarkRunFinishedEvent.
type StarlarkRunFinishedEvent struct {
	RunFinishedEvent struct {
		IsRunSuccessful  bool    `json:"is_run_successful"`
		SerializedOutput *string `json:"serialized_output,omitempty"`
	} `json:"run_finished_event"`
}

// StarlarkRunLogs Starlark Execution Logs
type StarlarkRunLogs = []StarlarkRunResponseLine

// StarlarkRunProgress defines model for StarlarkRunProgress.
type StarlarkRunProgress struct {
	ProgressInfo struct {
		CurrentStepInfo   []string `json:"current_step_info"`
		CurrentStepNumber int32    `json:"current_step_number"`
		TotalSteps        int32    `json:"total_steps"`
	} `json:"progress_info"`
}

// StarlarkRunResponse defines model for StarlarkRunResponse.
type StarlarkRunResponse struct {
	union json.RawMessage
}

// StarlarkRunResponseLine Starlark Execution Response
type StarlarkRunResponseLine struct {
	union json.RawMessage
}

// StarlarkValidationError defines model for StarlarkValidationError.
type StarlarkValidationError struct {
	ValidationError struct {
		ErrorMessage string `json:"error_message"`
	} `json:"validation_error"`
}

// StarlarkWarning defines model for StarlarkWarning.
type StarlarkWarning struct {
	Warning struct {
		WarningMessage string `json:"warning_message"`
	} `json:"warning"`
}

// StoreFilesArtifactFromService defines model for StoreFilesArtifactFromService.
type StoreFilesArtifactFromService struct {
	// Name The name of the files artifact
	Name string `json:"name"`

	// SourcePath The absolute source path where the source files will be copied from
	SourcePath string `json:"source_path"`
}

// StoreWebFilesArtifact Store Web Files Artifact
type StoreWebFilesArtifact struct {
	// Name The name of the files artifact
	Name string `json:"name"`

	// Url URL to download the artifact from
	Url string `json:"url"`
}

// Timestamp defines model for Timestamp.
type Timestamp = time.Time

// TransportProtocol 0 - TCP
// 1 - SCTP
// 2 - UDP
type TransportProtocol string

// ArtifactIdentifier defines model for artifact_identifier.
type ArtifactIdentifier = string

// ConjunctiveFilters defines model for conjunctive_filters.
type ConjunctiveFilters = []LogLineFilter

// EnclaveIdentifier defines model for enclave_identifier.
type EnclaveIdentifier = string

// ExpectedResponse defines model for expected_response.
type ExpectedResponse = string

// FollowLogs defines model for follow_logs.
type FollowLogs = bool

// HttpMethod defines model for http_method.
type HttpMethod = HttpMethodAvailability

// InitialDelayMilliseconds defines model for initial_delay_milliseconds.
type InitialDelayMilliseconds = int32

// NumLogLines defines model for num_log_lines.
type NumLogLines = int

// PackageId defines model for package_id.
type PackageId = string

// Path defines model for path.
type Path = string

// PortNumber defines model for port_number.
type PortNumber = int32

// RemoveAll defines model for remove_all.
type RemoveAll = bool

// RequestBody defines model for request_body.
type RequestBody = string

// Retries defines model for retries.
type Retries = int32

// RetriesDelayMilliseconds defines model for retries_delay_milliseconds.
type RetriesDelayMilliseconds = int32

// RetrieveLogsAsync defines model for retrieve_logs_async.
type RetrieveLogsAsync = bool

// ReturnAllLogs defines model for return_all_logs.
type ReturnAllLogs = bool

// ServiceIdentifier defines model for service_identifier.
type ServiceIdentifier = string

// ServiceUuidSet defines model for service_uuid_set.
type ServiceUuidSet = []string

// StarlarkExecutionUuid defines model for starlark_execution_uuid.
type StarlarkExecutionUuid = string

// AsStarlarkInterpretationError returns the union data inside the StarlarkError_Error as a StarlarkInterpretationError
func (t StarlarkError_Error) AsStarlarkInterpretationError() (StarlarkInterpretationError, error) {
	var body StarlarkInterpretationError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkInterpretationError overwrites any union data inside the StarlarkError_Error as the provided StarlarkInterpretationError
func (t *StarlarkError_Error) FromStarlarkInterpretationError(v StarlarkInterpretationError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkInterpretationError performs a merge with any union data inside the StarlarkError_Error, using the provided StarlarkInterpretationError
func (t *StarlarkError_Error) MergeStarlarkInterpretationError(v StarlarkInterpretationError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsStarlarkValidationError returns the union data inside the StarlarkError_Error as a StarlarkValidationError
func (t StarlarkError_Error) AsStarlarkValidationError() (StarlarkValidationError, error) {
	var body StarlarkValidationError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkValidationError overwrites any union data inside the StarlarkError_Error as the provided StarlarkValidationError
func (t *StarlarkError_Error) FromStarlarkValidationError(v StarlarkValidationError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkValidationError performs a merge with any union data inside the StarlarkError_Error, using the provided StarlarkValidationError
func (t *StarlarkError_Error) MergeStarlarkValidationError(v StarlarkValidationError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsStarlarkExecutionError returns the union data inside the StarlarkError_Error as a StarlarkExecutionError
func (t StarlarkError_Error) AsStarlarkExecutionError() (StarlarkExecutionError, error) {
	var body StarlarkExecutionError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkExecutionError overwrites any union data inside the StarlarkError_Error as the provided StarlarkExecutionError
func (t *StarlarkError_Error) FromStarlarkExecutionError(v StarlarkExecutionError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkExecutionError performs a merge with any union data inside the StarlarkError_Error, using the provided StarlarkExecutionError
func (t *StarlarkError_Error) MergeStarlarkExecutionError(v StarlarkExecutionError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t StarlarkError_Error) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StarlarkError_Error) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAsyncStarlarkExecutionLogs returns the union data inside the StarlarkRunResponse as a AsyncStarlarkExecutionLogs
func (t StarlarkRunResponse) AsAsyncStarlarkExecutionLogs() (AsyncStarlarkExecutionLogs, error) {
	var body AsyncStarlarkExecutionLogs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAsyncStarlarkExecutionLogs overwrites any union data inside the StarlarkRunResponse as the provided AsyncStarlarkExecutionLogs
func (t *StarlarkRunResponse) FromAsyncStarlarkExecutionLogs(v AsyncStarlarkExecutionLogs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAsyncStarlarkExecutionLogs performs a merge with any union data inside the StarlarkRunResponse, using the provided AsyncStarlarkExecutionLogs
func (t *StarlarkRunResponse) MergeAsyncStarlarkExecutionLogs(v AsyncStarlarkExecutionLogs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsStarlarkRunLogs returns the union data inside the StarlarkRunResponse as a StarlarkRunLogs
func (t StarlarkRunResponse) AsStarlarkRunLogs() (StarlarkRunLogs, error) {
	var body StarlarkRunLogs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkRunLogs overwrites any union data inside the StarlarkRunResponse as the provided StarlarkRunLogs
func (t *StarlarkRunResponse) FromStarlarkRunLogs(v StarlarkRunLogs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkRunLogs performs a merge with any union data inside the StarlarkRunResponse, using the provided StarlarkRunLogs
func (t *StarlarkRunResponse) MergeStarlarkRunLogs(v StarlarkRunLogs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t StarlarkRunResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StarlarkRunResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStarlarkInstruction returns the union data inside the StarlarkRunResponseLine as a StarlarkInstruction
func (t StarlarkRunResponseLine) AsStarlarkInstruction() (StarlarkInstruction, error) {
	var body StarlarkInstruction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkInstruction overwrites any union data inside the StarlarkRunResponseLine as the provided StarlarkInstruction
func (t *StarlarkRunResponseLine) FromStarlarkInstruction(v StarlarkInstruction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkInstruction performs a merge with any union data inside the StarlarkRunResponseLine, using the provided StarlarkInstruction
func (t *StarlarkRunResponseLine) MergeStarlarkInstruction(v StarlarkInstruction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsStarlarkError returns the union data inside the StarlarkRunResponseLine as a StarlarkError
func (t StarlarkRunResponseLine) AsStarlarkError() (StarlarkError, error) {
	var body StarlarkError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkError overwrites any union data inside the StarlarkRunResponseLine as the provided StarlarkError
func (t *StarlarkRunResponseLine) FromStarlarkError(v StarlarkError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkError performs a merge with any union data inside the StarlarkRunResponseLine, using the provided StarlarkError
func (t *StarlarkRunResponseLine) MergeStarlarkError(v StarlarkError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsStarlarkRunProgress returns the union data inside the StarlarkRunResponseLine as a StarlarkRunProgress
func (t StarlarkRunResponseLine) AsStarlarkRunProgress() (StarlarkRunProgress, error) {
	var body StarlarkRunProgress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkRunProgress overwrites any union data inside the StarlarkRunResponseLine as the provided StarlarkRunProgress
func (t *StarlarkRunResponseLine) FromStarlarkRunProgress(v StarlarkRunProgress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkRunProgress performs a merge with any union data inside the StarlarkRunResponseLine, using the provided StarlarkRunProgress
func (t *StarlarkRunResponseLine) MergeStarlarkRunProgress(v StarlarkRunProgress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsStarlarkInstructionResult returns the union data inside the StarlarkRunResponseLine as a StarlarkInstructionResult
func (t StarlarkRunResponseLine) AsStarlarkInstructionResult() (StarlarkInstructionResult, error) {
	var body StarlarkInstructionResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkInstructionResult overwrites any union data inside the StarlarkRunResponseLine as the provided StarlarkInstructionResult
func (t *StarlarkRunResponseLine) FromStarlarkInstructionResult(v StarlarkInstructionResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkInstructionResult performs a merge with any union data inside the StarlarkRunResponseLine, using the provided StarlarkInstructionResult
func (t *StarlarkRunResponseLine) MergeStarlarkInstructionResult(v StarlarkInstructionResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsStarlarkRunFinishedEvent returns the union data inside the StarlarkRunResponseLine as a StarlarkRunFinishedEvent
func (t StarlarkRunResponseLine) AsStarlarkRunFinishedEvent() (StarlarkRunFinishedEvent, error) {
	var body StarlarkRunFinishedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkRunFinishedEvent overwrites any union data inside the StarlarkRunResponseLine as the provided StarlarkRunFinishedEvent
func (t *StarlarkRunResponseLine) FromStarlarkRunFinishedEvent(v StarlarkRunFinishedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkRunFinishedEvent performs a merge with any union data inside the StarlarkRunResponseLine, using the provided StarlarkRunFinishedEvent
func (t *StarlarkRunResponseLine) MergeStarlarkRunFinishedEvent(v StarlarkRunFinishedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsStarlarkWarning returns the union data inside the StarlarkRunResponseLine as a StarlarkWarning
func (t StarlarkRunResponseLine) AsStarlarkWarning() (StarlarkWarning, error) {
	var body StarlarkWarning
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkWarning overwrites any union data inside the StarlarkRunResponseLine as the provided StarlarkWarning
func (t *StarlarkRunResponseLine) FromStarlarkWarning(v StarlarkWarning) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkWarning performs a merge with any union data inside the StarlarkRunResponseLine, using the provided StarlarkWarning
func (t *StarlarkRunResponseLine) MergeStarlarkWarning(v StarlarkWarning) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsStarlarkInfo returns the union data inside the StarlarkRunResponseLine as a StarlarkInfo
func (t StarlarkRunResponseLine) AsStarlarkInfo() (StarlarkInfo, error) {
	var body StarlarkInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkInfo overwrites any union data inside the StarlarkRunResponseLine as the provided StarlarkInfo
func (t *StarlarkRunResponseLine) FromStarlarkInfo(v StarlarkInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkInfo performs a merge with any union data inside the StarlarkRunResponseLine, using the provided StarlarkInfo
func (t *StarlarkRunResponseLine) MergeStarlarkInfo(v StarlarkInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t StarlarkRunResponseLine) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StarlarkRunResponseLine) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//6YRv9ydSQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
