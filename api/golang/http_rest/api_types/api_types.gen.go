// Package api_types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package api_types

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ApiContainerStatus.
const (
	ApiContainerStatusNONEXISTENT ApiContainerStatus = "NON_EXISTENT"
	ApiContainerStatusRUNNING     ApiContainerStatus = "RUNNING"
	ApiContainerStatusSTOPPED     ApiContainerStatus = "STOPPED"
)

// Defines values for Connect.
const (
	CONNECT   Connect = "CONNECT"
	NOCONNECT Connect = "NO_CONNECT"
)

// Defines values for ContainerStatus.
const (
	ContainerStatusRUNNING ContainerStatus = "RUNNING"
	ContainerStatusSTOPPED ContainerStatus = "STOPPED"
	ContainerStatusUNKNOWN ContainerStatus = "UNKNOWN"
)

// Defines values for EnclaveContainersStatus.
const (
	EnclaveContainersStatusEMPTY   EnclaveContainersStatus = "EMPTY"
	EnclaveContainersStatusRUNNING EnclaveContainersStatus = "RUNNING"
	EnclaveContainersStatusSTOPPED EnclaveContainersStatus = "STOPPED"
)

// Defines values for EnclaveMode.
const (
	PRODUCTION EnclaveMode = "PRODUCTION"
	TEST       EnclaveMode = "TEST"
)

// Defines values for EnclaveTargetStatus.
const (
	STOP EnclaveTargetStatus = "STOP"
)

// Defines values for HttpMethodAvailability.
const (
	GET  HttpMethodAvailability = "GET"
	POST HttpMethodAvailability = "POST"
)

// Defines values for ImageDownloadMode.
const (
	ImageDownloadModeALWAYS  ImageDownloadMode = "ALWAYS"
	ImageDownloadModeMISSING ImageDownloadMode = "MISSING"
)

// Defines values for KurtosisFeatureFlag.
const (
	NOINSTRUCTIONSCACHING KurtosisFeatureFlag = "NO_INSTRUCTIONS_CACHING"
)

// Defines values for LogLineOperator.
const (
	DOESCONTAINMATCHREGEX    LogLineOperator = "DOES_CONTAIN_MATCH_REGEX"
	DOESCONTAINTEXT          LogLineOperator = "DOES_CONTAIN_TEXT"
	DOESNOTCONTAINMATCHREGEX LogLineOperator = "DOES_NOT_CONTAIN_MATCH_REGEX"
	DOESNOTCONTAINTEXT       LogLineOperator = "DOES_NOT_CONTAIN_TEXT"
)

// Defines values for ResponseType.
const (
	ERROR   ResponseType = "ERROR"
	INFO    ResponseType = "INFO"
	WARNING ResponseType = "WARNING"
)

// Defines values for RestartPolicy.
const (
	RestartPolicyALWAYS RestartPolicy = "ALWAYS"
	RestartPolicyNEVER  RestartPolicy = "NEVER"
)

// Defines values for ServiceStatus.
const (
	ServiceStatusRUNNING ServiceStatus = "RUNNING"
	ServiceStatusSTOPPED ServiceStatus = "STOPPED"
	ServiceStatusUNKNOWN ServiceStatus = "UNKNOWN"
)

// Defines values for TransportProtocol.
const (
	SCTP TransportProtocol = "SCTP"
	TCP  TransportProtocol = "TCP"
	UDP  TransportProtocol = "UDP"
)

// ApiContainerStatus defines model for ApiContainerStatus.
type ApiContainerStatus string

// Connect 0 - CONNECT // Best effort port forwarding
// 1 - NO_CONNECT // Port forwarding disabled
type Connect string

// Container defines model for Container.
type Container struct {
	CmdArgs        []string          `json:"cmd_args"`
	EntrypointArgs []string          `json:"entrypoint_args"`
	EnvVars        map[string]string `json:"env_vars"`
	ImageName      string            `json:"image_name"`

	// Status 0 - STOPPED
	// 1 - RUNNING
	// 2 - UNKNOWN
	Status ContainerStatus `json:"status"`
}

// ContainerStatus 0 - STOPPED
// 1 - RUNNING
// 2 - UNKNOWN
type ContainerStatus string

// CreateEnclave defines model for CreateEnclave.
type CreateEnclave struct {
	ApiContainerLogLevel   *string      `json:"api_container_log_level,omitempty"`
	ApiContainerVersionTag *string      `json:"api_container_version_tag,omitempty"`
	EnclaveName            *string      `json:"enclave_name,omitempty"`
	Mode                   *EnclaveMode `json:"mode,omitempty"`
}

// DeletionSummary defines model for DeletionSummary.
type DeletionSummary struct {
	RemovedEnclaveNameAndUuids *[]EnclaveNameAndUuid `json:"removed_enclave_name_and_uuids,omitempty"`
}

// EnclaveAPIContainerHostMachineInfo defines model for EnclaveAPIContainerHostMachineInfo.
type EnclaveAPIContainerHostMachineInfo struct {
	GrpcPortOnHostMachine int    `json:"grpc_port_on_host_machine"`
	IpOnHostMachine       string `json:"ip_on_host_machine"`
}

// EnclaveAPIContainerInfo defines model for EnclaveAPIContainerInfo.
type EnclaveAPIContainerInfo struct {
	BridgeIpAddress       string `json:"bridge_ip_address"`
	ContainerId           string `json:"container_id"`
	GrpcPortInsideEnclave int    `json:"grpc_port_inside_enclave"`
	IpInsideEnclave       string `json:"ip_inside_enclave"`
}

// EnclaveContainersStatus defines model for EnclaveContainersStatus.
type EnclaveContainersStatus string

// EnclaveIdentifiers defines model for EnclaveIdentifiers.
type EnclaveIdentifiers struct {
	EnclaveUuid   string `json:"enclave_uuid"`
	Name          string `json:"name"`
	ShortenedUuid string `json:"shortened_uuid"`
}

// EnclaveInfo defines model for EnclaveInfo.
type EnclaveInfo struct {
	ApiContainerHostMachineInfo *EnclaveAPIContainerHostMachineInfo `json:"api_container_host_machine_info,omitempty"`
	ApiContainerInfo            *EnclaveAPIContainerInfo            `json:"api_container_info,omitempty"`
	ApiContainerStatus          ApiContainerStatus                  `json:"api_container_status"`
	ContainersStatus            EnclaveContainersStatus             `json:"containers_status"`
	CreationTime                Timestamp                           `json:"creation_time"`
	EnclaveUuid                 string                              `json:"enclave_uuid"`
	Mode                        EnclaveMode                         `json:"mode"`
	Name                        string                              `json:"name"`
	ShortenedUuid               string                              `json:"shortened_uuid"`
}

// EnclaveMode defines model for EnclaveMode.
type EnclaveMode string

// EnclaveNameAndUuid defines model for EnclaveNameAndUuid.
type EnclaveNameAndUuid struct {
	Name string `json:"name"`
	Uuid string `json:"uuid"`
}

// EnclaveTargetStatus defines model for EnclaveTargetStatus.
type EnclaveTargetStatus string

// EngineInfo defines model for EngineInfo.
type EngineInfo struct {
	EngineVersion string `json:"engine_version"`
}

// ExecCommand Exec Command
type ExecCommand struct {
	CommandArgs []string `json:"command_args"`
}

// ExecCommandResult defines model for ExecCommandResult.
type ExecCommandResult struct {
	ExitCode int32 `json:"exit_code"`

	// LogOutput Assumes UTF-8 encoding
	LogOutput string `json:"log_output"`
}

// FileArtifactDescription defines model for FileArtifactDescription.
type FileArtifactDescription struct {
	// Path Path relative to the file artifact
	Path string `json:"path"`

	// Size Size of the file, in bytes
	Size int64 `json:"size"`

	// TextPreview A bit of text content, if the file allows (similar to UNIX's 'head')
	TextPreview *string `json:"text_preview,omitempty"`
}

// FileArtifactReference Files Artifact identifier
type FileArtifactReference struct {
	// Name UUID of the files artifact, for use when referencing it in the future
	Name string `json:"name"`

	// Uuid UUID of the files artifact, for use when referencing it in the future
	Uuid string `json:"uuid"`
}

// HttpMethodAvailability defines model for HttpMethodAvailability.
type HttpMethodAvailability string

// ImageDownloadMode 0 - ALWAYS
// 1 - MISSING
type ImageDownloadMode string

// KurtosisFeatureFlag 0 - NO_INSTRUCTIONS_CACHING
type KurtosisFeatureFlag string

// LogLine defines model for LogLine.
type LogLine struct {
	Line      []string  `json:"line"`
	Timestamp Timestamp `json:"timestamp"`
}

// LogLineFilter defines model for LogLineFilter.
type LogLineFilter struct {
	Operator    LogLineOperator `json:"operator"`
	TextPattern string          `json:"text_pattern"`
}

// LogLineOperator defines model for LogLineOperator.
type LogLineOperator string

// Port Shared Objects (Used By Multiple Endpoints)
type Port struct {
	ApplicationProtocol *string `json:"application_protocol,omitempty"`
	Number              int32   `json:"number"`

	// TransportProtocol 0 - TCP
	// 1 - SCTP
	// 2 - UDP
	TransportProtocol TransportProtocol `json:"transport_protocol"`

	// WaitTimeout The wait timeout duration in string
	WaitTimeout *string `json:"wait_timeout,omitempty"`
}

// ResponseInfo defines model for ResponseInfo.
type ResponseInfo struct {
	Code    uint32       `json:"code"`
	Message string       `json:"message"`
	Type    ResponseType `json:"type"`
}

// ResponseType defines model for ResponseType.
type ResponseType string

// RestartPolicy 0 - NEVER
// 1 - ALWAYS
type RestartPolicy string

// RunStarlarkPackage defines model for RunStarlarkPackage.
type RunStarlarkPackage struct {
	// ClonePackage Whether the package should be cloned or not.
	// If false, then the package will be pulled from the APIC local package store. If it's a local package then is must
	// have been uploaded using UploadStarlarkPackage prior to calling RunStarlarkPackage.
	// If true, then the package will be cloned from GitHub before execution starts
	ClonePackage *bool `json:"clone_package,omitempty"`

	// CloudInstanceId Defaults to empty
	CloudInstanceId *string `json:"cloud_instance_id,omitempty"`

	// CloudUserId Defaults to empty
	CloudUserId *string `json:"cloud_user_id,omitempty"`

	// DryRun Defaults to false
	DryRun               *bool                  `json:"dry_run,omitempty"`
	ExperimentalFeatures *[]KurtosisFeatureFlag `json:"experimental_features,omitempty"`

	// ImageDownloadMode 0 - ALWAYS
	// 1 - MISSING
	ImageDownloadMode *ImageDownloadMode `json:"image_download_mode,omitempty"`

	// Local the payload of the local module
	Local *[]byte `json:"local,omitempty"`

	// MainFunctionName The name of the main function, the default value is "run"
	MainFunctionName *string `json:"main_function_name,omitempty"`

	// Parallelism Defaults to 4
	Parallelism *int32 `json:"parallelism,omitempty"`

	// Params Parameters data for the Starlark package main function
	Params *map[string]interface{} `json:"params,omitempty"`

	// RelativePathToMainFile The relative main file filepath, the default value is the "main.star" file in the root of a package
	RelativePathToMainFile *string `json:"relative_path_to_main_file,omitempty"`

	// Remote just a flag to indicate the module must be cloned inside the API
	Remote *bool `json:"remote,omitempty"`
}

// RunStarlarkScript defines model for RunStarlarkScript.
type RunStarlarkScript struct {
	// CloudInstanceId Defaults to empty
	CloudInstanceId *string `json:"cloud_instance_id,omitempty"`

	// CloudUserId Defaults to empty
	CloudUserId *string `json:"cloud_user_id,omitempty"`

	// DryRun Defaults to false
	DryRun               *bool                  `json:"dry_run,omitempty"`
	ExperimentalFeatures *[]KurtosisFeatureFlag `json:"experimental_features,omitempty"`

	// ImageDownloadMode 0 - ALWAYS
	// 1 - MISSING
	ImageDownloadMode *ImageDownloadMode `json:"image_download_mode,omitempty"`

	// MainFunctionName The name of the main function, the default value is "run"
	MainFunctionName *string `json:"main_function_name,omitempty"`

	// Parallelism Defaults to 4
	Parallelism *int32 `json:"parallelism,omitempty"`

	// Params Parameters data for the Starlark package main function
	Params           *map[string]interface{} `json:"params,omitempty"`
	SerializedScript string                  `json:"serialized_script"`
}

// ServiceIdentifiers An service identifier is a collection of uuid, name and shortened uuid
type ServiceIdentifiers struct {
	// Name Name of the service
	Name string `json:"name"`

	// ServiceUuid UUID of the service
	ServiceUuid string `json:"service_uuid"`

	// ShortenedUuid The shortened uuid of the service
	ShortenedUuid string `json:"shortened_uuid"`
}

// ServiceInfo defines model for ServiceInfo.
type ServiceInfo struct {
	Container Container `json:"container"`

	// Name Name of the service
	Name string `json:"name"`

	// PrivateIpAddr The IP address of the service inside the enclave
	PrivateIpAddr string          `json:"private_ip_addr"`
	PrivatePorts  map[string]Port `json:"private_ports"`

	// PublicIpAddr Public IP address *outside* the enclave where the service is reachable
	// NOTE: Will be empty if the service isn't running, the service didn't define any ports, or the backend doesn't support reporting public service info
	PublicIpAddr *string          `json:"public_ip_addr,omitempty"`
	PublicPorts  *map[string]Port `json:"public_ports,omitempty"`

	// ServiceStatus 0 - STOPPED
	// 1 - RUNNING
	// 2 - UNKNOWN
	ServiceStatus ServiceStatus `json:"service_status"`

	// ServiceUuid UUID of the service
	ServiceUuid string `json:"service_uuid"`

	// ShortenedUuid Shortened uuid of the service
	ShortenedUuid string `json:"shortened_uuid"`
}

// ServiceLogs defines model for ServiceLogs.
type ServiceLogs struct {
	NotFoundServiceUuidSet   *[]string           `json:"not_found_service_uuid_set,omitempty"`
	ServiceLogsByServiceUuid *map[string]LogLine `json:"service_logs_by_service_uuid,omitempty"`
}

// ServiceStatus 0 - STOPPED
// 1 - RUNNING
// 2 - UNKNOWN
type ServiceStatus string

// StarlarkDescription defines model for StarlarkDescription.
type StarlarkDescription struct {
	ExperimentalFeatures   []KurtosisFeatureFlag `json:"experimental_features"`
	MainFunctionName       string                `json:"main_function_name"`
	PackageId              string                `json:"package_id"`
	Parallelism            int32                 `json:"parallelism"`
	RelativePathToMainFile string                `json:"relative_path_to_main_file"`

	// RestartPolicy 0 - NEVER
	// 1 - ALWAYS
	RestartPolicy    RestartPolicy `json:"restart_policy"`
	SerializedParams string        `json:"serialized_params"`
	SerializedScript string        `json:"serialized_script"`
}

// StarlarkError defines model for StarlarkError.
type StarlarkError struct {
	Error StarlarkError_Error `json:"error"`
}

// StarlarkError_Error defines model for StarlarkError.Error.
type StarlarkError_Error struct {
	union json.RawMessage
}

// StarlarkExecutionError defines model for StarlarkExecutionError.
type StarlarkExecutionError struct {
	ExecutionError struct {
		ErrorMessage string `json:"error_message"`
	} `json:"execution_error"`
}

// StarlarkInfo defines model for StarlarkInfo.
type StarlarkInfo struct {
	Info struct {
		Instruction struct {
			InfoMessage string `json:"info_message"`
		} `json:"instruction"`
	} `json:"info"`
}

// StarlarkInstruction defines model for StarlarkInstruction.
type StarlarkInstruction struct {
	Arguments             []StarlarkInstructionArgument `json:"arguments"`
	ExecutableInstruction string                        `json:"executable_instruction"`
	InstructionName       string                        `json:"instruction_name"`
	IsSkipped             bool                          `json:"is_skipped"`
	Position              StarlarkInstructionPosition   `json:"position"`
}

// StarlarkInstructionArgument defines model for StarlarkInstructionArgument.
type StarlarkInstructionArgument struct {
	ArgName            *string `json:"arg_name,omitempty"`
	IsRepresentative   bool    `json:"is_representative"`
	SerializedArgValue string  `json:"serialized_arg_value"`
}

// StarlarkInstructionPosition defines model for StarlarkInstructionPosition.
type StarlarkInstructionPosition struct {
	Column   int32  `json:"column"`
	Filename string `json:"filename"`
	Line     int32  `json:"line"`
}

// StarlarkInstructionResult defines model for StarlarkInstructionResult.
type StarlarkInstructionResult struct {
	InstructionResult struct {
		SerializedInstructionResult string `json:"serialized_instruction_result"`
	} `json:"instruction_result"`
}

// StarlarkInterpretationError defines model for StarlarkInterpretationError.
type StarlarkInterpretationError struct {
	InterpretationError struct {
		ErrorMessage string `json:"error_message"`
	} `json:"interpretation_error"`
}

// StarlarkRunFinishedEvent defines model for StarlarkRunFinishedEvent.
type StarlarkRunFinishedEvent struct {
	RunFinishedEvent struct {
		IsRunSuccessful  bool   `json:"is_run_successful"`
		SerializedOutput string `json:"serialized_output"`
	} `json:"run_finished_event"`
}

// StarlarkRunProgress defines model for StarlarkRunProgress.
type StarlarkRunProgress struct {
	ProgressInfo struct {
		CurrentStepInfo   []string `json:"current_step_info"`
		CurrentStepNumber int32    `json:"current_step_number"`
		TotalSteps        int32    `json:"total_steps"`
	} `json:"progress_info"`
}

// StarlarkRunResponseLine Starlark Execution Response
type StarlarkRunResponseLine struct {
	union json.RawMessage
}

// StarlarkValidationError defines model for StarlarkValidationError.
type StarlarkValidationError struct {
	ValidationError struct {
		ErrorMessage string `json:"error_message"`
	} `json:"validation_error"`
}

// StarlarkWarning defines model for StarlarkWarning.
type StarlarkWarning struct {
	Warning struct {
		WarningMessage string `json:"warning_message"`
	} `json:"warning"`
}

// StoreFilesArtifactFromService defines model for StoreFilesArtifactFromService.
type StoreFilesArtifactFromService struct {
	// Name The name of the files artifact
	Name string `json:"name"`

	// SourcePath The absolute source path where the source files will be copied from
	SourcePath string `json:"source_path"`
}

// StoreWebFilesArtifact Store Web Files Artifact
type StoreWebFilesArtifact struct {
	// Name The name of the files artifact
	Name string `json:"name"`

	// Url URL to download the artifact from
	Url string `json:"url"`
}

// Timestamp defines model for Timestamp.
type Timestamp = time.Time

// TransportProtocol 0 - TCP
// 1 - SCTP
// 2 - UDP
type TransportProtocol string

// ArtifactIdentifier defines model for artifact_identifier.
type ArtifactIdentifier = string

// ConjunctiveFilters defines model for conjunctive_filters.
type ConjunctiveFilters = []LogLineFilter

// EnclaveIdentifier defines model for enclave_identifier.
type EnclaveIdentifier = string

// ExpectedResponse defines model for expected_response.
type ExpectedResponse = string

// FollowLogs defines model for follow_logs.
type FollowLogs = bool

// HttpMethod defines model for http_method.
type HttpMethod = HttpMethodAvailability

// InitialDelayMilliseconds defines model for initial_delay_milliseconds.
type InitialDelayMilliseconds = int32

// NumLogLines defines model for num_log_lines.
type NumLogLines = int

// PackageId defines model for package_id.
type PackageId = string

// Path defines model for path.
type Path = string

// PortNumber defines model for port_number.
type PortNumber = int32

// RemoveAll defines model for remove_all.
type RemoveAll = bool

// RequestBody defines model for request_body.
type RequestBody = string

// Retries defines model for retries.
type Retries = int32

// RetriesDelayMilliseconds defines model for retries_delay_milliseconds.
type RetriesDelayMilliseconds = int32

// ReturnAllLogs defines model for return_all_logs.
type ReturnAllLogs = bool

// ServiceIdentifier defines model for service_identifier.
type ServiceIdentifier = string

// ServiceUuidSet defines model for service_uuid_set.
type ServiceUuidSet = []string

// AsStarlarkInterpretationError returns the union data inside the StarlarkError_Error as a StarlarkInterpretationError
func (t StarlarkError_Error) AsStarlarkInterpretationError() (StarlarkInterpretationError, error) {
	var body StarlarkInterpretationError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkInterpretationError overwrites any union data inside the StarlarkError_Error as the provided StarlarkInterpretationError
func (t *StarlarkError_Error) FromStarlarkInterpretationError(v StarlarkInterpretationError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkInterpretationError performs a merge with any union data inside the StarlarkError_Error, using the provided StarlarkInterpretationError
func (t *StarlarkError_Error) MergeStarlarkInterpretationError(v StarlarkInterpretationError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsStarlarkValidationError returns the union data inside the StarlarkError_Error as a StarlarkValidationError
func (t StarlarkError_Error) AsStarlarkValidationError() (StarlarkValidationError, error) {
	var body StarlarkValidationError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkValidationError overwrites any union data inside the StarlarkError_Error as the provided StarlarkValidationError
func (t *StarlarkError_Error) FromStarlarkValidationError(v StarlarkValidationError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkValidationError performs a merge with any union data inside the StarlarkError_Error, using the provided StarlarkValidationError
func (t *StarlarkError_Error) MergeStarlarkValidationError(v StarlarkValidationError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsStarlarkExecutionError returns the union data inside the StarlarkError_Error as a StarlarkExecutionError
func (t StarlarkError_Error) AsStarlarkExecutionError() (StarlarkExecutionError, error) {
	var body StarlarkExecutionError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkExecutionError overwrites any union data inside the StarlarkError_Error as the provided StarlarkExecutionError
func (t *StarlarkError_Error) FromStarlarkExecutionError(v StarlarkExecutionError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkExecutionError performs a merge with any union data inside the StarlarkError_Error, using the provided StarlarkExecutionError
func (t *StarlarkError_Error) MergeStarlarkExecutionError(v StarlarkExecutionError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t StarlarkError_Error) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StarlarkError_Error) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStarlarkInstruction returns the union data inside the StarlarkRunResponseLine as a StarlarkInstruction
func (t StarlarkRunResponseLine) AsStarlarkInstruction() (StarlarkInstruction, error) {
	var body StarlarkInstruction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkInstruction overwrites any union data inside the StarlarkRunResponseLine as the provided StarlarkInstruction
func (t *StarlarkRunResponseLine) FromStarlarkInstruction(v StarlarkInstruction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkInstruction performs a merge with any union data inside the StarlarkRunResponseLine, using the provided StarlarkInstruction
func (t *StarlarkRunResponseLine) MergeStarlarkInstruction(v StarlarkInstruction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsStarlarkError returns the union data inside the StarlarkRunResponseLine as a StarlarkError
func (t StarlarkRunResponseLine) AsStarlarkError() (StarlarkError, error) {
	var body StarlarkError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkError overwrites any union data inside the StarlarkRunResponseLine as the provided StarlarkError
func (t *StarlarkRunResponseLine) FromStarlarkError(v StarlarkError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkError performs a merge with any union data inside the StarlarkRunResponseLine, using the provided StarlarkError
func (t *StarlarkRunResponseLine) MergeStarlarkError(v StarlarkError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsStarlarkRunProgress returns the union data inside the StarlarkRunResponseLine as a StarlarkRunProgress
func (t StarlarkRunResponseLine) AsStarlarkRunProgress() (StarlarkRunProgress, error) {
	var body StarlarkRunProgress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkRunProgress overwrites any union data inside the StarlarkRunResponseLine as the provided StarlarkRunProgress
func (t *StarlarkRunResponseLine) FromStarlarkRunProgress(v StarlarkRunProgress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkRunProgress performs a merge with any union data inside the StarlarkRunResponseLine, using the provided StarlarkRunProgress
func (t *StarlarkRunResponseLine) MergeStarlarkRunProgress(v StarlarkRunProgress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsStarlarkInstructionResult returns the union data inside the StarlarkRunResponseLine as a StarlarkInstructionResult
func (t StarlarkRunResponseLine) AsStarlarkInstructionResult() (StarlarkInstructionResult, error) {
	var body StarlarkInstructionResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkInstructionResult overwrites any union data inside the StarlarkRunResponseLine as the provided StarlarkInstructionResult
func (t *StarlarkRunResponseLine) FromStarlarkInstructionResult(v StarlarkInstructionResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkInstructionResult performs a merge with any union data inside the StarlarkRunResponseLine, using the provided StarlarkInstructionResult
func (t *StarlarkRunResponseLine) MergeStarlarkInstructionResult(v StarlarkInstructionResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsStarlarkRunFinishedEvent returns the union data inside the StarlarkRunResponseLine as a StarlarkRunFinishedEvent
func (t StarlarkRunResponseLine) AsStarlarkRunFinishedEvent() (StarlarkRunFinishedEvent, error) {
	var body StarlarkRunFinishedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkRunFinishedEvent overwrites any union data inside the StarlarkRunResponseLine as the provided StarlarkRunFinishedEvent
func (t *StarlarkRunResponseLine) FromStarlarkRunFinishedEvent(v StarlarkRunFinishedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkRunFinishedEvent performs a merge with any union data inside the StarlarkRunResponseLine, using the provided StarlarkRunFinishedEvent
func (t *StarlarkRunResponseLine) MergeStarlarkRunFinishedEvent(v StarlarkRunFinishedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsStarlarkWarning returns the union data inside the StarlarkRunResponseLine as a StarlarkWarning
func (t StarlarkRunResponseLine) AsStarlarkWarning() (StarlarkWarning, error) {
	var body StarlarkWarning
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkWarning overwrites any union data inside the StarlarkRunResponseLine as the provided StarlarkWarning
func (t *StarlarkRunResponseLine) FromStarlarkWarning(v StarlarkWarning) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkWarning performs a merge with any union data inside the StarlarkRunResponseLine, using the provided StarlarkWarning
func (t *StarlarkRunResponseLine) MergeStarlarkWarning(v StarlarkWarning) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsStarlarkInfo returns the union data inside the StarlarkRunResponseLine as a StarlarkInfo
func (t StarlarkRunResponseLine) AsStarlarkInfo() (StarlarkInfo, error) {
	var body StarlarkInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStarlarkInfo overwrites any union data inside the StarlarkRunResponseLine as the provided StarlarkInfo
func (t *StarlarkRunResponseLine) FromStarlarkInfo(v StarlarkInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStarlarkInfo performs a merge with any union data inside the StarlarkRunResponseLine, using the provided StarlarkInfo
func (t *StarlarkRunResponseLine) MergeStarlarkInfo(v StarlarkInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t StarlarkRunResponseLine) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StarlarkRunResponseLine) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
