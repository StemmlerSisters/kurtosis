// Package websocket_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package websocket_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	. "github.com/kurtosis-tech/kurtosis/api/golang/http_rest/api_types"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Service Logs
	// (GET /enclaves/{enclave_identifier}/logs)
	GetEnclavesEnclaveIdentifierLogs(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, params GetEnclavesEnclaveIdentifierLogsParams) error
	// Get Service Logs
	// (GET /enclaves/{enclave_identifier}/services/{service_identifier}/logs)
	GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier, params GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogsParams) error

	// (GET /enclaves/{enclave_identifier}/starlark/executions/{starlark_execution_uuid}/logs)
	GetEnclavesEnclaveIdentifierStarlarkExecutionsStarlarkExecutionUuidLogs(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, starlarkExecutionUuid StarlarkExecutionUuid) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetEnclavesEnclaveIdentifierLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnclavesEnclaveIdentifierLogsParams
	// ------------- Required query parameter "service_uuid_set" -------------

	err = runtime.BindQueryParameter("form", true, true, "service_uuid_set", ctx.QueryParams(), &params.ServiceUuidSet)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_uuid_set: %s", err))
	}

	// ------------- Optional query parameter "follow_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow_logs", ctx.QueryParams(), &params.FollowLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow_logs: %s", err))
	}

	// ------------- Optional query parameter "conjunctive_filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "conjunctive_filters", ctx.QueryParams(), &params.ConjunctiveFilters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter conjunctive_filters: %s", err))
	}

	// ------------- Optional query parameter "return_all_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "return_all_logs", ctx.QueryParams(), &params.ReturnAllLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter return_all_logs: %s", err))
	}

	// ------------- Optional query parameter "num_log_lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "num_log_lines", ctx.QueryParams(), &params.NumLogLines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter num_log_lines: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierLogs(ctx, enclaveIdentifier, params)
	return err
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogsParams
	// ------------- Optional query parameter "follow_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow_logs", ctx.QueryParams(), &params.FollowLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow_logs: %s", err))
	}

	// ------------- Optional query parameter "conjunctive_filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "conjunctive_filters", ctx.QueryParams(), &params.ConjunctiveFilters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter conjunctive_filters: %s", err))
	}

	// ------------- Optional query parameter "return_all_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "return_all_logs", ctx.QueryParams(), &params.ReturnAllLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter return_all_logs: %s", err))
	}

	// ------------- Optional query parameter "num_log_lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "num_log_lines", ctx.QueryParams(), &params.NumLogLines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter num_log_lines: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs(ctx, enclaveIdentifier, serviceIdentifier, params)
	return err
}

// GetEnclavesEnclaveIdentifierStarlarkExecutionsStarlarkExecutionUuidLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierStarlarkExecutionsStarlarkExecutionUuidLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "starlark_execution_uuid" -------------
	var starlarkExecutionUuid StarlarkExecutionUuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "starlark_execution_uuid", runtime.ParamLocationPath, ctx.Param("starlark_execution_uuid"), &starlarkExecutionUuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter starlark_execution_uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierStarlarkExecutionsStarlarkExecutionUuidLogs(ctx, enclaveIdentifier, starlarkExecutionUuid)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/enclaves/:enclave_identifier/logs", wrapper.GetEnclavesEnclaveIdentifierLogs)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier/logs", wrapper.GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs)
	router.GET(baseURL+"/enclaves/:enclave_identifier/starlark/executions/:starlark_execution_uuid/logs", wrapper.GetEnclavesEnclaveIdentifierStarlarkExecutionsStarlarkExecutionUuidLogs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4/HvAAAA//+SqAa/FyMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
