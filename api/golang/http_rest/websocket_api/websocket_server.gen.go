// Package websocket_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package websocket_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	. "github.com/kurtosis-tech/kurtosis/api/golang/http_rest/api_types"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get enclave's services logs
	// (GET /enclaves/{enclave_identifier}/logs)
	GetEnclavesEnclaveIdentifierLogs(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, params GetEnclavesEnclaveIdentifierLogsParams) error
	// Get service logs
	// (GET /enclaves/{enclave_identifier}/services/{service_identifier}/logs)
	GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier, params GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogsParams) error
	// Get Starlark execution logs
	// (GET /starlark/executions/{starlark_execution_uuid}/logs)
	GetStarlarkExecutionsStarlarkExecutionUuidLogs(ctx echo.Context, starlarkExecutionUuid StarlarkExecutionUuid) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetEnclavesEnclaveIdentifierLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnclavesEnclaveIdentifierLogsParams
	// ------------- Required query parameter "service_uuid_set" -------------

	err = runtime.BindQueryParameter("form", true, true, "service_uuid_set", ctx.QueryParams(), &params.ServiceUuidSet)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_uuid_set: %s", err))
	}

	// ------------- Optional query parameter "follow_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow_logs", ctx.QueryParams(), &params.FollowLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow_logs: %s", err))
	}

	// ------------- Optional query parameter "conjunctive_filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "conjunctive_filters", ctx.QueryParams(), &params.ConjunctiveFilters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter conjunctive_filters: %s", err))
	}

	// ------------- Optional query parameter "return_all_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "return_all_logs", ctx.QueryParams(), &params.ReturnAllLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter return_all_logs: %s", err))
	}

	// ------------- Optional query parameter "num_log_lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "num_log_lines", ctx.QueryParams(), &params.NumLogLines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter num_log_lines: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierLogs(ctx, enclaveIdentifier, params)
	return err
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogsParams
	// ------------- Optional query parameter "follow_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow_logs", ctx.QueryParams(), &params.FollowLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow_logs: %s", err))
	}

	// ------------- Optional query parameter "conjunctive_filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "conjunctive_filters", ctx.QueryParams(), &params.ConjunctiveFilters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter conjunctive_filters: %s", err))
	}

	// ------------- Optional query parameter "return_all_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "return_all_logs", ctx.QueryParams(), &params.ReturnAllLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter return_all_logs: %s", err))
	}

	// ------------- Optional query parameter "num_log_lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "num_log_lines", ctx.QueryParams(), &params.NumLogLines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter num_log_lines: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs(ctx, enclaveIdentifier, serviceIdentifier, params)
	return err
}

// GetStarlarkExecutionsStarlarkExecutionUuidLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetStarlarkExecutionsStarlarkExecutionUuidLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "starlark_execution_uuid" -------------
	var starlarkExecutionUuid StarlarkExecutionUuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "starlark_execution_uuid", runtime.ParamLocationPath, ctx.Param("starlark_execution_uuid"), &starlarkExecutionUuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter starlark_execution_uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStarlarkExecutionsStarlarkExecutionUuidLogs(ctx, starlarkExecutionUuid)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/enclaves/:enclave_identifier/logs", wrapper.GetEnclavesEnclaveIdentifierLogs)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier/logs", wrapper.GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs)
	router.GET(baseURL+"/starlark/executions/:starlark_execution_uuid/logs", wrapper.GetStarlarkExecutionsStarlarkExecutionUuidLogs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
