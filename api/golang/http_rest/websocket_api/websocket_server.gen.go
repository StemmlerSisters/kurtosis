// Package websocket_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package websocket_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	. "github.com/kurtosis-tech/kurtosis/api/golang/http_rest/api_types"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get enclave logs
	// (GET /enclaves/{enclave_identifier}/logs)
	GetEnclavesEnclaveIdentifierLogs(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, params GetEnclavesEnclaveIdentifierLogsParams) error
	// Get service logs
	// (GET /enclaves/{enclave_identifier}/services/{service_identifier}/logs)
	GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier, params GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogsParams) error
	// Get Starlark execution logs
	// (GET /starlark/executions/{starlark_execution_uuid}/logs)
	GetStarlarkExecutionsStarlarkExecutionUuidLogs(ctx echo.Context, starlarkExecutionUuid StarlarkExecutionUuid) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetEnclavesEnclaveIdentifierLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnclavesEnclaveIdentifierLogsParams
	// ------------- Required query parameter "service_uuid_set" -------------

	err = runtime.BindQueryParameter("form", true, true, "service_uuid_set", ctx.QueryParams(), &params.ServiceUuidSet)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_uuid_set: %s", err))
	}

	// ------------- Optional query parameter "follow_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow_logs", ctx.QueryParams(), &params.FollowLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow_logs: %s", err))
	}

	// ------------- Optional query parameter "conjunctive_filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "conjunctive_filters", ctx.QueryParams(), &params.ConjunctiveFilters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter conjunctive_filters: %s", err))
	}

	// ------------- Optional query parameter "return_all_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "return_all_logs", ctx.QueryParams(), &params.ReturnAllLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter return_all_logs: %s", err))
	}

	// ------------- Optional query parameter "num_log_lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "num_log_lines", ctx.QueryParams(), &params.NumLogLines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter num_log_lines: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierLogs(ctx, enclaveIdentifier, params)
	return err
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogsParams
	// ------------- Optional query parameter "follow_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow_logs", ctx.QueryParams(), &params.FollowLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow_logs: %s", err))
	}

	// ------------- Optional query parameter "conjunctive_filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "conjunctive_filters", ctx.QueryParams(), &params.ConjunctiveFilters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter conjunctive_filters: %s", err))
	}

	// ------------- Optional query parameter "return_all_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "return_all_logs", ctx.QueryParams(), &params.ReturnAllLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter return_all_logs: %s", err))
	}

	// ------------- Optional query parameter "num_log_lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "num_log_lines", ctx.QueryParams(), &params.NumLogLines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter num_log_lines: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs(ctx, enclaveIdentifier, serviceIdentifier, params)
	return err
}

// GetStarlarkExecutionsStarlarkExecutionUuidLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetStarlarkExecutionsStarlarkExecutionUuidLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "starlark_execution_uuid" -------------
	var starlarkExecutionUuid StarlarkExecutionUuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "starlark_execution_uuid", runtime.ParamLocationPath, ctx.Param("starlark_execution_uuid"), &starlarkExecutionUuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter starlark_execution_uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStarlarkExecutionsStarlarkExecutionUuidLogs(ctx, starlarkExecutionUuid)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/enclaves/:enclave_identifier/logs", wrapper.GetEnclavesEnclaveIdentifierLogs)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier/logs", wrapper.GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs)
	router.GET(baseURL+"/starlark/executions/:starlark_execution_uuid/logs", wrapper.GetStarlarkExecutionsStarlarkExecutionUuidLogs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///HXnYVZiUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
