// Package core_rest_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package core_rest_api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kurtosis-tech/kurtosis/api/golang/http_rest/api_types"
	"github.com/labstack/echo/v4"
)

// NotOk defines model for NotOk.
type NotOk = externalRef0.ResponseInfo

// PostEnclavesEnclaveIdentifierArtifactsLocalFileMultipartBody defines parameters for PostEnclavesEnclaveIdentifierArtifactsLocalFile.
type PostEnclavesEnclaveIdentifierArtifactsLocalFileMultipartBody = openapi_types.File

// GetEnclavesEnclaveIdentifierServicesParams defines parameters for GetEnclavesEnclaveIdentifierServices.
type GetEnclavesEnclaveIdentifierServicesParams struct {
	// Services Select services to get information
	Services *[]string `form:"services,omitempty" json:"services,omitempty"`
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityParams defines parameters for GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability.
type GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityParams struct {
	// HttpMethod The HTTP method used to check availability. Default is GET.
	HttpMethod *externalRef0.HttpMethod `form:"http_method,omitempty" json:"http_method,omitempty"`

	// Path The path of the service to check. It mustn't start with the first slash. For instance `service/health`
	Path *externalRef0.Path `form:"path,omitempty" json:"path,omitempty"`

	// InitialDelayMilliseconds The number of milliseconds to wait until executing the first HTTP call
	InitialDelayMilliseconds *externalRef0.InitialDelayMilliseconds `form:"initial_delay_milliseconds,omitempty" json:"initial_delay_milliseconds,omitempty"`

	// Retries Max number of HTTP call attempts that this will execute until giving up and returning an error
	Retries *externalRef0.Retries `form:"retries,omitempty" json:"retries,omitempty"`

	// RetriesDelayMilliseconds Number of milliseconds to wait between retries
	RetriesDelayMilliseconds *externalRef0.RetriesDelayMilliseconds `form:"retries_delay_milliseconds,omitempty" json:"retries_delay_milliseconds,omitempty"`

	// ExpectedResponse If the endpoint returns this value, the service will be marked as available (e.g. Hello World).
	ExpectedResponse *externalRef0.ExpectedResponse `form:"expected_response,omitempty" json:"expected_response,omitempty"`

	// RequestBody If the http_method is set to POST, this value will be send as the body of the availability request.
	RequestBody *externalRef0.RequestBody `form:"request_body,omitempty" json:"request_body,omitempty"`
}

// PostEnclavesEnclaveIdentifierStarlarkPackagesMultipartBody defines parameters for PostEnclavesEnclaveIdentifierStarlarkPackages.
type PostEnclavesEnclaveIdentifierStarlarkPackagesMultipartBody = openapi_types.File

// PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdParams defines parameters for PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId.
type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdParams struct {
	// RetrieveLogsAsync If false, block http response until all logs are available. Default is true
	RetrieveLogsAsync *externalRef0.RetrieveLogsAsync `form:"retrieve_logs_async,omitempty" json:"retrieve_logs_async,omitempty"`
}

// PostEnclavesEnclaveIdentifierStarlarkScriptsParams defines parameters for PostEnclavesEnclaveIdentifierStarlarkScripts.
type PostEnclavesEnclaveIdentifierStarlarkScriptsParams struct {
	// RetrieveLogsAsync If false, block http response until all logs are available. Default is true
	RetrieveLogsAsync *externalRef0.RetrieveLogsAsync `form:"retrieve_logs_async,omitempty" json:"retrieve_logs_async,omitempty"`
}

// PostEnclavesEnclaveIdentifierArtifactsLocalFileMultipartRequestBody defines body for PostEnclavesEnclaveIdentifierArtifactsLocalFile for multipart/form-data ContentType.
type PostEnclavesEnclaveIdentifierArtifactsLocalFileMultipartRequestBody = PostEnclavesEnclaveIdentifierArtifactsLocalFileMultipartBody

// PostEnclavesEnclaveIdentifierArtifactsRemoteFileJSONRequestBody defines body for PostEnclavesEnclaveIdentifierArtifactsRemoteFile for application/json ContentType.
type PostEnclavesEnclaveIdentifierArtifactsRemoteFileJSONRequestBody = externalRef0.StoreWebFilesArtifact

// PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierJSONRequestBody defines body for PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier for application/json ContentType.
type PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierJSONRequestBody = externalRef0.StoreFilesArtifactFromService

// PostEnclavesEnclaveIdentifierServicesConnectionJSONRequestBody defines body for PostEnclavesEnclaveIdentifierServicesConnection for application/json ContentType.
type PostEnclavesEnclaveIdentifierServicesConnectionJSONRequestBody = externalRef0.Connect

// PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandJSONRequestBody defines body for PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand for application/json ContentType.
type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandJSONRequestBody = externalRef0.ExecCommand

// PostEnclavesEnclaveIdentifierStarlarkPackagesMultipartRequestBody defines body for PostEnclavesEnclaveIdentifierStarlarkPackages for multipart/form-data ContentType.
type PostEnclavesEnclaveIdentifierStarlarkPackagesMultipartRequestBody = PostEnclavesEnclaveIdentifierStarlarkPackagesMultipartBody

// PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdJSONRequestBody defines body for PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId for application/json ContentType.
type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdJSONRequestBody = externalRef0.RunStarlarkPackage

// PostEnclavesEnclaveIdentifierStarlarkScriptsJSONRequestBody defines body for PostEnclavesEnclaveIdentifierStarlarkScripts for application/json ContentType.
type PostEnclavesEnclaveIdentifierStarlarkScriptsJSONRequestBody = externalRef0.RunStarlarkScript

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /enclaves/{enclave_identifier}/artifacts)
	GetEnclavesEnclaveIdentifierArtifacts(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier) error

	// (POST /enclaves/{enclave_identifier}/artifacts/local-file)
	PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier) error

	// (POST /enclaves/{enclave_identifier}/artifacts/remote-file)
	PostEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier) error

	// (POST /enclaves/{enclave_identifier}/artifacts/services/{service_identifier})
	PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier, serviceIdentifier externalRef0.ServiceIdentifier) error

	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier})
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier, artifactIdentifier externalRef0.ArtifactIdentifier) error

	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier}/download)
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier, artifactIdentifier externalRef0.ArtifactIdentifier) error

	// (GET /enclaves/{enclave_identifier}/services)
	GetEnclavesEnclaveIdentifierServices(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier, params GetEnclavesEnclaveIdentifierServicesParams) error

	// (POST /enclaves/{enclave_identifier}/services/connection)
	PostEnclavesEnclaveIdentifierServicesConnection(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier) error

	// (GET /enclaves/{enclave_identifier}/services/history)
	GetEnclavesEnclaveIdentifierServicesHistory(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier) error

	// (GET /enclaves/{enclave_identifier}/services/{service_identifier})
	GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier, serviceIdentifier externalRef0.ServiceIdentifier) error

	// (POST /enclaves/{enclave_identifier}/services/{service_identifier}/command)
	PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier, serviceIdentifier externalRef0.ServiceIdentifier) error

	// (GET /enclaves/{enclave_identifier}/services/{service_identifier}/endpoints/{port_number}/availability)
	GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier, serviceIdentifier externalRef0.ServiceIdentifier, portNumber externalRef0.PortNumber, params GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityParams) error

	// (GET /enclaves/{enclave_identifier}/starlark)
	GetEnclavesEnclaveIdentifierStarlark(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier) error

	// (POST /enclaves/{enclave_identifier}/starlark/packages)
	PostEnclavesEnclaveIdentifierStarlarkPackages(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier) error

	// (POST /enclaves/{enclave_identifier}/starlark/packages/{package_id})
	PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier, packageId externalRef0.PackageId, params PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdParams) error

	// (POST /enclaves/{enclave_identifier}/starlark/scripts)
	PostEnclavesEnclaveIdentifierStarlarkScripts(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier, params PostEnclavesEnclaveIdentifierStarlarkScriptsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetEnclavesEnclaveIdentifierArtifacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierArtifacts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier externalRef0.EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierArtifacts(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierArtifactsLocalFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier externalRef0.EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierArtifactsRemoteFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier externalRef0.EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier externalRef0.EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier externalRef0.ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx, enclaveIdentifier, serviceIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier externalRef0.EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "artifact_identifier" -------------
	var artifactIdentifier externalRef0.ArtifactIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "artifact_identifier", runtime.ParamLocationPath, ctx.Param("artifact_identifier"), &artifactIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artifact_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx, enclaveIdentifier, artifactIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier externalRef0.EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "artifact_identifier" -------------
	var artifactIdentifier externalRef0.ArtifactIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "artifact_identifier", runtime.ParamLocationPath, ctx.Param("artifact_identifier"), &artifactIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artifact_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx, enclaveIdentifier, artifactIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierServices converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServices(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier externalRef0.EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnclavesEnclaveIdentifierServicesParams
	// ------------- Optional query parameter "services" -------------

	err = runtime.BindQueryParameter("form", true, false, "services", ctx.QueryParams(), &params.Services)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter services: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServices(ctx, enclaveIdentifier, params)
	return err
}

// PostEnclavesEnclaveIdentifierServicesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierServicesConnection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier externalRef0.EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierServicesConnection(ctx, enclaveIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierServicesHistory converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServicesHistory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier externalRef0.EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServicesHistory(ctx, enclaveIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier externalRef0.EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier externalRef0.ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx, enclaveIdentifier, serviceIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier externalRef0.EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier externalRef0.ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx, enclaveIdentifier, serviceIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier externalRef0.EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier externalRef0.ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// ------------- Path parameter "port_number" -------------
	var portNumber externalRef0.PortNumber

	err = runtime.BindStyledParameterWithLocation("simple", false, "port_number", runtime.ParamLocationPath, ctx.Param("port_number"), &portNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter port_number: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityParams
	// ------------- Optional query parameter "http_method" -------------

	err = runtime.BindQueryParameter("form", true, false, "http_method", ctx.QueryParams(), &params.HttpMethod)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter http_method: %s", err))
	}

	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "initial_delay_milliseconds" -------------

	err = runtime.BindQueryParameter("form", true, false, "initial_delay_milliseconds", ctx.QueryParams(), &params.InitialDelayMilliseconds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter initial_delay_milliseconds: %s", err))
	}

	// ------------- Optional query parameter "retries" -------------

	err = runtime.BindQueryParameter("form", true, false, "retries", ctx.QueryParams(), &params.Retries)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter retries: %s", err))
	}

	// ------------- Optional query parameter "retries_delay_milliseconds" -------------

	err = runtime.BindQueryParameter("form", true, false, "retries_delay_milliseconds", ctx.QueryParams(), &params.RetriesDelayMilliseconds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter retries_delay_milliseconds: %s", err))
	}

	// ------------- Optional query parameter "expected_response" -------------

	err = runtime.BindQueryParameter("form", true, false, "expected_response", ctx.QueryParams(), &params.ExpectedResponse)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expected_response: %s", err))
	}

	// ------------- Optional query parameter "request_body" -------------

	err = runtime.BindQueryParameter("form", true, false, "request_body", ctx.QueryParams(), &params.RequestBody)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter request_body: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx, enclaveIdentifier, serviceIdentifier, portNumber, params)
	return err
}

// GetEnclavesEnclaveIdentifierStarlark converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierStarlark(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier externalRef0.EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierStarlark(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierStarlarkPackages converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierStarlarkPackages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier externalRef0.EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierStarlarkPackages(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier externalRef0.EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "package_id" -------------
	var packageId externalRef0.PackageId

	err = runtime.BindStyledParameterWithLocation("simple", false, "package_id", runtime.ParamLocationPath, ctx.Param("package_id"), &packageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdParams
	// ------------- Optional query parameter "retrieve_logs_async" -------------

	err = runtime.BindQueryParameter("form", true, false, "retrieve_logs_async", ctx.QueryParams(), &params.RetrieveLogsAsync)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter retrieve_logs_async: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx, enclaveIdentifier, packageId, params)
	return err
}

// PostEnclavesEnclaveIdentifierStarlarkScripts converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierStarlarkScripts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier externalRef0.EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostEnclavesEnclaveIdentifierStarlarkScriptsParams
	// ------------- Optional query parameter "retrieve_logs_async" -------------

	err = runtime.BindQueryParameter("form", true, false, "retrieve_logs_async", ctx.QueryParams(), &params.RetrieveLogsAsync)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter retrieve_logs_async: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierStarlarkScripts(ctx, enclaveIdentifier, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/enclaves/:enclave_identifier/artifacts", wrapper.GetEnclavesEnclaveIdentifierArtifacts)
	router.POST(baseURL+"/enclaves/:enclave_identifier/artifacts/local-file", wrapper.PostEnclavesEnclaveIdentifierArtifactsLocalFile)
	router.POST(baseURL+"/enclaves/:enclave_identifier/artifacts/remote-file", wrapper.PostEnclavesEnclaveIdentifierArtifactsRemoteFile)
	router.POST(baseURL+"/enclaves/:enclave_identifier/artifacts/services/:service_identifier", wrapper.PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier)
	router.GET(baseURL+"/enclaves/:enclave_identifier/artifacts/:artifact_identifier", wrapper.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier)
	router.GET(baseURL+"/enclaves/:enclave_identifier/artifacts/:artifact_identifier/download", wrapper.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services", wrapper.GetEnclavesEnclaveIdentifierServices)
	router.POST(baseURL+"/enclaves/:enclave_identifier/services/connection", wrapper.PostEnclavesEnclaveIdentifierServicesConnection)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services/history", wrapper.GetEnclavesEnclaveIdentifierServicesHistory)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier", wrapper.GetEnclavesEnclaveIdentifierServicesServiceIdentifier)
	router.POST(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier/command", wrapper.PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier/endpoints/:port_number/availability", wrapper.GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability)
	router.GET(baseURL+"/enclaves/:enclave_identifier/starlark", wrapper.GetEnclavesEnclaveIdentifierStarlark)
	router.POST(baseURL+"/enclaves/:enclave_identifier/starlark/packages", wrapper.PostEnclavesEnclaveIdentifierStarlarkPackages)
	router.POST(baseURL+"/enclaves/:enclave_identifier/starlark/packages/:package_id", wrapper.PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId)
	router.POST(baseURL+"/enclaves/:enclave_identifier/starlark/scripts", wrapper.PostEnclavesEnclaveIdentifierStarlarkScripts)

}

type NotOkJSONResponse externalRef0.ResponseInfo

type GetEnclavesEnclaveIdentifierArtifactsRequestObject struct {
	EnclaveIdentifier externalRef0.EnclaveIdentifier `json:"enclave_identifier"`
}

type GetEnclavesEnclaveIdentifierArtifactsResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierArtifactsResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierArtifacts200JSONResponse []externalRef0.FileArtifactReference

func (response GetEnclavesEnclaveIdentifierArtifacts200JSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierArtifactsdefaultJSONResponse struct {
	Body       externalRef0.ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierArtifactsdefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject struct {
	EnclaveIdentifier externalRef0.EnclaveIdentifier `json:"enclave_identifier"`
	Body              *multipart.Reader
}

type PostEnclavesEnclaveIdentifierArtifactsLocalFileResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierArtifactsLocalFileResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierArtifactsLocalFile200JSONResponse map[string]externalRef0.FileArtifactReference

func (response PostEnclavesEnclaveIdentifierArtifactsLocalFile200JSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsLocalFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierArtifactsLocalFiledefaultJSONResponse struct {
	Body       externalRef0.ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierArtifactsLocalFiledefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsLocalFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject struct {
	EnclaveIdentifier externalRef0.EnclaveIdentifier `json:"enclave_identifier"`
	Body              *PostEnclavesEnclaveIdentifierArtifactsRemoteFileJSONRequestBody
}

type PostEnclavesEnclaveIdentifierArtifactsRemoteFileResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierArtifactsRemoteFileResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierArtifactsRemoteFile200JSONResponse externalRef0.FileArtifactReference

func (response PostEnclavesEnclaveIdentifierArtifactsRemoteFile200JSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsRemoteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierArtifactsRemoteFiledefaultJSONResponse struct {
	Body       externalRef0.ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierArtifactsRemoteFiledefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsRemoteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject struct {
	EnclaveIdentifier externalRef0.EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier externalRef0.ServiceIdentifier `json:"service_identifier"`
	Body              *PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierJSONRequestBody
}

type PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier200JSONResponse externalRef0.FileArtifactReference

func (response PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier200JSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierdefaultJSONResponse struct {
	Body       externalRef0.ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierdefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject struct {
	EnclaveIdentifier  externalRef0.EnclaveIdentifier  `json:"enclave_identifier"`
	ArtifactIdentifier externalRef0.ArtifactIdentifier `json:"artifact_identifier"`
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier200JSONResponse []externalRef0.FileArtifactDescription

func (response GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier200JSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierdefaultJSONResponse struct {
	Body       externalRef0.ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierdefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject struct {
	EnclaveIdentifier  externalRef0.EnclaveIdentifier  `json:"enclave_identifier"`
	ArtifactIdentifier externalRef0.ArtifactIdentifier `json:"artifact_identifier"`
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload200ApplicationoctetStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload200ApplicationoctetStreamResponse) VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloaddefaultJSONResponse struct {
	Body       externalRef0.ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloaddefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierServicesRequestObject struct {
	EnclaveIdentifier externalRef0.EnclaveIdentifier `json:"enclave_identifier"`
	Params            GetEnclavesEnclaveIdentifierServicesParams
}

type GetEnclavesEnclaveIdentifierServicesResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierServicesResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierServices200JSONResponse map[string]externalRef0.ServiceInfo

func (response GetEnclavesEnclaveIdentifierServices200JSONResponse) VisitGetEnclavesEnclaveIdentifierServicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierServicesdefaultJSONResponse struct {
	Body       externalRef0.ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierServicesdefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierServicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierServicesConnectionRequestObject struct {
	EnclaveIdentifier externalRef0.EnclaveIdentifier `json:"enclave_identifier"`
	Body              *PostEnclavesEnclaveIdentifierServicesConnectionJSONRequestBody
}

type PostEnclavesEnclaveIdentifierServicesConnectionResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierServicesConnectionResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierServicesConnection200Response struct {
}

func (response PostEnclavesEnclaveIdentifierServicesConnection200Response) VisitPostEnclavesEnclaveIdentifierServicesConnectionResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostEnclavesEnclaveIdentifierServicesConnectiondefaultJSONResponse struct {
	Body       externalRef0.ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierServicesConnectiondefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierServicesConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierServicesHistoryRequestObject struct {
	EnclaveIdentifier externalRef0.EnclaveIdentifier `json:"enclave_identifier"`
}

type GetEnclavesEnclaveIdentifierServicesHistoryResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierServicesHistoryResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierServicesHistory200JSONResponse []externalRef0.ServiceIdentifiers

func (response GetEnclavesEnclaveIdentifierServicesHistory200JSONResponse) VisitGetEnclavesEnclaveIdentifierServicesHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierServicesHistorydefaultJSONResponse struct {
	Body       externalRef0.ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierServicesHistorydefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierServicesHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject struct {
	EnclaveIdentifier externalRef0.EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier externalRef0.ServiceIdentifier `json:"service_identifier"`
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifier200JSONResponse externalRef0.ServiceInfo

func (response GetEnclavesEnclaveIdentifierServicesServiceIdentifier200JSONResponse) VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierdefaultJSONResponse struct {
	Body       externalRef0.ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierServicesServiceIdentifierdefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject struct {
	EnclaveIdentifier externalRef0.EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier externalRef0.ServiceIdentifier `json:"service_identifier"`
	Body              *PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandJSONRequestBody
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand200JSONResponse externalRef0.ExecCommandResult

func (response PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand200JSONResponse) VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommanddefaultJSONResponse struct {
	Body       externalRef0.ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommanddefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject struct {
	EnclaveIdentifier externalRef0.EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier externalRef0.ServiceIdentifier `json:"service_identifier"`
	PortNumber        externalRef0.PortNumber        `json:"port_number"`
	Params            GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityParams
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability200Response struct {
}

func (response GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability200Response) VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetEnclavesEnclaveIdentifierStarlarkRequestObject struct {
	EnclaveIdentifier externalRef0.EnclaveIdentifier `json:"enclave_identifier"`
}

type GetEnclavesEnclaveIdentifierStarlarkResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierStarlarkResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierStarlark200JSONResponse externalRef0.StarlarkDescription

func (response GetEnclavesEnclaveIdentifierStarlark200JSONResponse) VisitGetEnclavesEnclaveIdentifierStarlarkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierStarlarkdefaultJSONResponse struct {
	Body       externalRef0.ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierStarlarkdefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierStarlarkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject struct {
	EnclaveIdentifier externalRef0.EnclaveIdentifier `json:"enclave_identifier"`
	Body              *multipart.Reader
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierStarlarkPackagesResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierStarlarkPackages200Response struct {
}

func (response PostEnclavesEnclaveIdentifierStarlarkPackages200Response) VisitPostEnclavesEnclaveIdentifierStarlarkPackagesResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesdefaultJSONResponse struct {
	Body       externalRef0.ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierStarlarkPackagesdefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkPackagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject struct {
	EnclaveIdentifier externalRef0.EnclaveIdentifier `json:"enclave_identifier"`
	PackageId         externalRef0.PackageId         `json:"package_id"`
	Params            PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdParams
	Body              *PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdJSONRequestBody
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId200JSONResponse externalRef0.StarlarkRunResponse

func (response PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId200JSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIddefaultJSONResponse struct {
	Body       externalRef0.ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIddefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject struct {
	EnclaveIdentifier externalRef0.EnclaveIdentifier `json:"enclave_identifier"`
	Params            PostEnclavesEnclaveIdentifierStarlarkScriptsParams
	Body              *PostEnclavesEnclaveIdentifierStarlarkScriptsJSONRequestBody
}

type PostEnclavesEnclaveIdentifierStarlarkScriptsResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierStarlarkScripts200JSONResponse externalRef0.StarlarkRunResponse

func (response PostEnclavesEnclaveIdentifierStarlarkScripts200JSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierStarlarkScriptsdefaultJSONResponse struct {
	Body       externalRef0.ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierStarlarkScriptsdefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /enclaves/{enclave_identifier}/artifacts)
	GetEnclavesEnclaveIdentifierArtifacts(ctx context.Context, request GetEnclavesEnclaveIdentifierArtifactsRequestObject) (GetEnclavesEnclaveIdentifierArtifactsResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/artifacts/local-file)
	PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx context.Context, request PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject) (PostEnclavesEnclaveIdentifierArtifactsLocalFileResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/artifacts/remote-file)
	PostEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx context.Context, request PostEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject) (PostEnclavesEnclaveIdentifierArtifactsRemoteFileResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/artifacts/services/{service_identifier})
	PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx context.Context, request PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject) (PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier})
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx context.Context, request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject) (GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier}/download)
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx context.Context, request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject) (GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/services)
	GetEnclavesEnclaveIdentifierServices(ctx context.Context, request GetEnclavesEnclaveIdentifierServicesRequestObject) (GetEnclavesEnclaveIdentifierServicesResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/services/connection)
	PostEnclavesEnclaveIdentifierServicesConnection(ctx context.Context, request PostEnclavesEnclaveIdentifierServicesConnectionRequestObject) (PostEnclavesEnclaveIdentifierServicesConnectionResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/services/history)
	GetEnclavesEnclaveIdentifierServicesHistory(ctx context.Context, request GetEnclavesEnclaveIdentifierServicesHistoryRequestObject) (GetEnclavesEnclaveIdentifierServicesHistoryResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/services/{service_identifier})
	GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx context.Context, request GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject) (GetEnclavesEnclaveIdentifierServicesServiceIdentifierResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/services/{service_identifier}/command)
	PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx context.Context, request PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject) (PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/services/{service_identifier}/endpoints/{port_number}/availability)
	GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx context.Context, request GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject) (GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponseObject, error)

	// (GET /enclaves/{enclave_identifier}/starlark)
	GetEnclavesEnclaveIdentifierStarlark(ctx context.Context, request GetEnclavesEnclaveIdentifierStarlarkRequestObject) (GetEnclavesEnclaveIdentifierStarlarkResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/starlark/packages)
	PostEnclavesEnclaveIdentifierStarlarkPackages(ctx context.Context, request PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject) (PostEnclavesEnclaveIdentifierStarlarkPackagesResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/starlark/packages/{package_id})
	PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx context.Context, request PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject) (PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponseObject, error)

	// (POST /enclaves/{enclave_identifier}/starlark/scripts)
	PostEnclavesEnclaveIdentifierStarlarkScripts(ctx context.Context, request PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject) (PostEnclavesEnclaveIdentifierStarlarkScriptsResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetEnclavesEnclaveIdentifierArtifacts operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierArtifacts(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier) error {
	var request GetEnclavesEnclaveIdentifierArtifactsRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierArtifacts(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierArtifactsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierArtifacts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierArtifactsResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierArtifactsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierArtifactsLocalFile operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierArtifactsLocalFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierArtifactsLocalFileResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierArtifactsLocalFileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierArtifactsRemoteFile operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	var body PostEnclavesEnclaveIdentifierArtifactsRemoteFileJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierArtifactsRemoteFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierArtifactsRemoteFileResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierArtifactsRemoteFileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier, serviceIdentifier externalRef0.ServiceIdentifier) error {
	var request PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier

	var body PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier, artifactIdentifier externalRef0.ArtifactIdentifier) error {
	var request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ArtifactIdentifier = artifactIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier, artifactIdentifier externalRef0.ArtifactIdentifier) error {
	var request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ArtifactIdentifier = artifactIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierServices operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierServices(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier, params GetEnclavesEnclaveIdentifierServicesParams) error {
	var request GetEnclavesEnclaveIdentifierServicesRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierServices(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierServicesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierServices")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierServicesResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierServicesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierServicesConnection operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierServicesConnection(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierServicesConnectionRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	var body PostEnclavesEnclaveIdentifierServicesConnectionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierServicesConnection(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierServicesConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierServicesConnection")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierServicesConnectionResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierServicesConnectionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierServicesHistory operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierServicesHistory(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier) error {
	var request GetEnclavesEnclaveIdentifierServicesHistoryRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierServicesHistory(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierServicesHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierServicesHistory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierServicesHistoryResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierServicesHistoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifier operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier, serviceIdentifier externalRef0.ServiceIdentifier) error {
	var request GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierServicesServiceIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierServicesServiceIdentifierResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier, serviceIdentifier externalRef0.ServiceIdentifier) error {
	var request PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier

	var body PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier, serviceIdentifier externalRef0.ServiceIdentifier, portNumber externalRef0.PortNumber, params GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityParams) error {
	var request GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier
	request.PortNumber = portNumber
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierStarlark operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierStarlark(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier) error {
	var request GetEnclavesEnclaveIdentifierStarlarkRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierStarlark(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierStarlarkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierStarlark")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierStarlarkResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierStarlarkResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierStarlarkPackages operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierStarlarkPackages(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierStarlarkPackages(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierStarlarkPackages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierStarlarkPackagesResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierStarlarkPackagesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier, packageId externalRef0.PackageId, params PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdParams) error {
	var request PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.PackageId = packageId
	request.Params = params

	var body PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierStarlarkScripts operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierStarlarkScripts(ctx echo.Context, enclaveIdentifier externalRef0.EnclaveIdentifier, params PostEnclavesEnclaveIdentifierStarlarkScriptsParams) error {
	var request PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.Params = params

	var body PostEnclavesEnclaveIdentifierStarlarkScriptsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierStarlarkScripts(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierStarlarkScripts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierStarlarkScriptsResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./api_types.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
